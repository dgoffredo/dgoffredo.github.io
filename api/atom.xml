<feed xmlns="http://www.w3.org/2005/Atom"><title>A Programming Blog</title><link href="https://www.davidgoffredo.com" /><updated>2022-12-02</updated><author><name>David Goffredo</name></author><id>https://www.davidgoffredo.com/feed</id><entry><title>กรุงเทพมหานคร</title><link href="https://www.davidgoffredo.com/southeast-asia/bangkok/bangkok.html" /><id>https://www.davidgoffredo.com/southeast-asia/bangkok/bangkok.html</id><updated>2022-12-02</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/southeast-asia/bangkok/bangkok.html" />
        </head>
        <body>
            <h1>กรุงเทพมหานคร</h1>
<video controls="true" width="700">
  <source src="blade-runner-2022.mp4" type="video/mp4" />
</video><p><img src="rain-1_small.webp" alt="rain" /></p>
<p><img src="rain-2_small.webp" alt="more rain" /></p>
<p><img src="rain-3_small.webp" alt="even more rain" /></p>
<p><img src="beware_small.webp" alt="beware of cars" /></p>
<p>Welcome to the Land of Smiles.</p>
<p>The prostitutes block your path in neat formations like rows of tiny stilettoed
linebackers.  The one who grabbed my crotch had implausibly strong hands.</p>
<p>We were on our way from one fancy beer bar to another, and our route brought
us through a red-light district.</p>
<p>As it was my birthday, I stated my preference that there would be no girlie
bars on the night's crawl, nor go-go dancers, unsolicited solicitations,
kickbacks from the bartender, or where are you from.  Massage?  A bar nearby is
called "Friendship Bar."  A Google review claims "nice girls, no pressure."
Well that doesn't sound so bad.  Nice girls, no pressure.  Who doesn't like
friendship?</p>
<p>We ate at the first pub, a sleepy spot practically devoid of humans and
featuring a pool table and a dart board, and a full kitchen.  The portions were
small, so we ordered two entrees each.  The cook would even make things off
the menu by request.  Pretty cool for a sports dive.  We ended up there at the
late end of a subsequent night, just the two of us playing pool while the staff
patiently waited for us to leave.</p>
<p>Then it was off to an English themed pub.  Here we discovered Beerlao Dark as
recommended by Uncle Charlie, and watched some of whatever soccer game was on.
We returned there briefly some days later but had to leave in a hurry to find
relief from the earwax-melting pop duo who were saturating the airwaves with
renditions of Neil Diamond's "Sweet Caroline" and Radiohead's "Creep" while
shitfaced regulars howled the lyrics in discordant unison.  In all fairness,
the duo was quite good, but <em>too fucking loud</em>.</p>
<p>Then it was time to up the ante and head to a semi-outdoor beer extravaganza,
also with a full kitchen and World Cup soccer.  There are many places to drink
in this part of Bangkok.  All expats and tourists.  It took some getting used
to coming from Vietnam — the block we're on more closely resembles the
apartments across the street from Costco than it does the center of the
capital of Thailand.  Except for all the hookers.</p>
<p>South Korea versus Ghana was a pretty exciting soccer game. For example, the
score was not 0-0.  Ghana, coming in widely outranked by Korea, scored two
goals right off the bat, or whatever the analogy is in soccer. Then Korea
managed to tie it up.  Ghana scored again, and there just wasn't enough time
for Korea to take it back.  If I were judging based solely on the reactions of
the Korean fans, I'd say the world had truly ended.</p>
<p>There are other things to see and do in Bangkok.</p>
<p><img src="river_small.webp" alt="river" /></p>
<p><img src="moon_small.webp" alt="moon" /></p>
<p><img src="ripple_small.webp" alt="water ripple" /></p>
<p><img src="path_small.webp" alt="path" /></p>
<p><img src="cat_small.webp" alt="cat" /></p>
<p><img src="park_small.webp" alt="park" /></p>
<p>I didn't get a good shot of it, but that park was infested with dog-sized <a href="https://en.wikipedia.org/wiki/Monitor_lizard">monitor lizards</a>, or I think that's what they are.  Godzilla.</p>
<p><img src="lizard_small.webp" alt="lizard" /></p>
<p><img src="lizard-2_small.webp" alt="more lizards" /></p>
<p><img src="roof_small.webp" alt="roof" /></p>
<p><img src="reflection_small.webp" alt="reflection" /></p>
<p><img src="skyline_small.webp" alt="skyline" /></p>
<p>Wednesday we saw the sights, including the palace and the reclining Buddha.</p>
<p><img src="palace-1_small.webp" alt="palace 1/4" /></p>
<p><img src="palace-2_small.webp" alt="palace 2/4" /></p>
<p><img src="palace-3_small.webp" alt="palace 3/4" /></p>
<p><img src="palace-4_small.webp" alt="palace 4/4" /></p>
<p><img src="buddha-1_small.webp" alt="buddha 1/3" /></p>
<p><img src="buddha-2_small.webp" alt="buddha 2/3" /></p>
<p><img src="buddha-3_small.webp" alt="buddha 3/3" /></p>
<p>Peekaboo!</p>
<p><img src="tree_small.webp" alt="tree" /></p>
<p>The interior walls of one of the buildings was covered in "Where's Waldo?"
style murals depicting warring peoples, apes, demons, gods, and all sorts of
wild stuff.</p>
<p><img src="mural-1_small.webp" alt="mural 1/3" /></p>
<p><img src="mural-2_small.webp" alt="mural 2/3" /></p>
<p><img src="mural-3_small.webp" alt="mural 3/3" /></p>
<p>I'm getting better at aiming the discolored dollops of glue that I expel from
my nose in the shower every morning.  Straight for the drain, it's a mess to
clean off the tile.</p>
<p>In Vietnam I could attempt to pronounce the writing.  In Thailand there's no
chance.  Here's a sample of the script:</p>
<p><img src="writing_small.webp" alt="writing" /></p>
<h2>Chinatown</h2>
<p>Yesterday we took the underground out to the Chinese part of town.  Here things
were much more like the rest of the region: narrow alley markets, fish
everywhere, skinny buildings, temples, schools, and Asian people.</p>
<p>We passed through a neighborhood where nearly everybody must be a machinist
or a motorbike mechanic.</p>
<p><img src="elephants_small.webp" alt="elephants" /></p>
<p>I didn't take many pictures in Chinatown, which is a shame because it's a nice
area.</p>
<p>I did take pictures of the river and of the golden Buddha.</p>
<p><img src="river-2_small.webp" alt="river with skyline" /></p>
<p><img src="arch_small.webp" alt="inscripted arch" /></p>
<p><img src="golden-1_small.webp" alt="golden buddha temple outside" /></p>
<p><img src="golden-2_small.webp" alt="golden buddha from behind" /></p>
<p>Our last find in Chinatown was a church that you can only access by walking
through a school playground.  In the corner was a narrow spiral staircase that
led up to a balcony in the rear of the church.  There were instruments and mics
set up for the band, and behind that was a small music room where the carillon
was controlled.  You could even climb a ladder up the the bells themselves, if
you dared.</p>
<p><img src="church-1_small.webp" alt="inside the church" /></p>
<p><img src="church-2_small.webp" alt="music blackboard" /></p>
<p><img src="church-3_small.webp" alt="carillon" /></p>
<p><img src="church-4_small.webp" alt="carillon music" /></p>
<p>After a little rest by the river, we walked just shy of an hour as the sun set,
headed for the party street where we had dinner and partied.</p>
<p><img src="walk-1_small.webp" alt="walking into sunset" /></p>
<p><img src="walk-2_small.webp" alt="nice canal" /></p>
<video controls="true" width="700">
  <source src="party.mp4" type="video/mp4" />
</video><p>Today we slept way in and then ran some errands.  Tonight we might revisit a
park.</p>
<p>Tomorrow Pasha heads back to <a href="https://en.wikipedia.org/wiki/Pattaya">Pattaya</a> and I head over the Pacific.</p>
<p>ลา.</p>


        </body>
    </html></div></content></entry><entry><title>Hà Nội</title><link href="https://www.davidgoffredo.com/southeast-asia/hanoi/hanoi.html" /><id>https://www.davidgoffredo.com/southeast-asia/hanoi/hanoi.html</id><updated>2022-11-27</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/southeast-asia/hanoi/hanoi.html" />
        </head>
        <body>
            <h1>Hà Nội</h1>
<p>As helmsman and joint captain of the USS Paddle Kitty, I'm responsible for
ensuring safe and timely passage through the smog obscured waters of the Hồ
Tây. An enemy ship is always nearby.</p>
<video controls="true" width="700">
  <source src="boat.mp4" type="video/mp4" />
</video><p><img src="swan_small.webp" alt="swan paddle boat" /></p>
<p><img src="paddle_small.webp" alt="boat foot paddles" /></p>
<p>Back in Nha Trang we did get one good beach day.  The water was nice and warm.</p>
<p><img src="kite_small.webp" alt="kite flying by beach" /></p>
<p><img src="sunset_small.webp" alt="sunset over  river" /></p>
<p><img src="dog_small.webp" alt="river with dog and motorbike" /></p>
<p>There was another temple, this time with boobs.</p>
<p><img src="temple-1_small.webp" alt="temple" /></p>
<p><img src="temple-2_small.webp" alt="more temple" /></p>
<p><img src="boobs_small.webp" alt="statue with boobs" /></p>
<p>On the way back from the temple, we stopped at a choose-from-the-tank seafood
restaurant. These were my victims.</p>
<p><img src="shrimp_small.webp" alt="shrimp" /></p>
<p>Pasha didn't want to order anything there, so we stopped at another restaurant
closer to the apartment.</p>
<p><img src="fish_small.webp" alt="fried fish" /></p>
<p>There was no shortage of temples, pagodas, and citadels in Hanoi, either.</p>
<p><img src="tunnel_small.webp" alt="woman in tunnel" /></p>
<p><img src="pagoda_small.webp" alt="pagoda" /></p>
<p><img src="reflection_small.webp" alt="reflection of tree in water" /></p>
<p><img src="trees_small.webp" alt="trees on citadel grounds" /></p>
<p><img src="bricks_small.webp" alt="bricks piled by wall" /></p>
<p>I don't know why, but entire streets are dedicated to selling Christmas
decorations.  This is a small sample, but imagine city blocks of blinding
lights, santa hats, candy canes, and plastic reindeer.</p>
<p><img src="christmas_small.webp" alt="Christmas" /></p>
<p>Being a nominally communist capital, there is an obligatory statue of Lenin.</p>
<p><img src="lenin_small.webp" alt="Lenin statue" /></p>
<p>The main tourist spot is a "beer street" in the old part of the city.  Rows
and rows of tiny plastic chairs where you drink beer and eat hot pot and
boiled peanuts.  Once every couple hours a police car crawls by, and the
staff all scramble to fold tables, chairs, and umbrellas to make room for
the car.  When the cop has passed, they put everything back.</p>
<p>The world cup is happening, so almost every venue had a big screen TV with
the day's game.  We met a couple of French guys, some Canadians, and one
rather well traveled Chilean named Nacho.</p>
<p><img src="tiger_small.webp" alt="beer street" /></p>
<p><img src="world-cup_small.webp" alt="beer street 2" /></p>
<p><img src="balcony_small.webp" alt="beer street 3" /></p>
<p><img src="balloons_small.webp" alt="beer street 4" /></p>
<p><img src="hookah_small.webp" alt="beer street 5" /></p>
<p>The food in Hanoi was less about the soup and more about the meat, though soup
was never far away.</p>
<p><img src="soup_small.webp" alt="soup" /></p>
<p><img src="beef_small.webp" alt="beef" /></p>
<p><img src="street_small.webp" alt="street" /></p>
<p>So much for Vietnam.  We're currently on our way to Bangkok.</p>
<p><img src="feet_small.webp" alt="feet" /></p>
<p><img src="plane-1_small.webp" alt="plane 1" /></p>
<p><img src="plane-2_small.webp" alt="plane 2" /></p>
<p>I should look up how to say "hello."</p>


        </body>
    </html></div></content></entry><entry><title>Nha Trang</title><link href="https://www.davidgoffredo.com/southeast-asia/nha-trang/nha-trang.html" /><id>https://www.davidgoffredo.com/southeast-asia/nha-trang/nha-trang.html</id><updated>2022-11-22</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/southeast-asia/nha-trang/nha-trang.html" />
        </head>
        <body>
            <h1>Nha Trang</h1>
<p>Goodbye, Ho Chi Minh City.</p>
<p><img src="plane-1_small.webp" alt="take-off from Ho Chi Minh City" /></p>
<p><img src="shoes_small.webp" alt="shoes on plane" /></p>
<p><img src="plane-2_small.webp" alt="above the clouds" /></p>
<p>Hello, Nha Trang.</p>
<p><img src="plane-3_small.webp" alt="landing in Nha Trang" /></p>
<p><img src="beach-tree_small.webp" alt="ocean with tree" /></p>
<p>Before we left, I repaired the handle on my suitcase.  All it took was Pasha's
Soviet era scissors, a roll of local nylon yarn, a chopstick, some packing
tape, and a little patience.  I got the yarn and the tape from the hardware
district in Ho Chi Minh. Paid way too much for the yarn.  The tape was okay.</p>
<p><img src="repairs_small.webp" alt="repaired suitcase" /></p>
<p>If you're thinking "why not just buy a new suitcase?" then you are so missing
the point.  This suitcase was on its way to the landfill, abandoned and
neglected.  Now it is my pet.  My precious pet suitcase.  My janky socks box.</p>
<p><img src="ocean_small.webp" alt="the ocean" /></p>
<p><img src="mountains_small.webp" alt="mountains over the water" /></p>
<p>We haven't seen the sun yet, and it rains constantly.  That's a little
disappointing for a beach destination, but there are other things to do.</p>
<p><img src="tiger_small.webp" alt="beer" /></p>
<p><img src="flowers_small.webp" alt="flowers" /></p>
<p>This afternoon we walked through town in the rain on our way to another
pagoda, <a href="https://en.wikipedia.org/wiki/Long_S%C6%A1n_Pagoda">Long Sơn Pagoda</a>.  Rest assured, Nha Trang also has alleyways.</p>
<p><img src="alley_small.webp" alt="alleyway" /></p>
<p><img src="tracks_small.webp" alt="train tracks" /></p>
<p>Across the tracks and up a number of steps there is a campus of shrines and
statues, including this one of the reposed Buddha.</p>
<p><img src="sleepy-buddha_small.webp" alt="sleepy buddha" /></p>
<p>And this one of the enthroned Buddha.</p>
<p><img src="buddha_small.webp" alt="sitting buddha" /></p>
<p>I was into the views of the surrounding city, and some careful gardening by who
I imagine must be some of the monks.</p>
<p><img src="trail_small.webp" alt="trail" /></p>
<p><img src="stairs_small.webp" alt="stairs" /></p>
<p><img src="bell_small.webp" alt="bell" /></p>
<p><img src="view-1_small.webp" alt="city view 1" /></p>
<p><img src="view-2_small.webp" alt="city view 2" /></p>
<p><img src="snail_small.webp" alt="snail" /></p>
<p>At the bottom of the facility is a small labyrinth of shrine cubbies, like some
kind of vertical graveyard.  Each occupied square contained a plaque with a
picture of the deceased, their name, lifetime, some incense, and oil for flame.</p>
<p><img src="shrines_small.webp" alt="shrines" /></p>
<p>We are surrounded by Russians.  The restaurant signs are in Vietnamese,
English, and Russian.  One restaurant even had a separate Russian menu.
The dishes were totally different, few in number, and each accompanied by
a large picture.</p>
<p>Several of the restaurants prominently display non-decorative fish tanks.  Who
will be my next victim?</p>


        </body>
    </html></div></content></entry><entry><title>Việt Nam</title><link href="https://www.davidgoffredo.com/southeast-asia/saigon/vietnam.html" /><id>https://www.davidgoffredo.com/southeast-asia/saigon/vietnam.html</id><updated>2022-11-16</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/southeast-asia/saigon/vietnam.html" />
        </head>
        <body>
            <h1>Việt Nam</h1>
<video controls="true" width="700">
  <source src="lift.mp4" type="video/mp4" />
</video><video controls="true" width="700">
  <source src="rain.mp4" type="video/mp4" />
</video><video controls="true" width="700">
  <source src="rain2.mp4" type="video/mp4" />
</video><p><img src="pigeons_small.webp" alt="pigeon reflection" /></p>
<p><img src="rain_small.webp" alt="rain" /></p>
<p><img src="clouds_small.webp" alt="clouds from plane" /></p>
<p>Twenty hours in the air.  First leg was sixteen hours from JFK to Taipei,
and then another four from Taipei to Ho Chi Minh City.</p>
<p>A 750 mL plastic bottle of filtered tap water costs $7.50 in terminal 1 of
JFK airport.  It didn't occur to me to bring an <em>empty</em> bottle through
security, and then use one of the many bottle-filling water fountains near
the gate.</p>
<p>The flight went very well because the seat between me and the other isle
was empty.  The middle seats were empty throughout the whole plane,
so I'd say the flight was just below 2/3 full.  I wonder how many seats need
to be filled in order for the airline to break even.</p>
<p>After the final four hour leg to Ho Chi Minh, I was hurried onto military
transport to ensure timely arrival at the palace.</p>
<p><img src="helicopter_small.webp" alt="helicopter" /></p>
<p>Nguyễn Cao Kỳ already sat waiting at his desk when I was ushered into the
office.  Pasha soon followed, and the two of us sat facing each other as we
received the Prime Minister's briefing in our right and left ears, respectively.</p>
<p><img src="office_small.webp" alt="office" /></p>
<p>We had been summoned, as it turned out, to lend our aid to the war effort.
Pasha and I noted the irony of this, but for different reasons.</p>
<p>My role was to intercept and decrypt all short and long-band enemy dispatches.
To this end I was assigned this mid-90's Windows workstation:</p>
<p><img src="workstation_small.webp" alt="radio equipment" /></p>
<p>Pasha, for his part, was to aid in supply lines on the northern front.</p>
<p><img src="balance_small.webp" alt="balancing coconuts" /></p>
<p>In exchange, assuming we survived, the state would grant us free passes to the
Saigon Zoo and Botanical Gardens.</p>
<p>It's probably the best zoo I've ever visited.  I expected to see forlorn,
defeated animals trapped in concrete cages.  Actually, that's pretty much what
it was.  But the place is huge!  And some of the monkeys were free to roam
around the park.  They were silently walking across the scaffolding roof of the
boardwalk overlooking the ungulates.</p>
<p><img src="ungulates-1_small.webp" alt="ungulates 1/3" /></p>
<p><img src="ungulates-2_small.webp" alt="ungulates 2/3" /></p>
<p><img src="ungulates-3_small.webp" alt="ungulates 3/3" /></p>
<video controls="true" width="700">
  <source src="salad.mp4" type="video/mp4" />
</video><p>They have elephants and giraffes, too.</p>
<p><img src="elephants_small.webp" alt="elephants" /></p>
<p><img src="giraffes-1_small.webp" alt="giraffes 1/2" /></p>
<p><img src="giraffes-2_small.webp" alt="giraffes 2/2" /></p>
<p>... and deer, and chimps, and pigs...</p>
<p><img src="deer_small.webp" alt="deer" /></p>
<p><img src="chimps_small.webp" alt="chimps" /></p>
<video controls="true" width="700">
  <source src="pumba.mp4" type="video/mp4" />
</video><p>... and this guy...</p>
<p><img src="this-guy_small.webp" alt="this guy" /></p>
<p>... and <em>all</em> of the crocodiles, and iguanas, and snakes...</p>
<p><img src="crocs_small.webp" alt="crocodiles" /></p>
<video controls="true" width="700">
  <source src="bro.mp4" type="video/mp4" />
</video><video controls="true" width="700">
  <source src="snake.mp4" type="video/mp4" />
</video><p>... and many others.</p>
<p><img src="waterfowl_small.webp" alt="crane or stork" /></p>
<p><img src="aviary_small.webp" alt="aviary" /></p>
<p><img src="hippos_small.webp" alt="hippos" /></p>
<p>Near closing time, the goats noticed that a caretaker was hosing down the
adjacent hippopotamus enclosure.  They voiced, in unison, a reminder that it
was dinner time.</p>
<video controls="true" width="700">
  <source src="goats.mp4" type="video/mp4" />
</video><p>The grounds are beautiful.</p>
<p><img src="trees-1_small.webp" alt="trees" /></p>
<p><img src="trees-2_small.webp" alt="more trees" /></p>
<p>Ho Chi Minh City is its own sort of zoo, packed with motorbikes and lined with
nooks and alleys,</p>
<p><img src="alley-1_small.webp" alt="Alley 1/3" /></p>
<p><img src="alley-2_small.webp" alt="Alley 2/3" /></p>
<p><img src="alley-3_small.webp" alt="Alley 3/3" /></p>
<p>temples, pagodas, ancient tablets, and a very classy post office.</p>
<p><img src="temple-1_small.webp" alt="temple 1/2" /></p>
<p><img src="temple-2_small.webp" alt="temple 2/2" /></p>
<p><img src="pagoda-1_small.webp" alt="pagoda 1/4" /></p>
<p><img src="pagoda-2_small.webp" alt="pagoda 2/4" /></p>
<p><img src="pagoda-3_small.webp" alt="pagoda 3/4" /></p>
<p><img src="pagoda-4_small.webp" alt="pagoda 4/4" /></p>
<p><img src="tablet_small.webp" alt="stone tablet" /></p>
<p><img src="post-office_small.webp" alt="post office" /></p>
<p>There is also a war museum, but it's full of things that you don't want to put
in your blog.</p>
<p><img src="war-museum_small.webp" alt="war museum" /></p>
<p>Pasha and I walk everywhere. Blisters on my toes.  At this rate, soon I will no
longer be the fattest person in Vietnam.</p>
<p>Every third storefront is a cafe.  The places that cater to tourists want
as much as $3 for a coffee, but my man with the cart charges 60¢.</p>
<p>Tomorrow we'll be meeting my uncle's step daughter and her husband for
dinner.  I have yet to find bad food here, so I must keep searching.</p>
<p>Hẹn gặp lại.</p>


        </body>
    </html></div></content></entry><entry><title>Cannabis (Outdoors)</title><link href="https://www.davidgoffredo.com/cannabis-6/cannabis-6.html" /><id>https://www.davidgoffredo.com/cannabis-6/cannabis-6.html</id><updated>2022-09-18</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/cannabis-6/cannabis-6.html" />
        </head>
        <body>
            <h1>Cannabis (Outdoors)</h1>
<p><img src="07-22_small.webp" alt="doing well" /></p>
<p><img src="catnip_small.webp" alt="doing poorly" /></p>
<p>I'm a better catnip gardener than I am a cannabis gardener.</p>
<p>Growing cannabis outdoors in New York is not easy, no it is not.</p>
<p><img src="bin_small.webp" alt="containers" /></p>
<p>The plant containers began their life as newly purchased black <a href="https://www.reddit.com/r/NoTillGrowery/comments/txxeji/planning_outdoor_notill_roof_grow/">Rubbermaid
Roughneck 31 gallon storage totes</a>.</p>
<p>I drilled holes in the bottoms and sides, gave the exterior a couple of coats
of the cheapest white paint I could find, bought a shovel and a tarp, and
filled the containers with a <a href="https://www.reddit.com/r/NoTillGrowery/comments/ulegf7/roof_grow_part_2_making_the_soil/">soilless "Coot's" mix</a>.</p>
<p><img src="mix_small.webp" alt="the mixed growing medium" /></p>
<p><img src="mulch_small.webp" alt="with straw mulch" /></p>
<p>They're sitting on what used to be the back of an Ikea futon.</p>
<p>I put some straw mulch on top and scattered some seeds of white clover, German
chamomile, lemon balm, and catnip.</p>
<h2>Life</h2>
<p>Meanwhile, I got some seedlings going indoors.  Two of them are <a href="https://www.growerschoiceseeds.com/shop/cannabis-seeds/durban-poison-feminized-cannabis-seeds/">Durban
Poison</a> and one is <a href="https://www.growerschoiceseeds.com/shop/cannabis-seeds/feminized/master-kush-feminized-cannabis-seeds/">Master Kush</a>.</p>
<p><img src="seedlings_small.webp" alt="young plants indoors" /></p>
<p>You can't just put an indoor plant outside.  The sunlight will kill it.
Instead, you take the plants outside for a short time each day, gradually
increasing their exposure to full sun.</p>
<p>After doing this for a while, I transplanted two of the young plants into the
totes.  I don't remember which strain was which.</p>
<p><img src="hardening_small.webp" alt="hardening off" /></p>
<p><img src="planted_small.webp" alt="planted outdoors" /></p>
<p><img src="planted-left_small.webp" alt="left plant" /></p>
<p><img src="planted-right_small.webp" alt="right plant" /></p>
<p>A coworker recommended that I give the young plants some shelter from the noon
sun, so I found some light metal polls on garbage day, and used them to prop up
the tote lids as little roofs.</p>
<p><img src="roofs_small.webp" alt="roofs" /></p>
<p>On a windy day I noticed that one of the plants was being blown around to the
extent that the roots were moving.  Anchoring the middle of the stem to the
roof supports helped limit the wobble.</p>
<p><img src="tie_small.webp" alt="plant tied" /></p>
<p><img src="tie2_small.webp" alt="closer view of plant tied" /></p>
<p>At this point the plants were well established and <a href="https://www.reddit.com/r/NoTillGrowery/comments/vqsomk/roof_grow_update/">began to thrive</a>.</p>
<p><img src="07-08_small.webp" alt="July 8" /></p>
<p><img src="07-08_small.webp" alt="July 11" /></p>
<p>I chopped off the top portion of each plant in order to promote more lateral
growth.  This increases yield for indoor plants, and may increase yield or
discourage mold for outdoor plants.</p>
<p><img src="chop-before_small.webp" alt="before topping" /></p>
<p><img src="chop-after_small.webp" alt="after topping" /></p>
<p>There was quite a growth response.</p>
<p><img src="07-20_small.webp" alt="July 20" /></p>
<p><img src="07-22_small.webp" alt="July 22" /></p>
<p>That week I noticed that <a href="https://www.reddit.com/r/whatsthisplant/comments/w95qoe/aggressive_volunteer_in_my_roof_beds/">a weed</a> that had been growing alongside each plant
since the start began to take over.  In an act of anticompetitive crony
favoritism, I pulled the weeds out at the roots.</p>
<p><img src="pigweed_small.webp" alt="pigweed" /></p>
<p><img src="pigweed2_small.webp" alt="pigweed 2" /></p>
<p><img src="07-30_small.webp" alt="without weeds" /></p>
<h2>Death</h2>
<p>After a particularly windy day, I noticed that the left plant had suffered a
stem injury.  Not long after, the plant took a turn for the worst, and within a
few days it was dead.</p>
<p><img src="injury_small.webp" alt="injury" /></p>
<p><img src="clawing_small.webp" alt="clawing leaves" /></p>
<p><img src="yellow-before_small.webp" alt="before yellowing" /></p>
<p><img src="yellow-after_small.webp" alt="after yellowing" /></p>
<p><img src="dying_small.webp" alt="dying" /></p>
<p><img src="dead_small.webp" alt="dead" /></p>
<p>How quickly things can go south.</p>
<p>Then, less than a month after the first plant died, we go a spat of heavy
rains, and so went the second plant.</p>
<p><img src="second-before_small.webp" alt="before second plant illness" /></p>
<p><img src="second-after_small.webp" alt="after second plant illness" /></p>
<p><img src="second-dead_small.webp" alt="second plant dead" /></p>
<p><img src="catnip_small.webp" alt="catnip" /></p>
<p>At least the catnip is thriving.</p>
<h2>Next</h2>
<p>My best guess at the problem these plants faced is inadequate drainage of the
growing medium.  The mix is approximately 1/3 perlite by volume, but perhaps
after a heavy rain even that is not enough to keep the roots from rotting.</p>
<p>I could remix the medium for next season, as I am now the proud owner of four
cubic feet of vermiculite.  However, that would mean that I throw away an
entire season's worth of soil development.  The growing medium is now full of
roots and fungi and life, and is covered by a thick mold-crusted layer of straw
mulch and fallen cannabis.</p>
<p>On the other hand, leaving the totes as is risks next season's plants meeting
the same fate.  I have all Autumn and Winter to think it over.</p>
<p>In the mean time, the third plant has been surviving indoors.  It's a Durban
Poison, and sure stinks up the place.</p>
<p><img src="indoor_small.webp" alt="indoor plant" /></p>


        </body>
    </html></div></content></entry><entry><title>Cannabis: The Final Frontier</title><link href="https://www.davidgoffredo.com/cannabis-5/cannabis-5.html" /><id>https://www.davidgoffredo.com/cannabis-5/cannabis-5.html</id><updated>2022-05-28</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/cannabis-5/cannabis-5.html" />
        </head>
        <body>
            <h1>Cannabis: The Final Frontier</h1>
<p>I grew some plants.  Third time's the charm.</p>
<h2>Seedlings</h2>
<p>They began, as we all do, as little spindly nubs.</p>
<p><img src="taproot_small.webp" alt="taproot" /></p>
<p><img src="before-planting_small.webp" alt="before planting" /></p>
<p><img src="solo-cups_small.webp" alt="solo cups" /></p>
<p><img src="seedlings_small.webp" alt="seedlings" /></p>
<p>That third one is a runt that didn't make it.  It grew, but slowly, and its leaves were distorted and small.</p>
<p>The laboratory includes a humidifier, webcam, and digital thermometer/hygrometer.</p>
<p><img src="laboratory_small.webp" alt="laboratory" /></p>
<p><img src="hygrometer_small.webp" alt="hygrometer" /></p>
<h2>Vegetative Stage</h2>
<p>After discarding the runt, I potted up the survivors and added another humidifier.</p>
<p><img src="survivors_small.webp" alt="survivors" /></p>
<p><img src="more-humidity_small.webp" alt="humidifiers" /></p>
<p>Soon, though, the plants began to ail.  They drooped and began to yellow and shrivel.</p>
<p>It could have been any number of things:</p>
<ul>
<li>My dad said that cypress mulch can harm plants.</li>
<li>The potting mix I was using probably did not contain many nutrients and I was likely under-feeding.</li>
<li>The drainage might not have been right in those pots.</li>
</ul>
<p><img src="ailing_small.webp" alt="ailing plants" /></p>
<p><img src="ailing-more_small.webp" alt="sick plant" /></p>
<p>Reasoning that the problem had something to do with the container geometry or its contents, I "potted on" into larger containers with fresh mix.</p>
<p>My grow space lacks height, and I've read that cannabis roots like to stretch out laterally.  So, I found this tub in the local hardware store, drilled some holes in the bottom, and placed it suspended on a rack above a baking sheet.</p>
<p><img src="new-container_small.webp" alt="new container" /></p>
<p><img src="before-replant_small.webp" alt="before replant" /></p>
<p><img src="after-replant_small.webp" alt="after replant" /></p>
<p><img src="with-mulch_small.webp" alt="with mulch" /></p>
<p>This time I used sexy bark mulch.</p>
<p>The other plant I potted up to a larger conventional pot, though after a while I ended up putting it in a tub too.</p>
<p><img src="before-replant-2_small.webp" alt="before replant" /></p>
<p><img src="after-replant-2_small.webp" alt="after replant" /></p>
<p><img src="lab-with-new-pots_small.webp" alt="repotted plants in laboratory" /></p>
<p>The plants were much happier in these new containers.</p>
<p>As you can see, they're starting to get close to the lights, so it was time to train the plants by tying them down.</p>
<p><img src="before-training_small.webp" alt="before training" /></p>
<p><img src="after-training_small.webp" alt="after training" /></p>
<p><img src="before-training-2_small.webp" alt="before training" /></p>
<p><img src="after-training-2_small.webp" alt="after training" /></p>
<p>After adjusting to their bondage, the plants looked as healthy as I've ever kept.</p>
<p><img src="happy_small.webp" alt="happy" /></p>
<p><img src="happy-2_small.webp" alt="happy" /></p>
<p><img src="happy-humid_small.webp" alt="happy lab" /></p>
<p><img src="happy-lab_small.webp" alt="happy lab" /></p>
<h2>Flowering Stage</h2>
<p>In late February I switched the light schedule from 18 hours on down to 12 hours on.  This signals to the plants that Winter is coming and that they should begin producing flowers to reproduce.  Except that they won't reproduce.  I will smoke them instead.</p>
<p>In March I visited Paris for a week for work.  In that time, Pasha kept the plants alive.</p>
<p><img src="paris_small.webp" alt="paris" /></p>
<p>When I returned, I was greeted by very happy flowering plants.</p>
<p><img src="after-paris_small.webp" alt="after paris" /></p>
<p><img src="nyc-diesel_small.webp" alt="NYC Diesel" /></p>
<p><img src="blackberry-kush_small.webp" alt="Blackberry Kush" /></p>
<p><img src="nyc-diesel-closeup_small.webp" alt="NYC Diesel closeup" /></p>
<p><img src="blackberry-kush-closeup_small.webp" alt="Blackberry Kush closeup" /></p>
<p>How do you know when a plant is done and ready for harvest?  Opinions differ online, but what I gather is the following:</p>
<ul>
<li>Resin sacks on the flowers called "trichomes" will progress from clear to cloudy to amber.  When a desired percentage of trichomes are amber, it's time.</li>
<li>The plant will naturally begin to "fade" towards the end of its life.  When the plant begins to sag and turn to Autumn colors, it's nearly time.</li>
</ul>
<p>Trichomes are difficult to see with the naked eye.  Growers use a jeweler's magnifying glass, called a "jeweler's loupe," to inspect the trichomes.</p>
<p>Here are the plants well into flowering, but a while before harvest:</p>
<p><img src="flowering-1_small.webp" alt="flowering" /></p>
<p><img src="flowering-2_small.webp" alt="flowering" /></p>
<p><img src="flowering-3_small.webp" alt="flowering" /></p>
<p><img src="loupe-1_small.webp" alt="loupe" /></p>
<p><img src="loupe-2_small.webp" alt="loupe" /></p>
<p>Taking a phone picture with the loupe works better than I expected, but I still haven't gotten the hang of it.</p>
<h2>Harvest</h2>
<p>In May I returned to Paris for work.  Beforehand, though, I harvested the plants so that nobody else would have to care for them so close to the end.  It was close enough, I think.</p>
<p><img src="before-chop_small.webp" alt="before harvest" /></p>
<p><img src="bud-1_small.webp" alt="bud" /></p>
<p><img src="bud-2_small.webp" alt="bud" /></p>
<p><img src="during-chop_small.webp" alt="during chop" /></p>
<p>I snapped off the branches one at a time and roughly trimmed off the leaves using special trimming scissors.  I'll do another trimming after the flowers have dried.  For now I'm just removing most of the vegetation.</p>
<p><img src="bud-3_small.webp" alt="bud" /></p>
<p><img src="after-chop_small.webp" alt="after chop" /></p>
<p><img src="half-harvest_small.webp" alt="half harvest" /></p>
<p>That's most of the first plant.  Paper bags in the refrigerator?  I'll explain later.</p>
<p>The following morning I harvested the other plant.</p>
<p><img src="chop-setup_small.webp" alt="second plant" /></p>
<p><img src="before-chop-2_small.webp" alt="before chop" /></p>
<p><img src="full-harvest_small.webp" alt="full harvest" /></p>
<p>I'll weigh the harvest after it's dry.  Later that afternoon I departed once again to Paris.</p>
<p><img src="paris-2_small.webp" alt="paris again" /></p>
<h2>Drying and Curing</h2>
<p>This is my first time attempting to properly dry a harvest of weed, and I've chosen an unorthodox and possibly risky method.</p>
<p>The reason is that I was going away for a week right after harvesting, so I sought a "hands off" method that would dry the buds slowly while I was gone.</p>
<p>Usually what people do is hang the branches (or the entire plant) upside-down
for a week or two in a temperature and humidity controlled environment with
some airflow until the branches snap without bending.  Then the buds go
into jars that are periodically opened ("burped") until the desired
relative humidity is reached inside.</p>
<p>It's getting humid and warm in New York these days, so while the standard
method probably would have worked fine, I sought an alternative.</p>
<p>Some people (i.e. at least two people on the internet) dry their weed in the
refrigerator.  The idea is that the fridge is a self-cooling and dehumidifying
cave of sorts.  To regulate the humidity in the immediate environment of the
weed, you put the buds in paper bags and stick them in the fridge.  Then you
regularly give them a shake, and less regularly put a sample into a jar with a
hygrometer to see how the dry is coming along.</p>
<p>Others on the internet have told me that this is foolishness and that all of
the weed will smell like refrigerator.</p>
<p>Well, it's now been two weeks, and "refrigerator smell" has not been an issue.
However, the weed is not drying quickly enough.  I put some buds in a jar on
the counter for several hours the other day, and the humidity settled at 99%.
There was condensation on the inside of the jar.</p>
<p>Granted, everything happens more slowly at 34°F, but I'm concerned about mold
developing.</p>
<p>I'll keep giving the bags a shake and take a jar sample again in a few days.
If they haven't begun to dry more by then I'll consider putting them on racks
outside of the fridge to dry instead.</p>
<p>I bought a six pack of those giant Ball jars, and I'm wondering if that will be
enough.  Assuming the buds don't mold into the world's most expensive compost
pile addition, I'll weigh them once they're curing.</p>


        </body>
    </html></div></content></entry><entry><title>Worm Update</title><link href="https://www.davidgoffredo.com/worms-2/worms-2.html" /><id>https://www.davidgoffredo.com/worms-2/worms-2.html</id><updated>2022-04-30</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/worms-2/worms-2.html" />
        </head>
        <body>
            <h1>Worm Update</h1>
<p>The <a href="../worms/worms.html">worms</a> are still alive and pooping.  They have pooped a lot.</p>
<p><img src="hold-castings-with-worms_small.webp" alt="holding castings with worms" /></p>
<p>It's been tricky to get all of the variables right, but I think I'm getting the
hang of it:</p>
<ul>
<li>Add twice as much bedding as food.</li>
<li>Don't add food until they've eaten the previous food.</li>
<li>Saturate the bedding with water when you add it, but don't add water
directly.</li>
</ul>
<p>Mostly I feed them used coffee grounds.  Sometimes I add vegetable scraps.</p>
<p>Here's the system.</p>
<p>Three buckets.  The top one has a lid with holes, and holes in the bottom.</p>
<p><img src="bin_small.webp" alt="worm bin" /></p>
<p><img src="lidless-bin_small.webp" alt="worm bin without lid" /></p>
<p><img src="open-bin_small.webp" alt="worm bin uncovered" /></p>
<p><img src="dig-bin_small.webp" alt="digging into the bin" /></p>
<p>The worms mostly live in there.  Previously, they lived in the bucket below.
The idea is that the worms will wiggle up to the top bucket (through the holes
in the bottom) in search of food.</p>
<p>That's <em>mostly</em> happened, but I still see a lot of worms in the lower (middle)
bucket.</p>
<p><img src="lift-top-bucket_small.webp" alt="lifting the top bucket" /></p>
<p><img src="middle-bucket_small.webp" alt="middle bucket contents" /></p>
<p>The middle bucket is now filled with castings, and some worms.  There are holes
in the bottom of the middle bucket, allowing excess moisture to drain into the
bottom bucket.  There's also a mesh screen to prevent worms from wandering off.</p>
<p>The castings resemble crumbly, lumpy topsoil.  There's a shimmer of vermiculite
left from the potting mix they were originally living in.</p>
<p><img src="hold-castings-with-worms_small.webp" alt="castings with worms" /></p>
<p><img src="hold-castings-with-worms-2_small.webp" alt="castings with worms closer" /></p>
<p><img src="hold-castings_small.webp" alt="castings" /></p>
<p>I'll use this in place of, or to supplement, compost in my soil mixes.</p>
<p>It's been about six months since I got the worms, so they haven't pooped
as much as I expected.  I've probably been underfeeding them.</p>
<p>Their bedding is paper bags that I've shredded by hand with scissors.  Come
sit-on-the-couch-and-watch-youtube time, I grab some brown bags and shred
them into this plastic bag.</p>
<p><img src="bedding-bag_small.webp" alt="bag of shredded paper" /></p>
<p><img src="bedding_small.webp" alt="shredded paper" /></p>
<p>That's about all there is to it.</p>
<p>Soon I'll be mixing a large batch of soil for my planned rooftop garden.  Most
of the castings in the middle bucket (worms and all) will go into that soil.
Then I'll dump the contents of the top bucket into the middle, and place the
lid on the middle bucket.  Back to square one for another batch.</p>
<p>Wiggle on.</p>


        </body>
    </html></div></content></entry><entry><title>Anonymous Recursion</title><link href="https://www.davidgoffredo.com/anonymous-recursion/anonymous-recursion.html" /><id>https://www.davidgoffredo.com/anonymous-recursion/anonymous-recursion.html</id><updated>2022-01-30</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/anonymous-recursion/anonymous-recursion.html" />
        </head>
        <body>
            <h1>Anonymous Recursion</h1>
<p>I've been reading <em><a href="https://lccn.loc.gov/77011962">Denotational Semantics</a></em>, a textbook describing a theory
of programming languages.  It was recommended to me years ago by a
colleague.  He said something along the lines of "this book taught me
everything I know about programming."  He seemed to know a lot about
programming.</p>
<p>The first few sections introduce a formula rewriting system known as the
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</a>, which was familiar to me due to my previous dabbling with
<a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</a>, a programming language invented to study the lambda calculus.</p>
<p>In particular, one of the ideas introduced in the lambda calculus section of
<em>Denotational Semantics</em> is illustrated differently in another book I read,
<em><a href="https://lccn.loc.gov/95039853">The Little Schemer</a></em>.  The idea is how an anonymous procedure can
nonetheless refer to itself by name.</p>
<p>This post is my attempt to explain that idea.</p>
<h2>Scheme</h2>
<p>Instead of using the lambda calculus, I'll use Scheme.  I like Scheme.</p>
<p>Here's the definition of a procedure:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name"><span class="hljs-builtin-name">define</span></span> collatz-end
  (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
    (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
      [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
      [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) (<span class="hljs-name">collatz-end</span> (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
      [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">collatz-end</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
</code></pre>
<p>Here <code>n</code> is any nonzero <a href="https://en.wikipedia.org/wiki/Natural_number">natural number</a>, so <code>n</code> could be any of 1, 2, 3, 4, ...,
44989933, etc., but not -4, and not 0.</p>
<p>The procedure <code>collatz-end</code> is equivalent to the following procedure, provided
that the <a href="https://en.wikipedia.org/wiki/Collatz_conjecture">Collatz conjecture</a> is true:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) <span class="hljs-number">1</span>)
</code></pre>
<p>The Collatz conjecture is almost certainly true, but it might be impossible to
prove.</p>
<p>Anyway, in Scheme, <code>(λ (x) Expr)</code> is a procedure of one parameter, <code>x</code>, that
evaluates to whatever <code>Expr</code> would be if <code>x</code>s within it were substituted for
whatever we supplied for <code>x</code>.</p>
<p>For example, <code>(λ (x) (+ 3 x))</code>, when applied to <code>7</code>, is <code>(+ 3 7)</code>, which is
<code>10</code>.  The expression that says "apply <code>(λ (x) (+ 3 x))</code> to <code>7</code>" is the
procedure and its argument next to each other in parentheses.  So,
<code>((λ (x) (+ 3 x)) 7)</code> is <code>(+ 3 7)</code> is <code>10</code>.</p>
<p>It's a bit trickier than that, though, because the body of the <code>λ</code> could
contain other <code>λ</code>s, and those might introduce a parameter called <code>x</code>, too.  In
that case, the inner <code>x</code> is really a different <code>x</code> from our <code>x</code>, and so we'd
have to rename one of them to accommodate the other.  Let's not worry about
that here.</p>
<p><code>cond</code> is a shorthand for nested <code>if</code> expressions.  An <code>if</code> expression has
the form</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name"><span class="hljs-builtin-name">if</span></span> Predicate Consequent Alternative)
</code></pre>
<p>Each of <code>Predicate</code>, <code>Consequent</code>, and <code>Alternative</code> is an arbitrary expression.
If the result of evaluating <code>Predicate</code> is <em>not falsy</em> (I won't bother
describing falsiness in Scheme), then the value of the <code>if</code> expression is the
result of evaluating <code>Consequent</code>.  In that case, <code>Alternative</code> is not evaluated.
On the other hand, if the result of evaluating <code>Predicate</code> <em>is falsy</em>, then
the value of the <code>if</code> expression is the result of evaluating <code>Alternative</code>.  In that
case, <code>Consequent</code> is not evaluated.</p>
<p><code>cond</code>, then, is just a macro that nests its <code>[Predicate Consequent]</code> arguments.
I'll define it here using <a href="http://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-13.html#node_sec_12.8">syntax-rules</a>:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name"><span class="hljs-builtin-name">define-syntax</span></span> cond
  (<span class="hljs-name"><span class="hljs-builtin-name">syntax-rules</span></span> (<span class="hljs-name"><span class="hljs-builtin-name">else</span></span>)
    [(<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>)
     (<span class="hljs-name">raise-user-error</span> <span class="hljs-string">"Unmatched cond alternative"</span>)]

    [(<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span> [<span class="hljs-name"><span class="hljs-builtin-name">else</span></span> expr])
     expr]

    [(<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span> [<span class="hljs-name">predicate</span> expr] rest ...)
     (<span class="hljs-name"><span class="hljs-builtin-name">if</span></span> predicate expr (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span> rest ...))]))
</code></pre>
<p>Note that square brackets (<code>[]</code>) and parentheses (<code>()</code>) have the same meaning,
and are varied as a matter of style.</p>
<p>Now let's look at the definition of <code>collatz-end</code> again:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name"><span class="hljs-builtin-name">define</span></span> collatz-end
  (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
    (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
      [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
      [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) (<span class="hljs-name">collatz-end</span> (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
      [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">collatz-end</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
</code></pre>
<p>If <code>n</code> is <code>1</code>, then we finish at <code>1</code>.  If instead <code>n</code> is any even number, then
we divide <code>n</code> in half and see what <code>collatz-end</code> gives for that number.  So,
<code>collatz-end</code> is defined in terms of itself.  If <code>n</code> is an odd number, then we
take triple <code>n</code> and add <code>1</code>, and see what <code>collatz-end</code> gives for that number.</p>
<p>It's not at all obvious that this procedure always evaluates to <code>1</code>, but the
smart money says it does.</p>
<h2>Recursion</h2>
<p>I defined procedure application in terms of parameter rewriting, e.g.
<code>((λ (x) (+ 3 x)) 9)</code> means "use <code>9</code> instead of <code>x</code> in the body of the <code>λ</code>",
i.e.  <code>(+ 3 9)</code>, which is <code>12</code>.</p>
<p>Then what is <code>define</code>?</p>
<p><code>define</code> introduces a name (<code>collatz-end</code>), and then associates a value with
that name (<code>(λ (n) (cond ...))</code>), <em>where the name is visible inside the
definition of the value.</em></p>
<p><code>define</code> is a facility provided by the execution environment.  We cannot
get that behavior using <code>λ</code>s only.  Or can we?</p>
<p>Consider this anonymous cousin of <code>collatz-end</code>:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>)
  (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
    (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
      [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
      [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
      [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
</code></pre>
<p>This is not the same as <code>collatz-end</code>.  Instead, it's one "step" in the
execution of <code>collatz-end</code>.  Give me a "next" procedure (<code>f</code>), and I'll give
you a procedure that takes an <code>n</code>, does one Collatz step on it, and then passes
the resulting number to <code>f</code>.</p>
<p>Observe how this entire expression is nearly what we want for <code>f</code>.</p>
<p>Here's another cousin:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>)
  (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
    (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
      [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
      [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
      [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
</code></pre>
<p>You are forgiven if your head is starting to hurt.  This is like the previous
example, except that now the <code>f</code> that we accept is a procedure that takes
a procedure and returns a procedure that takes a nonzero natural number.
That is, <code>f</code> is something that looks like the most recent example.</p>
<p>If we apply this procedure to itself, do we get <code>collatz-end</code>?</p>
<pre><code class="lang-scheme hljs">((<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span> [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>] [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))] [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
 (<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span> [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>] [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))] [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))]))))
</code></pre>
<p>This evaluates to a procedure that takes a nonzero natural number, and ...</p>
<p>does the same thing that <code>collatz-end</code> does.</p>
<p>Whether an execution environment will demonstrate this fact depends on the
evaluation order used in the execution.  Thanks to the "short-circuit"
evaluation property of <code>if</code>, which underlies our <code>cond</code>, this procedure really
is the same as <code>collatz-end</code>.</p>
<h2>Combinators</h2>
<p>The self-applicative monstrosity above is not yet satisfactory, though.  Let's
look at the original procedure again:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name"><span class="hljs-builtin-name">define</span></span> collatz-end
  (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
    (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
      [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
      [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) (<span class="hljs-name">collatz-end</span> (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
      [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">collatz-end</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
</code></pre>
<p>This entire snippet of code is the same no matter which name we choose for
<code>collatz-end</code>, as long as our choice is not already taken
(<code>λ</code>, <code>cond</code>, <code>even?</code>, ...).</p>
<p>So, <code>collatz-end</code> is reasonably thought of as a parameter.  Let's call it <code>f</code>.</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>)
  (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
    (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
      [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
      [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
      [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
</code></pre>
<p>We're now back to where we were at the beginning of the previous section.  This
procedure is <em>not</em> <code>collatz-end</code>, but it's the natural non-recursive analog to
<code>collatz-end</code>.  Let's call this procedure <code>E</code>.</p>
<p>Can we define a procedure that, given <code>E</code>, returns <code>collatz-end</code>?</p>
<p>Earlier, we modified <code>E</code>, replacing appearances of <code>f</code> with <code>(f f)</code>.  This
allowed us to describe <code>collatz-end</code> as the modified procedure applied to
itself.</p>
<p>It would be nicer if such modification weren't necessary.  Maybe there is a
way to encode that transformation in the operation that takes this anonymous
procedure and gives us <code>collatz-end</code>.</p>
<p>Well, we have a procedure that looks like this:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) ...))
</code></pre>
<p>where the <code>...</code> uses <code>f</code> as a procedure taking a natural number, i.e. some
<code>(λ (n) ...)</code>.  We want that inner <code>f</code> to be based on the overall procedure.</p>
<p>Consider this procedure:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) ((<span class="hljs-name">f</span> f) n)))
</code></pre>
<p>This is an attempt to encapsulate the transformation we performed in the
previous section; namely, to take a procedure that returns a Collatz-like
procedure, and transform it into a Collatz-like procedure whose inner "next"
procedure is the original procedure applied to itself.</p>
<p>It's hard to say in English.</p>
<p>Let's call this procedure <code>Sb</code>, for "antimony."  No, "self-bind."</p>
<p>Then, we can combine <code>E</code> and <code>Sb</code> to produce an anonymous procedure that might
get us closer to <code>collatz-end</code>:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">E</span> (<span class="hljs-name">Sb</span> E))
</code></pre>
<p>Remember that <code>E</code> is</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>)
  (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
    (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
      [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
      [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
      [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
</code></pre>
<p>So, we're looking at (expanding <code>E</code> and <code>Sb</code>)</p>
<pre><code class="lang-scheme hljs">((<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span> [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>] [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))] [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
 ((<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) ((<span class="hljs-name">f</span> f) n)))
  (<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span> [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>] [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))] [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))))
</code></pre>
<p>Is this <code>collatz-end</code>?</p>
<p>Not quite.  I made a mistake.  Close, but no cigar.  Look at <code>(E (Sb E))</code>
again, expanding only <code>Sb</code>:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">E</span>
  ((<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) ((<span class="hljs-name">f</span> f) n))) E))
</code></pre>
<p>That is</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">E</span> (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>) (<span class="hljs-name">E</span> E) n))
</code></pre>
<p>That <code>λ (n) ...</code> is passing <code>E</code> as the <code>f</code> argument to <code>E</code>.  But <code>E</code> and <code>f</code>
have incompatible types!</p>
<p>This construction "<code>(E (Sb E))</code>" only works "one layer deep," and then becomes
invalid.</p>
<p>The thing that we pass as the <code>f</code> argument to <code>E</code> can't be <code>E</code> itself, it has
to be the thing we transformed <code>E</code> into.</p>
<p>Mind bender!</p>
<p>Alright, let's go back to the thing that works, but is not ideal:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>)
  (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
    (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
      [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
      [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
      [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
</code></pre>
<p>Remember that this thing applied to itself is <code>collatz-end</code>.  We need to get
that inner <code>(f f)</code> working for us without having it in there.</p>
<p>Here's a transformation to consider:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">f</span> f))
</code></pre>
<p>Well, we want to double up the <code>f</code>s and then pass that to <code>E</code>, so</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">E</span> (<span class="hljs-name">f</span> f)))
</code></pre>
<p>Let's expand <code>E</code> in that.  Do we get the same thing as "the thing that works,"
above?</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">E</span> (<span class="hljs-name">f</span> f)))
</code></pre>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>)
  ((<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>)
     (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
       (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
         [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
         [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
         [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
    (<span class="hljs-name">f</span> f)))
</code></pre>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>)
  (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
    (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
      [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
      [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
      [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) ((<span class="hljs-name">f</span> f) (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))])))
</code></pre>
<p>Yes, we do.</p>
<p>Ok, so the operation <code>(λ (f) (E (f f)))</code> is the secret sauce.  That gives us
something that we can apply to itself, giving us <code>collatz-end</code>.</p>
<p>That is, <code>collatz-end</code> is the same as:</p>
<pre><code class="lang-scheme hljs">((<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">E</span> (<span class="hljs-name">f</span> f))) (<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">E</span> (<span class="hljs-name">f</span> f))))
</code></pre>
<p>A nicer way to look at it is to consider this operation as a procedure applied
to <code>E</code>.  Let's call the procedure <code>R</code> for "recursive."</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name"><span class="hljs-builtin-name">define</span></span> R
  (<span class="hljs-name">λ</span> (<span class="hljs-name">E</span>) ((<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">E</span> (<span class="hljs-name">f</span> f))) (<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>) (<span class="hljs-name">E</span> (<span class="hljs-name">f</span> f))))))
</code></pre>
<p>Note how now <code>E</code> is a parameter.</p>
<p>Then <code>collatz-end</code> is the same as</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name">R</span>
  (<span class="hljs-name">λ</span> (<span class="hljs-name">f</span>)
    (<span class="hljs-name">λ</span> (<span class="hljs-name">n</span>)
      (<span class="hljs-name"><span class="hljs-builtin-name">cond</span></span>
        [(<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>]
        [(<span class="hljs-name"><span class="hljs-builtin-name">even?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">/</span></span> n <span class="hljs-number">2</span>))]
        [(<span class="hljs-name"><span class="hljs-builtin-name">odd?</span></span> n) (<span class="hljs-name">f</span> (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-builtin-name">*</span></span> <span class="hljs-number">3</span> n)))]))))
</code></pre>
<p>A <a href="https://en.wikipedia.org/wiki/Combinatory_logic">combinator</a> is a procedure within which every variable has a matching <code>λ</code>.</p>
<p><code>R</code> is a combinator.  <code>E</code> and <code>collatz-end</code> are not, because they depend on the
"free" variables <code>collatz-end</code>, <code>even?</code>, <code>=</code>, etc.</p>
<p><code>R</code> is a particularly famous procedure known as the <a href="https://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator">Y combinator</a>.</p>
<h2>Conclusion</h2>
<p>Fun stuff, right?  Don't forget to floss your teeth, pay your taxes, take off
your shoes, and be well!</p>


        </body>
    </html></div></content></entry><entry><title>Cannabis Cookies</title><link href="https://www.davidgoffredo.com/cookies/cookies.html" /><id>https://www.davidgoffredo.com/cookies/cookies.html</id><updated>2021-12-21</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/cookies/cookies.html" />
        </head>
        <body>
            <h1>Cannabis Cookies</h1>
<p><img src="done_small.webp" alt="finished cookies" /></p>
<p>I made weed cookies.  They're devastating.</p>
<p><a href="jar.jpg"><img alt="decarboxylated cannabis in jar" src="jar.webp" /></a></p>
<p>The basic idea is to dissolve weed's active ingredients into butter, and then
use the butter to bake cookies.</p>
<p>But first, you have to turn this:</p>
<p><img src="thca.svg" alt="THCA molecule" /></p>
<p>into this:</p>
<p><img src="thc.svg" alt="THC molecule" /></p>
<p>The first molecule (<a href="https://en.wikipedia.org/wiki/Tetrahydrocannabinolic_acid">tetrahydrocannabinolic acid</a>) won't blow your mind, but
the second molecule (<a href="https://en.wikipedia.org/wiki/Tetrahydrocannabinol">tetrahydrocannabinol</a>) might.  You can convert the
first into the second by removing the <code>COOH</code> group attached to the rightmost
ring.  It's called <a href="https://en.wikipedia.org/wiki/Decarboxylation">decarboxylation</a>, and will happen eventually given some
heat.</p>
<p>When you smoke weed, the <em>fire</em> supplies the heat for the reaction, but these
cookies will not be on fire, so we have to do something else.</p>
<figure>
  <img src="decarboxylation_small.webp" alt="graph of decarboxylation process" />
  <figcaption>THCA (A) and THC (B) concentrations over time with heating (<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5549281/">source</a>)</figcaption>
</figure><p>I went digging through my plastic bag of stems and whatever else was left over
from harvest, picked off what flower material I could, ground it up in an herb
grinder, and put it into a mason jar.</p>
<p>You can do this in the oven, but I prefer an odorless, zero-oversight,
overnight approach.  So, I filled my slow cooker with water.  After sealing the
jar tight, I placed it on its side in the water.  Then I turned the slow cooker
on "high" and went about my business.  When later I saw that the water was
nearly simmering, I turned the setting down to "low" and went to bed.</p>
<p>The next day, I used some tongs to pick the hot jar out of the slow cooker, and
set it on the counter to cool.  After a while, I opened it for a sniff.  Smells
like oregano, or something that'd be in a tomato sauce.  It was surprisingly
pleasant and un-dank.</p>
<p><img src="butter_small.webp" alt="butter" /></p>
<p>Ok, butter.  But first, we need a cookie recipe.</p>
<p>Google brought me to reddit, and reddit brought me to this <a href="https://www.reddit.com/r/FoodPorn/comments/7k84bc/its_taken_a_ton_of_testing_to_get_here_but_these">2017 recipe</a>,
which is hailed "reddit's best cookie recipe."</p>
<p>Here are the ingredients:</p>
<ul>
<li>2 cups + 2 tablespoons all purpose flour</li>
<li>1 teaspoon baking soda</li>
<li>2 teaspoons cornstarch</li>
<li>1 teaspoon salt</li>
<li>1 ½ sticks (6 oz) unsalted butter, melted and cooled</li>
<li>1 cup dark brown sugar, lightly packed</li>
<li>½ cup granulated sugar</li>
<li>2 large eggs</li>
<li>2 teaspoons vanilla extract</li>
<li>1 1/2 cups dark chocolate chips, plus more for topping</li>
</ul>
<p>I followed the recipe exactly, except that I first modified the butter to make
it adult-only.</p>
<p><img src="butter-with-weed_small.webp" alt="butter with cannabis before stirring" /></p>
<p>I stirred the ground cannabis into the melted butter, and let it just barely
simmer, covered, for like an hour.  I read multiple recipes for "cannabutter"
online, and their cook times varied from a couple hours to a couple days.
Longer is probably better, but on the other hand:</p>
<ul>
<li>The weed was already thoroughly decarboxylated (probably).</li>
<li>THC evaporates at 311°F, which is below the smoke point of butter.</li>
</ul>
<figure>
  <img src="cannabutter-1_small.webp" alt="butter with cannabis after stirring" />
  <figcaption>butter right after having the cannabis stirred into it</figcaption>
</figure><figure>
  <img src="cannabutter-2_small.webp" alt="cannabutter cooking" />
  <figcaption>cannabutter after a little cooking</figcaption>
</figure><figure>
  <img src="cannabutter-3_small.webp" alt="cannabutter cooked" />
  <figcaption>cannabutter after an hour of cooking</figcaption>
</figure><p>Once the cannabutter was done cooking, I used a cheesecloth to separate the
butter from the herb.</p>
<p><img src="cheesecloth_small.webp" alt="strainer before use" /></p>
<p><img src="strained_small.webp" alt="strainer after use" /></p>
<p>Now it's time to make cookies.  I added the sugars to the hot butter and
stirred until they dissolved as much as they would.  This also cooled the
butter down to near room temperature.</p>
<p><img src="sugars_small.webp" alt="sugars" /></p>
<p>It looked like there wasn't enough moisture, but after mixing in two eggs, the
salt, and the vanilla extract, the wet side was wet.</p>
<p><img src="wet_small.webp" alt="wet" /></p>
<p>Then I gradually stirred in the dry ingredients until I had a dough.  Then I
folded in the chocolate chips and was ready to start shaping cookies.</p>
<p><img src="dough_small.webp" alt="dough" /></p>
<p>Each cookie is a ¼ cup scoop of dough rolled into a ball and then squished
slightly onto the baking pan.</p>
<p>I preheated the oven to 350°F and baked the cookies for 12 minutes, et voilà!</p>
<p><img src="done_small.webp" alt="finished cookies" /></p>
<p>Suggested serving size: ¼ cookie.</p>


        </body>
    </html></div></content></entry><entry><title>Cannabis (Someday)</title><link href="https://www.davidgoffredo.com/cannabis-4/cannabis-4.html" /><id>https://www.davidgoffredo.com/cannabis-4/cannabis-4.html</id><updated>2021-12-18</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/cannabis-4/cannabis-4.html" />
        </head>
        <body>
            <h1>Cannabis (Someday)</h1>
<p><img src="thriving_small.webp" alt="thriving" /></p>
<p><img src="ailing_small.webp" alt="ailing" /></p>
<p><img src="dead_small.webp" alt="dead" /></p>
<p>There is no God.</p>
<p><img src="scale_small.webp" alt="scale" /></p>
<p><img src="jars_small.webp" alt="jars" /></p>
<p>Four months resulting in three jars.  It could all fit into one jar, but I want
to keep the strains separate.</p>
<p>The most promising product is from the NYC Diesel plants.  It smells vaguely of
lemon gasoline and will catapult your mind into diamond-grinding rumination.
It will also give you bronchitis, because it was harvested prematurely, dried
too quickly, and has not yet cured.  It will probably never cure.</p>
<p>The other stuff smells like hay.  Maybe I'll bake cookies with it.</p>
<p>Relative humidity is a funny thing.  Actually it's not funny at all.  Nothing
is funny.  Life is pain.</p>
<p><img src="pots_small.webp" alt="the start" /></p>
<p>Since our <a href="../cannabis-3">last installment</a>, I re-potted each plant into its own small
container.  The Grape Ape plants (left) took to their new homes immediately,
springing back to life with a growth spurt.  The $100 O.G. plants (center) took
longer to acclimate but also eventually thrived.  The NYC Diesel plants (right)
looked like they were going to stay lanky and spent, but after a few doses of
nutrients by soil and by spray, they too perked up.</p>
<p><img src="pots-peppers_small.webp" alt="better" /></p>
<p>I planted some spicy peppers in solo cups, to make better use of the lights.
They all died.</p>
<p><img src="untied_small.webp" alt="untied" /></p>
<p><img src="tied_small.webp" alt="tied" /></p>
<p>After a while, the plants had grown taller and largely healthy.  They had been
receiving eighteen hours of artificial light per day, followed by six hours of
darkness.  Kept this way, the plants will continue to grow indefinitely,
without ever trying to reproduce.</p>
<p>The stuff that gets you high occurs with the highest concentration in sticky
resins secreted by the female sex organs in their fruitless attempt to capture
pollen.</p>
<p>Cannabis has been selectively bred by humans to produce "flowers" that are:</p>
<ul>
<li>unnaturally large</li>
<li>unnaturally sticky</li>
<li>unnaturally psychoactive</li>
</ul>
<p>It's all very unnatural.  But organic!  It's not a big truck.</p>
<p>Outdoors, cannabis will switch into reproductive mode ("flowering") when there
is less than thirteen hours of sunlight each day.</p>
<p>Indoors, we change the timer on our lights to be on for twelve hours and off
for twelve hours.  The plants don't know the difference, they're so stupid.</p>
<p>Cannabis doesn't survive Winter, so the shortening photoperiod tips off the
plant to its impending death, which it copes with by ramping up cannabinoid
production as a side effect of attempting to reproduce.  Bless them.</p>
<p>Before the plants go full on and get really into sex mode, you have to bend
them over and tie them down.</p>
<p><img src="big-untied_small.webp" alt="big untied" /></p>
<p><img src="big-tied_small.webp" alt="big tied" /></p>
<p>The change in photoperiod sets off a hormonal change in the plant that will
eventually cause it to focus most of its energy on sex organ enlargement.
However, the first phase of that hormonal change instead stimulates the plant
to suddenly grow taller.  The plant can roughly double in height over the first
week or two of the reduced photoperiod.  This is called "the stretch."</p>
<p>My guess is that if you reproduce by catching sperm in the wind in a forest,
your chances are improved if you're above the brush.</p>
<p>What it means for indoor growers is that you're going to run out of room, or
your lights are going to burn your plants, or whatever.</p>
<p>So we tie those girls down.  As close to ninety degrees as you can manage,
which is nerve-racking, but doable.</p>
<p>Cannabis plants are <a href="https://en.wikipedia.org/wiki/Apical_dominance">apical dominant</a>, which means that the highest point on
the plant undergoes the greatest growth.  What is the highest point on the
plant when you've bent it sideways?  The plant cannot decide, and so it
stimulates growth in all of the nodes fully exposed to light (until one becomes
dominant).</p>
<p>The point of plant bondage is to continually thwart apical dominance.  Every
time an eager branch breaks the mold, tie it down.  The result of a few weeks
of this so-called <a href="https://en.wikipedia.org/wiki/Cannabis_cultivation#LST'ing">low-stress training</a> is a shorter, bushier plant with
multiple bud sites that will one day grow into giant chunks of weed.  If you
don't train the plant, then you end up with one giant chunk of weed at the top,
and not much elsewhere.</p>
<p>In my case, I was going to run out of vertical space unless I trained the
plants.  So I tied them down against their wishes.</p>
<p><img src="flowers_small.webp" alt="flowers" /></p>
<p>After a few weeks of reduced photoperiod, I saw flowers beginning to develop.</p>
<p><img src="diesel-pepper_small.webp" alt="flower with pepper" /></p>
<p>Those white "hairs" grow long and then fill in at the base with sticky, spongy
flower tissue.  Then the hairs turn reddish brown and curl flat onto the
flower.  The result is weed.</p>
<p><img src="maturing_small.webp" alt="maturing" /></p>
<p>I can't show you what ready-to-harvest weed looks like, because around when
that picture was taken, the plants began to ail.  It's natural for cannabis to
shed leaves and show autumn colors towards the end of their flowering
period, but these plants were aging too soon, and without having put on any
weight of flower.</p>
<p>Then I left the plants for a week without water, and because I did not leave a
window cracked open, the building's steam heat cooked the plants to death and
dried them to a crisp right in their pots.</p>
<p><a href="temperature.png"><img src="temperature.webp" /></a></p>
<p>Problems began before then, though.  At one point, I discovered
<a href="https://en.wikipedia.org/wiki/Symphyla">symphylids</a> crawling through the soil of one of the Grape Ape plants.
Symphylids look like centipedes, but rather than preying on insects, they
eat the roots of cannabis plants, which then nearly always die.  After a
soil drench with permethrin, I didn't see them anymore.</p>
<p>When I disposed of the plant roots today, I noticed green pockets of what I
assume to be mold.</p>
<p>There was also the problem of low humidity.  Here's a picture of a hygrometer
in the grow space before I left for a week:</p>
<p><img src="conditions_small.webp" alt="conditions" /></p>
<p>88°F and 26% <a href="https://en.wikipedia.org/wiki/Humidity#Relative_humidity">relative humidity</a>.  That's an oven.  Flowering cannabis
plants like it somewhere in the 70s and 50% relative humidity.</p>
<p>The temperature problem can be alleviated with better air circulation, and the
humidity can be increased with a humidifier.  Then the problem is that the
increased airflow makes the humidifier ineffective.  The grow space would
start at around 30% relative humidity.  Then I would have a humidifier billow
clouds of water droplets into the air for twenty-four hours.  The grow space
would end up at around 30% relative humidity.</p>
<p>I might be able to solve both the heat problem and the low humidity problem
with something called a <a href="https://en.wikipedia.org/wiki/Evaporative_cooler">swamp cooler</a>, but really I think that the
underlying problem is the location of the grow space.  It's at the top of a
high ceiling in the back of an apartment with no ventilation, and is under
intense light.  Even before I had the grow setup, my bedroom could be ten
degrees warmer than my kitchen.  I would need yards of winding ductwork and a
powerful inline fan to move enough air to keep that space cool.  I might as
well run a snowblower in my bathroom.</p>
<p>Woe is me!</p>
<p>Though this crop was an exercise in waste and failure, it was not without its
lessons:</p>
<ul>
<li>Get your soil mix correct to begin with.</li>
<li>Start plants in small containers, and gradually up-size them as they grow.</li>
<li>Use pH-adjusted dechlorinated water.</li>
<li>Make sure there is adequate light.</li>
<li>Fertilize the plants periodically.  Some strains need more than others.</li>
<li>Don't leave your plants to die in a fucking oven.</li>
</ul>
<p>It's all about the roots.</p>
<p>While I mull over what to do about the temperature and humidity in the grow
space, I'll start some new seeds germinating.</p>
<p><img src="seeds_small.webp" alt="seeds in water" /></p>
<p>Better luck next time.</p>


        </body>
    </html></div></content></entry><entry><title>Vermicompost Is Worm Poop</title><link href="https://www.davidgoffredo.com/worms/worms.html" /><id>https://www.davidgoffredo.com/worms/worms.html</id><updated>2021-11-03</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/worms/worms.html" />
        </head>
        <body>
            <h1>Vermicompost Is Worm Poop</h1>
<p>My dad recently pointed out that we're all basically worms.</p>
<p>Niches have filled and tissues have specialized, but the overall body plan is
the same. Food goes in one hole, and comes out the other.  Fatty outer casing.
Bilateral symmetry.  Fun sexy bits.  Worms.</p>
<figure>
    <img src="wiggler.jpg" alt="worm" />
    <figcaption>This is you.</figcaption>
</figure><p>The body plan wouldn't work in two dimensions.  How could you connect the
inside parts to the outside parts without blocking either the mouth or the
anus?  Others have imagined a zipper-like mechanism where the flat animal is
zipped shut except for in cavities of food that propagate backwards.  I don't
know whether nature could produce such an organ.  I also don't know whether a
universe could exist in two dimensions.</p>
<p>Fortunately, we live in at least three dimensions, and the food that comes out
is called poop, except that when it comes out of a worm, it's called
"castings."  This is strange, because the "cast" left by the worm is the void
in the soil due to the worm's having eaten through it, not the resulting poop.
My guess is that it sounds better than "poop," and we can't call them
"droppings," can we?</p>
<h2>Compost</h2>
<p>I tried composting, it's harder than it sounds.</p>
<ol>
<li>Put organic stuff in a pile.</li>
<li>Keep the carbon to nitrogen ratio of the contents within certain bounds.</li>
<li>Keep the pile aerated so that aerobic bacteria proliferate instead of the
stinky stinky anaerobic bacteria.</li>
<li>Keep animals away from the pile.</li>
<li>Wait a long time.  If there's a lot of stuff, it'll heat up and go faster.</li>
</ol>
<p>(1) was a five gallon bucket on the roof.  (4) was a loosely fit lid on the
bucket.  (5) wasn't a problem because I wasn't in a hurry.</p>
<p>(2) and (3) are the hard parts.  I inoculated some used potting soil with over
ten pounds of spent malted barley from a batch of beer that I had brewed.
That's <em>way</em> too much nitrogen.  The bacteria went apeshit, liquefied the
organic mass, which then became compacted in the bucket, and so went anaerobic,
i.e. septic.</p>
<p>I took a peek under the lid about a month later, and there were mushrooms
sprouting from the surface.  There were also hundreds of flies, wriggling
maggots, and various crawling insects.</p>
<p>Yeah, I could have mixed in more shredded cardboard, and I could have stirred
the pile regularly to keep it aerated, but who could be bothered?  The roof is
far.</p>
<p>It's been a good while since then, so that now the compost has mostly
stabilized.  It smells like ammonia, and the pH is way too high.  Never again.</p>
<h2>Vermicompost</h2>
<p>I read an article online that said compost is for suckers.  <a href="https://en.wikipedia.org/wiki/Vermicompost">Vermicompost</a>
is where it's at.</p>
<p>The pitch goes like this.  Why wait months for the simplest known organisms to
microscopically chew away at your food scraps?  Instead, get something with a
real mouth to chew away at your food scraps, right now.</p>
<p>Think about it.  It takes your body a couple of days to turn food into brown
biomass.  Days, not months.  But your brown biomass is nasty.  Primates are
terrible.  A <a href="https://en.wikipedia.org/wiki/Eisenia_fetida">red wiggler worm</a>, on the other hand, puts out its entire body
weight in poop <em>every day</em>, and the resulting "castings" have no foul odor.</p>
<p>It's not just randos on the internet, either.</p>
<p>Here's one of the bottles of liquid fertilizer that I bought:</p>
<p><img src="bigbloom_small.webp" alt="Fox Farm Big Bloom fertilizer bottle" /></p>
<p>It's shouting right there on the bottle:</p>
<blockquote><p><strong>EARTHWORM CASTINGS</strong> &amp; BAT GUANO</p>
</blockquote>
<p>The company whose soil I'm using this season, Coast of Maine, also makes a
special cannabis-specific potting soil called "Stonington Blend."</p>
<p><img src="stonington.jpg" alt="Coast of Maine Stonington Blend potting soil" /></p>
<blockquote><p>This soil incorporates mycorrhizal fungi, kelp, fish bone and alfalfa meal, as well as <strong>worm castings</strong>, peat, coir and lobster compost. When growing in 15 gallon containers,  there is no need for additional nutrients.</p>
</blockquote>
<p>Fifteen gallons?  I'm growing in a crawl space, people.</p>
<p>Finally, there's a company called <a href="https://buildasoil.com/">Build a Soil</a> that's become popular due
in part to a YouTube channel hosted by the company's CEO, where he proselytizes
for The Gospel of Organic No-Till Living Soil Cannabis Gardening.  I grow in
tiny pots of mediocre soil amended with chemical fertilizers, but his insight
is still helpful.  Here's what he has to say about adding solid organic
fertilizer to the top of the soil:</p>
<blockquote><p>There are many ways to approach top dressing a plant but here is a method that I really like.</p>
<p>For every 5 Gallons the plant is in I would add the following:</p>
<ol>
<li>1 Tablespoons Kelp Meal</li>
<li>2 Tablespoons Fish Bone Meal</li>
<li>4 Tablespoons Gypsum</li>
<li>Cover with up to 1/2" - 1" layer of <strong>worm castings</strong> across the whole container.</li>
<li>Put the mulch back, or cover with fresh mulch etc. </li>
</ol>
</blockquote>
<p>These people love worm poop.  It's all the rage.  Let's make some.</p>
<h2>Roommates</h2>
<p>The <a href="https://www.lesecologycenter.org/products/">LES Ecology Center</a> will sell you some worms, just call (212)-477-4022
to order in advance and then pick up at one of their farmers' market tents in
Union Square or Tomkins Square Park.</p>
<p>I called and they told me that the worms are done this year.  Call back next Spring.</p>
<p>So, I ordered worms online.  <a href="https://unclejimswormfarm.com/">Uncle Jim's Worm Farm</a> will ship you a
drawstring bag of 500 worms from Pennsylvania for $45.</p>
<p><img src="bag_small.webp" alt="bag of worms" /></p>
<p>You can't just keep them in a bag, though.  I bought some more five gallon
plastic buckets from the local hardware store, and built a worm bin.</p>
<p><img src="bin-closed_small.webp" alt="worm bin" /></p>
<p><img src="bin-parts_small.webp" alt="worm bin taken apart" /></p>
<p>Here's the idea.  One of the buckets has a bunch of holes in the bottom and
along the rim.  You line the bottom with some newspaper and fill it a few
inches deep with wetted shredded paper and food scraps.  The worms live in
there.  The lid goes on, itself with holes, and also I put a cut up t-shirt
under the lid to discourage fruit flies.  That bucket then stacks inside of a
bucket without holes, to catch any liquid that gets through the newspaper and
out the bottom holes.</p>
<p>Feed the worms at least once a week.</p>
<p>Here's the cool part.  What about when you want to harvest the poop from the
worms?  Do you go digging through the poop, picking out worms with your hands
like a barbarian?</p>
<p>No, you don't.  Instead, you have another bucket with holes.  You put fresh
food and bedding into the new bucket and place it on top of the old.  The
worms, running out of food in their bucket, will wiggle their way up into the
top bucket.  After a few days, you harvest the castings from the first bucket,
dump the contents of the new bucket (worms and all) back into the first bucket,
and you're ready to make another batch of worm poop.  Brilliant!</p>
<p>The worms arrived just this morning.  Here they are squirming in their new home
of shredded paper, trimmed cannabis leaves, and spent coffee grounds:</p>
<p><img src="worms_small.webp" alt="worms in the bin" /></p>
<p>Let the pooping begin.</p>


        </body>
    </html></div></content></entry><entry><title>Turn an Old Laptop into a Server</title><link href="https://www.davidgoffredo.com/laptop-server/laptop-server.html" /><id>https://www.davidgoffredo.com/laptop-server/laptop-server.html</id><updated>2021-09-22</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/laptop-server/laptop-server.html" />
        </head>
        <body>
            <h1>Turn an Old Laptop into a Server</h1>
<p>Over the years I've garnered a collection of somewhat broken old laptops.  One
has a broken keyboard and no battery.  Another has a faulty SSD and a flaky
motherboard.  Both are slow when running modern systems.</p>
<p>For general computing, though, old laptops have some advantages:</p>
<ul>
<li>cheap (free, in my case)</li>
<li>built-in monitor (if it works)</li>
<li>built-in keyboard (if it works)</li>
<li>battery power backup (if it works)</li>
<li>built-in networking, GPU, camera, etc.</li>
<li>designed for low power consumption</li>
<li>flat form factor (when the lid is closed)</li>
</ul>
<p>If you have an old laptop lying around that you'd like to turn into a home
Linux server that you control over ssh, here's how I set it up.</p>
<h2>Linux USB installer</h2>
<p>Download an <code>.iso</code> file of your favorite Debian-based Linux distribution.
Ubuntu Server is a tempting choice, but if your laptop lacks a wired ethernet
card (like my most recent one), then the server distribution might not have
your wireless drivers.  Here be dragons.</p>
<p>Instead, we'll install a "desktop" flavored distribution and strip it down
afterward.</p>
<p>I used <a href="https://ubuntu.com/download/desktop/thank-you?version=20.04.3&amp;architecture=amd64">Ubuntu Desktop 20.04.3</a> and flashed it onto a 32 GB USB flash drive
using <a href="https://en.wikipedia.org/wiki/Startup_Disk_Creator">Startup Disk Creator</a>.</p>
<h2>Configure BIOS on old laptop</h2>
<p>You need to tell the laptop to boot from the USB flash drive.  How to do this
will depend on the specific laptop, but it will involve one or more of the
following:</p>
<ul>
<li>pressing a special key during boot to enter the BIOS configuration menu</li>
<li>disabling "Secure Boot"</li>
<li>prioritizing "legacy" boot over UEFI boot</li>
<li>making sure that the USB drive is first in the legacy and/or UEFI boot order</li>
<li>save and exit BIOS configuration menu</li>
</ul>
<p>With luck, the next boot will start some GUI/shell for the Linux distribution's
installer.</p>
<h2>On the old laptop</h2>
<p>Install the Linux distribution.  To keep things simple, I configure the main
user to have the same name as the main user on my primary computer ("david").
I like short names for the to-be server (e.g. "lenovo" for my old Yoga 2).</p>
<p>Once that's done and you've restarted the computer without the USB flash drive
and verified that it boots the system you installed, you're ready to strip it down.</p>
<p>Our first order of business is installing an SSH server so that you can
configure the computer remotely.  For example, I have mine set up with the lid
closed on a shelf somewhere.  <em>Don't close the lid yet, though</em>.</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> sudo apt update</span>
<span class="hljs-meta">$</span><span class="bash"> sudo apt install -y openssh-server</span>
<span class="hljs-meta">$</span><span class="bash"> sudo apt upgrade -y</span>
</code></pre>
<p>Now you can connect to the laptop remotely over ssh (see below).  Keep the lid
open, though, so that the laptop doesn't sleep.  We'll change that later.</p>
<h2>On your real computer</h2>
<p>Switch to your favorite computer for computing and connect to your
soon-to-be-server laptop.  You can use the laptop's local IP address or
hostname (if it advertises one).  In my case, my user name is <code>david</code>
and the laptop's name is <code>lenovo</code>, so:</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> ssh david@lenovo</span>

david@lenovo $ echo 'we are now remoted into the laptop'
we are now remoted into the laptop
</code></pre>
<p>It will ask you for a password, and possibly multiple confirmations.  The
password is whatever you configured for the user (<code>david</code>) on the laptop.</p>
<p>The remaining commands in this section are to be run on the soon-to-be-server
laptop, over your ssh connection.  I'll use the shell prompt <code>david@lenovo $</code>
to remind you.</p>
<h2>Over ssh</h2>
<h3>Configure non-graphical boot</h3>
<p>If I happen to have the lid open when the laptop boots, I don't want to see
a splash screen.  I want to see Linux's log, and then <code>systemd</code>'s once <code>init</code>
starts.  Here's how:</p>
<pre><code class="lang-console hljs">david@lenovo $ sudo vi /etc/default/grub
</code></pre>
<p>That file might have a variable whose value is set to <code>"quiet splash"</code> or
similar.  If so, remove "quiet" and "splash," e.g. so that value is <code>""</code>.</p>
<p>Save and exit.  Then, regenerate the bootloader with the modified configuration:</p>
<pre><code class="lang-console hljs">david@lenovo $ sudo update-grub
</code></pre>
<p>Now change the "run level" to the non-graphical one:</p>
<pre><code class="lang-console hljs">david@lenovo $ sudo systemctl enable multi-user.target
david@lenovo $ sudo systemctl set-default multi-user.target
</code></pre>
<p>Now your desktop Linux will feel more like a server.</p>
<h3>Closing the laptop lid does <em>nothing</em></h3>
<p>Lid open/close events from the hardware are handled by the login service.
Let's configure the handlers to ignore the events, rather than whatever they do
by default:</p>
<pre><code class="lang-console hljs">david@lenovo $ sudo vi /etc/systemd/logind.conf
</code></pre>
<p>That file will have commented-out lines beginning with <code>HandleLid</code>, e.g.</p>
<pre><code class="lang-shell hljs"><span class="hljs-meta">#</span><span class="bash">HandleLidSwitch=<span class="hljs-built_in">suspend</span></span>
<span class="hljs-meta">#</span><span class="bash">HandleLidSwitchExternalPower=<span class="hljs-built_in">suspend</span></span>
<span class="hljs-meta">#</span><span class="bash">HandleLidSwitchDocked=ignore</span>
</code></pre>
<p>Uncomment them and change their values to <code>ignore</code>, e.g.</p>
<pre><code class="lang-shell hljs">HandleLidSwitch=ignore
HandleLidSwitchExternalPower=ignore
HandleLidSwitchDocked=ignore
</code></pre>
<p>Save and exit.</p>
<p>Then restart the service to pick up the changes:</p>
<pre><code class="lang-console hljs">david@lenovo $ sudo service systemd-logind restart
</code></pre>
<p>Now you can close the lid on the laptop, and nothing will happen.</p>
<h3>Authorize your public ssh key on the server</h3>
<p>It's a pain to type my password every time I want to connect to the server.
The ssh server supports a per-user allow list of public keys to permit
without falling back to password authentication.  That file probably does not
yet exist on the server, so let's copy the contents of our public key to that
file on the server.</p>
<p>My public key is called <code>~/.ssh/id_ed25519.pub</code>.  Yours might have a different
name.</p>
<pre><code class="lang-console hljs">david@lenovo $ mkdir ~/.ssh
</code></pre>
<p>Run this next command on your real computer, not on the server.</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> scp ~/.ssh/id_ed25519.pub david@lenovo:/home/david/.ssh/authorized_keys</span>
</code></pre>
<p>Now you can connect to the server without a password.</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> ssh lenovo</span>

david@lenovo $
</code></pre>
<h2>Profit</h2>
<p>Congrats, you now have a server in your house, you budding sysadmin, you.</p>
<p>My next steps are usually to:</p>
<ul>
<li>Install <a href="https://git-scm.com/">git</a> so I can pull various projects.</li>
<li>Install <a href="https://nginx.org">nginx</a> and configure it to expose various projects.</li>
<li>Set up a static local IP allocation for the server in my router.</li>
<li>Set up port forwarding for HTTP, HTTPS, and ssh (on an alternative port).<ul>
<li>If you expose ssh, be sure to harden the configuration.  No root, no
password, max retries, etc.</li>
</ul>
</li>
<li>Install <a href="https://certbot.eff.org/">certbot</a> and get HTTPS working with nginx.</li>
<li>Set up <a href="https://en.wikipedia.org/wiki/Cron">cron</a> jobs to do stuff (<code>crontab -e</code>).<ul>
<li>For example, dynamic DNS to update the DNS records of your websites when
your ISP changes your public IP address.</li>
</ul>
</li>
</ul>
<p>Happy hacking.</p>
<p><img src="laptop.svg" alt="laptop server" /></p>


        </body>
    </html></div></content></entry><entry><title>Tree Search</title><link href="https://www.davidgoffredo.com/tree-search/tree-search.html" /><id>https://www.davidgoffredo.com/tree-search/tree-search.html</id><updated>2021-09-20</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/tree-search/tree-search.html" />
        </head>
        <body>
            <h1>Tree Search</h1>
<p>How many ways can we search through a tree?  Let us count the ways.</p>
<h2>Front Matter</h2>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tree</span> {</span>
    Value value;
    std::vector&lt;Tree&gt; children;
};
</code></pre>
<h2>Depth-first</h2>
<p>Visit all of a node's descendants before visiting any of its siblings.</p>
<pre><code class="lang-c++ hljs"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;* <span class="hljs-title">depth_first_search</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;&amp; tree, <span class="hljs-keyword">const</span> Value&amp; value)</span> </span>{
    <span class="hljs-keyword">if</span> (tree.value == value) {
        <span class="hljs-keyword">return</span> &amp;tree;
    }

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; child : tree.children) {
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> result = <span class="hljs-built_in">depth_first_search</span>(child, value)) {
            <span class="hljs-keyword">return</span> result;
        }
    }

    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;
}
</code></pre>
<h2>Breadth-first</h2>
<p>Visit all of a node's siblings before visiting any of its descendants.</p>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;* <span class="hljs-title">breadth_first_search</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;&amp; tree, <span class="hljs-keyword">const</span> Value&amp; value)</span> </span>{
    std::queue&lt;<span class="hljs-keyword">const</span> Tree&lt;Value&gt;*&gt; to_visit;
    to_visit.<span class="hljs-built_in">push</span>(&amp;tree);

    <span class="hljs-keyword">for</span> (;;) {
        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> current = to_visit.<span class="hljs-built_in">front</span>();
        to_visit.<span class="hljs-built_in">pop</span>();
        <span class="hljs-keyword">if</span> (current-&gt;value == value) {
            <span class="hljs-keyword">return</span> current;
        }

        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; child : current-&gt;children) {
            to_visit.<span class="hljs-built_in">push</span>(&amp;child);
        }

        <span class="hljs-keyword">if</span> (to_visit.<span class="hljs-built_in">empty</span>()) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;
        }
    }
}
</code></pre>
<p>This required a queue, and did not require recursion.</p>
<p>We could rewrite the depth-first search without recursion.  After all, the
call stack is a... stack.</p>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;* <span class="hljs-title">depth_first_search</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;&amp; tree, <span class="hljs-keyword">const</span> Value&amp; value)</span> </span>{
    <span class="hljs-keyword">using</span> Ptr = <span class="hljs-keyword">const</span> Tree&lt;Value&gt;*;
    std::stack&lt;Ptr, std::vector&lt;Ptr&gt;&gt; to_visit;
    to_visit.<span class="hljs-built_in">push</span>(&amp;tree);

    <span class="hljs-keyword">for</span> (;;) {
        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> current = to_visit.<span class="hljs-built_in">top</span>();
        to_visit.<span class="hljs-built_in">pop</span>();
        <span class="hljs-keyword">if</span> (current-&gt;value == value) {
            <span class="hljs-keyword">return</span> current;
        }

        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; child : current-&gt;children) {
            to_visit.<span class="hljs-built_in">push</span>(&amp;child);
        }

        <span class="hljs-keyword">if</span> (to_visit.<span class="hljs-built_in">empty</span>()) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;
        }
    }
}
</code></pre>
<p>This visits a node's children in the opposite order as before, but it's still a
depth-first search.</p>
<p>This also is technically less efficient than the first depth-first search, because
we copy a node's children into <code>to_visit</code> before visiting them.</p>
<p>The benefit of this second version is that it can accommodate trees that are
as deep as memory will allow, whereas the first version can only go as deep as
the call stack, which is usually much smaller.  Also, a call stack frame is
larger than a pointer, so we use less space by storing only the <code>Tree*</code> instead
of an entire stack frame.</p>
<h2>Generalize</h2>
<p>The breadth-first search algorithm and the second depth-first search algorithm
are very similar.  The only difference is in the definition of <code>to_visit</code>.</p>
<p>Let's rewrite them as adaptations of the same underlying algorithm.</p>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value, <span class="hljs-keyword">typename</span> Container&gt;
<span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;* <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;&amp; tree, <span class="hljs-keyword">const</span> Value&amp; value, Container&amp;&amp; to_visit)</span> </span>{
    to_visit.<span class="hljs-built_in">push</span>(&amp;tree);

    <span class="hljs-keyword">for</span> (;;) {
        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> current = to_visit.<span class="hljs-built_in">next</span>();
        <span class="hljs-keyword">if</span> (current-&gt;value == value) {
            <span class="hljs-keyword">return</span> current;
        }

        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; child : current-&gt;children) {
            to_visit.<span class="hljs-built_in">push</span>(&amp;child);
        }

        <span class="hljs-keyword">if</span> (to_visit.<span class="hljs-built_in">empty</span>()) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;
        }
    }
}

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> :</span> <span class="hljs-keyword">public</span> std::stack&lt;<span class="hljs-keyword">const</span> Tree&lt;Value&gt;*, std::vector&lt;<span class="hljs-keyword">const</span> Tree&lt;Value&gt;*&gt;&gt; {
    <span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;*&amp; <span class="hljs-title">next</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">top</span>();
    }
};

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;* <span class="hljs-title">depth_first_search</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;&amp; tree, <span class="hljs-keyword">const</span> Value&amp; value)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">search</span>(tree, value, Stack&lt;Value&gt;());
}

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> :</span> <span class="hljs-keyword">public</span> std::queue&lt;<span class="hljs-keyword">const</span> Tree&lt;Value&gt;*&gt; {
    <span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;*&amp; <span class="hljs-title">next</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">front</span>();
    }
};

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;* <span class="hljs-title">breadth_first_search</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;&amp; tree, <span class="hljs-keyword">const</span> Value&amp; value)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">search</span>(tree, value, Queue&lt;Value&gt;());
}
</code></pre>
<h2>What Else?</h2>
<p>What other data structures could we use for <code>to_visit</code>, other than a stack or a
queue?</p>
<p>If we don't know anything about the structure of <code>tree</code> and the values within
it, then I see no reason to use any other data structure in an exhaustive
search.</p>
<p>Still, it's interesting to consider what happens when we use some other
data structure.</p>
<h2>With a Priority Queue</h2>
<p>What about a heap?  The next element visited is always the <em>smallest</em> (or the
<em>largest</em>) among those <em>to_visit</em>, according to some comparison
function.</p>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Greater</span> {</span>
    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;* left, <span class="hljs-keyword">const</span> Tree&lt;Value&gt;* right)</span> <span class="hljs-keyword">const</span> </span>{
        <span class="hljs-keyword">return</span> left-&gt;value &gt; right-&gt;value;
    }
};

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PriorityQueue</span> :</span> <span class="hljs-keyword">public</span> std::priority_queue&lt;<span class="hljs-keyword">const</span> Tree&lt;Value&gt;*, std::vector&lt;<span class="hljs-keyword">const</span> Tree&lt;Value&gt;*&gt;, Greater&lt;Value&gt;&gt; {
    <span class="hljs-comment">// Return the smallest element in this queue.</span>
    <span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;*&amp; <span class="hljs-title">next</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">top</span>();
    }
};

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;* <span class="hljs-title">least_first_search</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;&amp; tree, <span class="hljs-keyword">const</span> Value&amp; value)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">search</span>(tree, value, PriorityQueue&lt;Value&gt;());
}
</code></pre>
<p>This is more costly than the vanilla depth-first or breadth-first algorithms,
because operations on the heap (priority queue) are logarithmic in its size
rather than amortized constant.</p>
<h2>With a Hash Multiset</h2>
<p>We could also visit nodes in an expanding pseudorandom order by using a
hash-based container.</p>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstddef&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_set&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HashValue</span> {</span>
    <span class="hljs-function">std::<span class="hljs-keyword">size_t</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;* node)</span> <span class="hljs-keyword">const</span> </span>{
        <span class="hljs-keyword">return</span> std::hash&lt;Value&gt;(node-&gt;value)();
    }
};

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HashMultiset</span> :</span> <span class="hljs-keyword">public</span> std::unordered_multiset&lt;<span class="hljs-keyword">const</span> Tree&lt;Value&gt;*, HashValue&lt;Value&gt;&gt; {
    <span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;* <span class="hljs-title">next</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>{
        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">begin</span>();
    }

    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-built_in">erase</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">begin</span>());
    }

    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;* node)</span> </span>{
        <span class="hljs-built_in">insert</span>(node);
    }
};

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-function"><span class="hljs-keyword">const</span> Tree&lt;Value&gt;* <span class="hljs-title">bogo_search</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Tree&lt;Value&gt;&amp; tree, <span class="hljs-keyword">const</span> Value&amp; value)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">search</span>(tree, value, HashMultiset&lt;Value&gt;());
}
</code></pre>
<p>The hash is of a node's value, which is strange.  Stranger still would be
to hash the node's address instead.</p>
<p>Treeeeeessss.......</p>
<p><img src="tree.svg" alt="tree" /></p>


        </body>
    </html></div></content></entry><entry><title>Cannabis (For Now)</title><link href="https://www.davidgoffredo.com/cannabis-3/cannabis-3.html" /><id>https://www.davidgoffredo.com/cannabis-3/cannabis-3.html</id><updated>2021-09-14</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/cannabis-3/cannabis-3.html" />
        </head>
        <body>
            <h1>Cannabis (For Now)</h1>
<p>I can't keep these plants alive.  They are very unhappy.</p>
<p><img src="sick_small.webp" alt="sick plants" /></p>
<h2>Drowning</h2>
<p>The soil holds too much water.  I wait for several days between waterings, and
in that time the top few centimeters of soil are bone dry, while the soil below
is still moist.</p>
<p>There is an epidemic of fungus gnats.  "Just let the soil dry out," they say.
"You're just over-watering," they say.  "The soil isn't draining," they say.
Are you <em>sure</em>?  Do you mean to tell me that if you put a plant in soil
and water it once a week, it will die from <em>over-watering</em>?</p>
<p>"But the gnats proliferate due to the presence of fungus, and the fungus only
grows when the soil is moist too long!" they exclaim.</p>
<p>"There's too much soil!  Plants that size potted in that much soil will die
from root rot!" is the warning.</p>
<p>Here's a question.  Does <a href="https://en.wikipedia.org/wiki/Vermiculite">vermiculite</a> cause water to pass through the soil
<em>more</em> easily, or <em>less</em> easily?  Does it <em>improve</em> drainage, or <em>hinder</em>
drainage?</p>
<p>The answer, as far as I can read, is "both" or "neither."  The first couple of
pages of google results are all cooking recipe style articles that rephrase,
sometimes verbatim, the same unhelpful claims about perlite, vermiculite,
what they are, what they're for, how they're similar, and how they're
different.  If you instead look at message boards or reddit, you'll see claims
that perlite and vermiculite are polar opposites — that perlite improves
drainage, while vermiculite retains moisture.  If you read articles for DIY
potting soil mixes, you'll see things like "2 parts perlite and/or vermiculite
in any proportion."</p>
<p>I've been spraying a dilute <a href="https://en.wikipedia.org/wiki/Neem_oil">neem oil</a> mixture onto the soil of the plants
in an attempt to terrorize the fungus gnats.  It doesn't seem to be helping,
but apparently this takes time.</p>
<p>My mother advised me to take one or two of the plants out of their current
container and plant each individually into a small pot.  The goal is to
improve soil drainage.  I took this opportunity to mix up some new soil,
this time with the following ingredients:</p>
<ul>
<li>2 parts Coast of Maine <a href="https://coastofmaine.com/product/barharbor/">Bar Harbor Blend</a> potting soil</li>
<li>1 part spent brewer's grain based compost mixed with used soil</li>
<li>1 part vermiculite</li>
</ul>
<p>It's vermiculite rather than perlite, because the local gardening store's
perlite included Miracle Grow fertilizer, and I'm trying to control the
"drainage" variable only.</p>
<p>I mixed the soil, roughly, by volume using a quart sized measuring cup as a
scoop, and worked the mixture with a big metal paddle and a little wooden spoon
until I had broken up most of the clumps.  The soil has the consistency of wet
sand, but lighter.</p>
<p>The unamended potting soil really is very dense and moist.  Probably adding 
anything (perlite, vermiculite, sand, styrofoam) would improve it.  That's not
to mention nutrients, which I'm not addressing until I can get the plants to
<em>stop dying</em>.  Besides, the soil and the compost probably have enough
nutrients to get the plants further along into the vegetative stage.  I could
always supplement with liquid fertilizers later if necessary.</p>
<p>I accidentally destroyed most of the root system of one of the plants that I
transplanted today, so that one I expect will die.  The other one looked like
it was going to die anyway, so I wish it the best of luck.</p>
<h2>Monitoring</h2>
<p>It seemed like a fun idea to use an old Android phone as a time lapse camera to
monitor the growth of the plants, but it turns out it fucking sucks and is a
total pain in the ass.</p>
<p>Assuming the camera app hasn't spontaneously stopped taking pictures without
leaving a hint as to why, you can see the most recent picture <a href="https://home.davidgoffredo.com/weedcam/latest.jpg">here</a>.
There's also a less frequently generated everything-so-far
<a href="https://home.davidgoffredo.com/weedcam/time-lapse.mp4">time lapse video</a>.</p>
<p>Here they are inline:</p>
<div>
    <a href="https://home.davidgoffredo.com/weedcam/latest.jpg">
        <img src="https://home.davidgoffredo.com/weedcam/latest.jpg" width="700" />
    </a>
</div><div>
    <video controls="true" width="700">
        <source src="https://home.davidgoffredo.com/weedcam/time-lapse.mp4" type="video/mp4" />
    </video>
</div><p>Yes, it's blurry.  It focuses on whatever it wants to.  I could make the focus
fixed, but then the next time I nudge the camera or move anything in the shot
I'll have to set it again.  Better to let it focus itself on <em>something</em>.</p>
<p>You can see the whole system <a href="https://home.davidgoffredo.com/weedcam">here</a>.</p>
<p>As you can see, everything was fine until the sudden cut to brown at the 32
second mark.  The interim period was a week that I spent at my parents' house,
during which the phone decided to stop taking pictures.  There's another used
camera in the mail that I'll flash <a href="https://ubuntu-touch.io/">Ubuntu Touch</a> onto in an attempt to wrap
my own camera intervalometer.  Existing Android solutions work very well until
they stop working entirely.</p>
<p>Before leaving my apartment for the airport, I watered the plants with a little
more water than usual and added in some of the dilute neem oil mixture.  After
a week of then leaving the plants well alone, you can see that they're all
dying.</p>
<h2>Next Steps</h2>
<p>If the plants recover as is, great.  Nothing to do.</p>
<p>If the re-potted plants do better, great.  I'll re-pot the rest.</p>
<p>If everything dies, well then shit.  I'll buy more seeds, this time keeping
each plant in its own tiny container full of <em>super draining</em> soil mix, and I
won't water them <em>one fucking drop</em> until they <em>beg for mercy</em>.</p>
<p><img src="cannabis.svg" alt="cannabis leaf" /></p>


        </body>
    </html></div></content></entry><entry><title>How Git Works</title><link href="https://www.davidgoffredo.com/git/git.html" /><id>https://www.davidgoffredo.com/git/git.html</id><updated>2021-09-02</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/git/git.html" />
        </head>
        <body>
            <h1>How Git Works</h1>
<p>It's all explained <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects">here</a>.</p>
<p>Go ahead. Click the link, and read all of it.  It's not long.</p>
<p>No?</p>
<p>Ok, then.  Here are three of the diagrams from the above link.</p>
<h2>Git in Three Diagrams</h2>
<p><img src="https://git-scm.com/book/en/v2/images/data-model-2.png" alt="a tree in git" /></p>
<hr />
<p><img src="https://git-scm.com/book/en/v2/images/data-model-3.png" alt="multiple trees with commits" /></p>
<hr />
<p><img src="https://git-scm.com/book/en/v2/images/data-model-4.png" alt="branch pointers" /></p>
<p>Notice how, in the second diagram, different trees can share file objects and
subdirectory (tree) objects, if those files and subdirectories are exactly the
same (<code>test.txt</code> and <code>d8329f</code>).</p>
<p>That, to me, is what is so cool about git.  It's not bag of diffs.  It's an
immutable directed graph.</p>
<p>The only thing even resembling diffs in git is the <a href="https://git-scm.com/book/en/v2/Git-Internals-Packfiles">packfile</a> that it will
create, as an optimization, when the repository becomes very large or needs to
be sent over the network.  Even then, it doesn't use diffs per se, but a clever
encoding that describes objects as data <a href="https://codewords.recurse.com/issues/three/unpacking-git-packfiles">interspersed with excerpts from other
objects</a>.</p>
<p>The next time you're thinking of throwing your laptop out the window out of
frustration with git, just stop to think how pretty it is.</p>
<p><img src="git.svg" alt="git logo" /></p>


        </body>
    </html></div></content></entry><entry><title>Cannabis (Again)</title><link href="https://www.davidgoffredo.com/cannabis-2/cannabis-2.html" /><id>https://www.davidgoffredo.com/cannabis-2/cannabis-2.html</id><updated>2021-08-28</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/cannabis-2/cannabis-2.html" />
        </head>
        <body>
            <h1>Cannabis (Again)</h1>
<p>My <a href="/cannabis/cannabis.html">first time around</a> I made all of the mistakes, and the plants died as
seedlings.</p>
<p>This time, I will make different mistakes.</p>
<p>Start with the seeds.</p>
<p><img src="seeds_small.webp" alt="seeds" /></p>
<p>Three strains:</p>
<ol>
<li><a href="https://www.leafly.com/strains/nyc-diesel">NYC Diesel</a>, the strain that I killed previously.</li>
<li><a href="https://www.leafly.com/strains/grape-ape">Grape Ape</a>, a popular indica strain.</li>
<li><a href="https://www.leafly.com/strains/100-og">$100 OG</a>, a potent hybrid strain.</li>
</ol>
<p>I dropped the seeds into some tap water and waited for them to sprout.  They
all sprouted more or less after a couple of days, after which I planted each
in a plastic cup of potting soil.</p>
<p>Before long, they all poked out of the soil and started reaching for the
lights.</p>
<p><img src="young_small.webp" alt="young seedlings" /></p>
<p>Well, one of them didn't.  I went digging through the soil after a few days,
and there was no evidence of the previously sprouted seed.  There was, however,
a very fat looking ant, who seemed relieved to be freed from the soil.  She
leapt from the side of the cup onto the kitchen counter and scurried towards
the refrigerator and out of sight.  Did she eat the young plant?  Did I
accidentally <em>not</em> plant that one?  In any case, 8/9 ain't bad.</p>
<p>That's my stove.  I bought a dowel, cut it to size with a hacksaw, and jammed
it into the hood above my stove.  That way I can hang "drop light" sockets from
it, and screw in one of the million LED bulbs that I bought on Amazon a while
back.</p>
<p>When I cook, I just move the plants onto the refrigerator until I'm done.</p>
<p>At first the plants were doing well; decent foliage and lots of roots.</p>
<p><img src="stove_small.webp" alt="plants growing on stove" /></p>
<p><img src="roots_small.webp" alt="nice roots" /></p>
<p>Not long after, though, I started to notice brown spots on the leaves,
burnt-looking tips, and general wasting in some plants.  It seemed to get
worse any time I'd water the plants.  Was I over-watering again?</p>
<p><img src="sad_small.webp" alt="sad" /></p>
<p>Google searches only revealed that these symptoms could be caused by
<em>anything</em>, and that I should <em>do something now</em>, or else the plants <em>will
die</em>, <em>again</em>.</p>
<p>So, I asked for help on <a href="https://www.reddit.com/r/MyFirstGrow/comments/p7qwq3/seedling_brown_spots_and_yellowing/">reddit</a>.  Somebody replied with the following
advice:</p>
<blockquote><p>Ph your water. You’d want it to be between 6.5-7.</p>
<p>Also check if your city uses chloramine and chlorine in their water, which
they most likely do. You’d either filter your water or use store bought.</p>
<p>Also, change to non-white cups. Light hitting the roots can damage them.</p>
<p>I’d also change the lighting schedule to 18/6 during veg.</p>
</blockquote>
<p>Aha, maybe it's not the <em>quantity</em> of water but the <em>quality</em>.</p>
<p>Another possibility was that the plants had outgrown these cups, and were now
near exhausting the available nutrients ("root-bound").  For plants this young
in soil this rich, that is unlikely.  Still, in addition to taking the
redditor's advice, I also planned to transplant into larger containers.</p>
<p>Now I prepare the water for my plants in a pasta pot.  Tap water goes in, gets
boiled for about fifteen minutes, and then sits out overnight, or longer.  Then
I adjust the pH using pH test strips and tiny additions of either citric acid
or potassium hydroxide.  The redditor had a point: my tap water (pure though
NYC tap water is reported to be) has a pH of around 8 and is full of chlorine.
One pot of water lasts a long time, because <em>don't over-water your plants</em>.</p>
<p>Things were getting cramped growing everything on the stove.  I have this
storage space above my bathroom, let's use that instead.</p>
<p><img src="storage_small.webp" alt="unprepared storage space" /></p>
<p>I went to the local gardening store looking for cheap plastic pots about a
gallon in volume.  They don't sell cheap plastic pots (though every one of
the hundreds of plants they sell is potted in one).  They only sell terra cotta
pots for $40 each.</p>
<p>I didn't buy any pots, but as luck would have it, somebody decided to throw
away these plastic drawers on the curb right next to the gardening store:</p>
<p><img src="bins_small.webp" alt="drawers" /></p>
<p>The plants will be pretty cozy, but I think that will work!  Just drill a bunch
of holes in the bottom.</p>
<p>About an afternoon later, I had the plants transferred into the bins; one bin
per strain.</p>
<p><img src="plants-in-bins_small.webp" alt="plants in bins" /></p>
<p>Now for the lighting.  At first I thought that I'd string the "drop lights" on
thread like a clothesline, or maybe I'd use longer dowels.  That would be a
pain in the ass.  Also, whatever I decide, it will need to accommodate future
additions of more lights as the plants grow.</p>
<p>Then I found this cardboard box in my storage space:</p>
<p><img src="light-holes_small.webp" alt="flattened box with holes for lights" /></p>
<p>I traced out socket-sized holes in the box and cut them out.  The idea is that
the cardboard will be a "roof" over the plants, with the bulbs coming in the 
top and pointing down onto the plants.</p>
<p>The weight of the light fixtures might make the cardboard collapse inward,
though, so first I tied some chopsticks to the underside to resist the tendency
of the box to bend downward.</p>
<p><img src="chop-sticks_small.webp" alt="chopsticks as braces" /></p>
<p>I have plenty of aluminum foil, so let's add that to the underside, too.</p>
<p><img src="foil_small.webp" alt="cardboard with aluminum foil lining" /></p>
<p>Here's the setup with some bulbs in place:</p>
<p><img src="lights-on_small.webp" alt="lights mounted in cardboard" /></p>
<p>The cardboard is supported on the right by the plastic shelving from which I
took the drawers, and on the left by a wooden step stool that I also found
on the curb the same day.</p>
<p>The power runs over the top of the setup and off to the side, where I have
a power strip with a timer plugged into an extension cord that runs to the
kitchen.  Per the redditor's advice, I'm keeping the plants under light
eighteen hours per day.</p>
<p><img src="lights-top_small.webp" alt="top of the lighting fixtures" /></p>
<p><img src="power_small.webp" alt="power strips" /></p>
<p>It's all a serious fire hazard.  At least it's surge protected.</p>
<p>Here the plants are in place the day I set them up:</p>
<p><img src="with-plants_small.webp" alt="plants under lights" /></p>
<p>The fan on the right keeps a gentle breeze blowing over the plants at all
times.  The owls keep watch at night.</p>
<p>It's been a week since the transplant, and I think the plants might be
recovering.  It's hard to tell, because the nutrient deficiency is probably
"mobile," meaning that the plant can prioritize healthy growth of new leaves,
even as the death knell intensifies.</p>
<p>Here are some blurry pictures from today.</p>
<p><img src="recovering-1_small.webp" alt="recovering?" /></p>
<p><img src="recovering-2_small.webp" alt="recovering?" /></p>
<p><img src="recovering-3_small.webp" alt="recovering?" /></p>
<p>Hang in there, my little green ones!</p>


        </body>
    </html></div></content></entry><entry><title>Go Shoot Yourself in the Foot</title><link href="https://www.davidgoffredo.com/defer/defer.html" /><id>https://www.davidgoffredo.com/defer/defer.html</id><updated>2021-08-01</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/defer/defer.html" />
        </head>
        <body>
            <h1>Go Shoot Yourself in the Foot</h1>
<p><img src="gopher-gun.webp" alt="gopher with a gun" /></p>
<p>What's the output of the following program?</p>
<pre><code class="lang-go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"fmt"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-params">(result <span class="hljs-keyword">string</span>)</span></span> {
    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">()</span></span> { fmt.Printf(<span class="hljs-string">"foo result = %q\n"</span>, result) }()
    <span class="hljs-keyword">return</span> <span class="hljs-string">"hi"</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span> <span class="hljs-params">(result <span class="hljs-keyword">string</span>)</span></span> {
    <span class="hljs-keyword">defer</span> fmt.Printf(<span class="hljs-string">"bar result = %q\n"</span>, result)
    <span class="hljs-keyword">return</span> <span class="hljs-string">"hi"</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
    fmt.Printf(<span class="hljs-string">"foo() = %q\n"</span>, foo())
    fmt.Printf(<span class="hljs-string">"bar() = %q\n"</span>, bar())
}
</code></pre>
<p>First <code>foo</code> is executed, which will print something, and then the first line of
<code>main</code> will print something.</p>
<p>Then <code>bar</code> is executed, which will print something, and then the second line
of <code>main</code> will print something.</p>
<p>Here's the output:</p>
<pre><code class="lang-text hljs">foo result = "hi"
foo() = "hi"
bar result = ""
bar() = "hi"
</code></pre>
<p>Does the third line surprise you?  It sure surprised me.  Go ahead, <a href="https://play.golang.org/p/8NyKwSbRS_c">try it</a> yourself.</p>
<h2>Why</h2>
<p>Reading StackOverflow <a href="https://stackoverflow.com/a/37249043">didn't help</a>.  Instead, I had to read the
<a href="https://golang.org/ref/spec#Defer_statements">language specification</a>, which is what I ought always to do.</p>
<blockquote><p>Each time a "defer" statement executes, the function value and parameters to
the call are evaluated as usual and saved anew but the actual function is not invoked.</p>
</blockquote>
<p>The parameters are evaluated when the <em>defer statement</em> executes, not when the
deferred function is invoked.</p>
<p>This is confusing, because one way to defer code is to wrap it in a closure
(<code>func</code>) and invoke the closure later on.</p>
<p>Go's <code>defer</code> statement is more general.  After thinking about it, I prefer the
Go way, except that now I have this hole in my foot.</p>
<p>Be careful out there.</p>


        </body>
    </html></div></content></entry><entry><title>Documentation Rant</title><link href="https://www.davidgoffredo.com/documentation-rant.html" /><id>https://www.davidgoffredo.com/documentation-rant.html</id><updated>2021-07-23</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/documentation-rant.html" />
        </head>
        <body>
            <h1>Documentation Rant</h1>
<p>You've been getting away with it for years, and nobody called you out.</p>
<p>Well, I'm here to call you out.  Your documentation sucks, because you don't
care, and neither does the person who cuts your paychecks.</p>
<p>But I care.  I care so much I could kiss you on the lips.  Here's how you can
improve your documentation.</p>
<h2>The Rules</h2>
<p>All you need do is follow these six rules.</p>
<ol>
<li><p>Every source repository has a README file at its root
that explains first <em>why</em> the code exists, then <em>what</em> it is,
<em>how</em> to use it, and finally where to learn <em>more</em>.</p>
</li>
<li><p>Every source repository has a "map" or "tour" that presents an
overview of the repository's subsystems (e.g. source, utility scripts,
build systems, continuous integration, documentation generation, etc.).</p>
</li>
<li><p>Every subdirectory (every single one) within a source repository
has a README file that briefly explains what's in that
directory.  Sometimes it's a file-by-file summary, and sometimes
it's just a paragraph saying why that directory needs to exist
(i.e. why the files are there and not elsewhere — what they're for).</p>
</li>
<li><p>Every source file has a section at the top that summarizes what the
file is for, what's in it, and possibly other documentation (e.g.
example usage).</p>
</li>
<li><p>Every subprocedure (function) in a source file has a contract written
in a human language in a comment.  The contract will also hint at the
<em>reason</em> for the function's existence, e.g. a note about what other
code might call the function and why.</p>
</li>
<li><p>Every significant "section" of code within a long subprocedure (function)
is similarly documented.  Better, refactor it into its own subprocedure.</p>
</li>
</ol>
<p>This applies to unit tests as well.  Too often, unit tests are completely
undocumented, or are missing <em>motivating</em> documentation at the top.  No,
the unit tests don't document themselves.  Cut the shit.</p>
<p>This also applies to your steaming piles of YAML, <code>Dockerfile</code>, <code>.gitignore</code>,
shell scripts, <code>Makefile</code>, <code>CMakeLists.txt</code>, and anywhere else the real truth
about your system is hiding, undocumented.</p>
<h2>The Critical Bit</h2>
<p>All of this must be kept up to date with the code.  That's the hardest part.</p>
<p>Reading prose and then modifying it to say something slightly different, all
without making an incoherent mess, is hard.  It takes time and concentration
and thought and review.  It doesn't affect compilation, testing, releases,
sales, or promotions.  Do it anyway.  Don't let it get out of date, work
on it!  Do it for me.</p>
<h2>Code Modification Checklist</h2>
<p>Here's a checklist to help cover your corner cutting ass.</p>
<ul>
<li>✅ Solving the right problem</li>
<li>✅ Build succeeds</li>
<li>✅ Unit tests succeed</li>
<li>✅ Integration tests (automated or manual) succeed</li>
<li>✅ Checked whether procedure-level documentation needs alteration/addition</li>
<li>✅ Checked whether file-level documentation needs alteration</li>
<li>✅ Checked whether directory-level documentation needs alteration</li>
<li>✅ Checked whether the repository "tour" needs alteration</li>
<li>✅ Checked whether the repository README needs alteration</li>
</ul>
<p>When you add or modify code, find the nodes closest to your changes,
and then for each, trace through all ancestors, checking at each level
whether your changes warrant changes to the documentation at that level.</p>
<pre><code class="lang-text hljs"> Repo README
   /        \
  /          \
Repo Tour     \
    \_____  Subdirectory README
               /       |
              /        +--- File summary
             /         |     |
  Subdirectory README  |     +--- Procedure contract
          ...          |     |
                       |     +--- Procedure contract
                       |     ...
                       +--- File summary
                       |     ...
                      ...
</code></pre>
<p>Happy coding!  Remember, your job as a programmer is to <em>explain systems</em>.
First to yourself, then to the computer and everyone else.  Don't leave us
hanging.</p>


        </body>
    </html></div></content></entry><entry><title>Cannabis</title><link href="https://www.davidgoffredo.com/cannabis/cannabis.html" /><id>https://www.davidgoffredo.com/cannabis/cannabis.html</id><updated>2021-06-30</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/cannabis/cannabis.html" />
        </head>
        <body>
            <h1>Cannabis</h1>
<p>I'm trying my hand at growing weed.  <a href="https://legislation.nysenate.gov/pdf/bills/2021/s854a">It's legal in New York now</a>, so it's a
good time to start.</p>
<p>It's a bit late in the season to start, but if one of the plants survives, maybe
I'll have some weed by the time it gets cold outside.</p>
<p>The plants started as five seeds that I bought online, $10 each.</p>
<p><img src="seeds_small.webp" alt="seeds" /></p>
<p>I put them in a cup of water for a couple of days.  When they began to sprout,
I planted each in a plastic cup of potting soil.</p>
<p><img src="window_small.webp" alt="cups on windowsill" /></p>
<p><img src="window-close_small.webp" alt="cups up close" /></p>
<p>That platform is a bunch of chopsticks superglued together.</p>
<p>Two of the plants never "opened up" to produce leaves, and so died.  I put the
surviving three out back on a stool to grow in partial shade until they were
mature enough to transplant into larger pots.</p>
<p><img src="yard_small.webp" alt="cups in yard" /></p>
<p><img src="yard-bright_small.webp" alt="sunlit cups in yard" /></p>
<p>Today I bought $50 in potting soil, more than enough to fill three 5 gallon
plastic buckets, and replanted into the buckets.  First they spent a little
while in the shower, draining water through the soil and out the holes that I
drilled in the bottom of the buckets.</p>
<p><img src="shower_small.webp" alt="plants in buckets in shower" /></p>
<p>Then I lugged the filled buckets up five flights of stairs to the roof.  I
recently replaced my old broken futon with a new couch, and so I had many
slats of wood to work with (well, Ikea "wood"), which allowed me to set up
this raised pallet to support the plants and allow them to drain.</p>
<p><img src="roof-close_small.webp" alt="plants on the roof, close up" /></p>
<p><img src="roof_small.webp" alt="plants on the roof" /></p>
<p>It's supposed to rain for the next three days, so that'll be an opportunity to
see how the buckets fare and drain.  It also means that I won't immediately
have to start lugging gallons of water up the stairs to the roof every day to
water the plants.</p>
<p>Here's the new couch.</p>
<p><img src="couch_small.webp" alt="new couch" /></p>
<p>I'll update this post when the plants have grown more.</p>
<h2>Costs</h2>
<p>Here's a table of what I've spent, so far, on this project:</p>
<p />
<p><style>
table.costs td:nth-child(2), table.costs td:nth-child(3), table.costs td:nth-child(4), td.total
{
  text-align: right;
}
table.costs td, table.costs th {
    padding: 0 15px;
}
</style></p>
<table class="costs">
  <tr><th>Item</th><th>Unit Cost</th><th>Quantity</th><th>Subtotal</th></tr>
  <tr><td>seeds</td><td>$10</td><td>5</td><td>$50</td></tr>
  <tr><td>buckets</td><td>$6</td><td>5</td><td>$30</td></tr>
  <tr><td>soil</td><td>$25</td><td>2</td><td>$50</td></tr>
  <tr><td>jars</td><td>$7</td><td>3</td><td>$21</td></tr>
  <tr><th colspan="4" /></tr>
  <tr><td colspan="3">total</td><td class="total">$151</td></tr>
</table><h2>Update: They All Died</h2>
<p>Yep, all three plants are dead.  Here are some pictures that I took shortly
before the end.</p>
<p><img src="dead_1_small.webp" alt="sad plants" /></p>
<p><img src="dead_2_small.webp" alt="another sad plant" /></p>
<p><img src="dead_3_small.webp" alt="missing plant" /></p>
<p>Where did the third one go?  I found a bird feather in one of the buckets, so
I have my suspicions.</p>
<p>There was no saving the other two plants.  The issue, I think, is that those
buckets are too big for such small plants.  When it rains, the soil holds water
that the plants can't take up, and they "drown."</p>
<p>So, better luck next year?  No, let's try to grow indoors!  Check out
<a href="/cannabis-2/cannabis-2.html">part two</a>.</p>


        </body>
    </html></div></content></entry><entry><title>Boxy Brown Porter</title><link href="https://www.davidgoffredo.com/boxy-brown-porter/boxy-brown-porter.html" /><id>https://www.davidgoffredo.com/boxy-brown-porter/boxy-brown-porter.html</id><updated>2021-06-20</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/boxy-brown-porter/boxy-brown-porter.html" />
        </head>
        <body>
            <h1>Boxy Brown Porter</h1>
<p>Today I brewed a porter recipe from the <a href="https://www.homebrewtalk.com/threads/1880-whitbread-porter.666707/">internet</a>.  It says:</p>
<blockquote><p>The recipe is one of Ron Pattinson's historic recreations based on Whitbread brewing logs.</p>
</blockquote>
<p>It's supposedly from 1880 and is called "Whitbread Porter."  I'm going to
call it "Boxy Brown Porter."</p>
<p><a href="boxy.png"><img src="boxy_small.png" /></a></p>
<style>
table.brewing td, table.brewing th {
    padding: 0 15px;
}
</style><h2>Ingredients</h2>
<table class="brewing">
  <tr><th>Grain</th><th>Quantity</th><th>Notes</th></tr>
  <tr><td>Pale 2-Row</td><td>9 lbs.</td><td /></tr>
  <tr><td>Brown Malt</td><td>1 lb. 12 oz.</td><td /></tr>
  <tr><td>Black Malt</td><td>12 oz.</td><td /></tr>

  <tr><th>Hop</th><th>Quantity</th><th>Boil Time</th></tr>
  <tr><td>East Kent Goldings (4.4% <a href="https://en.wikipedia.org/wiki/Alpha_acid">AA</a>)</td><td>3 oz.</td><td>60 min.</td></tr>

  <tr><th>Yeast</th><th>Quantity</th><th>Notes</th></tr>
  <tr><td>Safale S-04</td><td>1 pack dry</td><td>stirred into some wort and pitched</td></tr>
</table><h2>Mash</h2>
<p>Here's what the <a href="http://www.homebrewing.com/calculators/?page=tools&amp;section=strike&amp;action=calculate">strike water temperature calculator</a> had to say:</p>
<table class="brewing">
  <tr><td>Grain Weight</td><td>11.5 pounds</td></tr>
  <tr><td>Grain Temperature</td><td>82° F</td></tr>
  <tr><td>Strike Water Amount</td><td>4 gallons</td></tr>
  <tr><td>Target Mash Temperature</td><td>154° F</td></tr>
  <tr><td>Equipment Loss</td><td>0° F (preheated)</td></tr>
  <tr><td>Strike Water Temperature</td><td>164.4° F</td></tr>
</table><p>In practice, I might have mashed in a little too hot.  It's hard to tell,
because temperature readings vary widely depending on where in the mash I
stick the thermometer.   My notes say that the "mash is somewhere between
151°F and 157°F, depending on where I measure it."</p>
<p>After mashing for an hour and a half (went out to dinner), the mash was
"between 149°F and 153°F, depending on where I measure."</p>
<p>An iodine tincture test showed that there was no starch remaining.</p>
<h2>Sparge</h2>
<p>I did a fly sparge, collecting seven gallons of wort in about an hour.</p>
<p><img src="water-in_small.webp" alt="water goes in" />
<em>[water goes in]</em></p>
<p><img src="wort-out_small.webp" alt="wort comes out" />
<em>[wort comes out]</em></p>
<p>I didn't write down the gravity of the runnings.</p>
<h2>Boil</h2>
<p>Don't brew in my apartment during the Summer.  The windows don't open much, and
the only windows are in the front, so there's no way to create a cross breeze.
The window air conditioning unit can't keep up with the stove, especially with
two burners going full blast.  The result is that the temperature and humidity
in the apartment continually rise throughout the boil.  It must have been over
100° F and 100% humidity by the time I turned off the burners.</p>
<p>I started heating the wort as I was collecting it during the sparge.  My notes
say that there was a rolling boil at 8:26 PM, though it was probably already
boiling before then.  I started the first (and only) hop addition at 8:41 PM,
so that's at least 15 minutes of boiling before the 60 minute addition.</p>
<p>I added the 3 oz. of East Kent Goldings pellets (4.4% AA) and boiled them for
60 minutes.  Then I turned off the burners, started the chiller, and turned on
the air conditioner...</p>
<p>The result was five gallons of wort with a <strong>starting gravity of 1.052</strong>.  If
that ferments down to 1.010, which it usually does, then it'll be 5.5% ABV.</p>
<p>The yeast was a fresh packet of <a href="https://fermentis.com/wp-content/uploads/2018/08/SafAle-S-04.pdf">S-04</a> ale yeast, stirred into some wort and
then poured into the fermentor.</p>
<p><img src="gravity_small.webp" alt="starting gravity" /></p>
<p><img src="gravity-temperature_small.webp" alt="temperature of hydrometer sample" /></p>
<p><img src="temperature_small.webp" alt="temperature reading" /></p>
<h2>Fermentation</h2>
<p>I affixed a blowoff tube to the carboy and put it into the chest freezer set to
60° F.</p>
<p>Two days later, this is what I had:</p>
<p><img src="poop1_small.webp" alt="beer explosion, angle 1" /></p>
<p><img src="poop2_small.webp" alt="beer explosion, angle 2" /></p>
<p><img src="poop3_small.webp" alt="beer explosion, angle 3" /></p>
<p><img src="poop4_small.webp" alt="beer explosion, angle 4" /></p>
<p>Lessons learned:</p>
<ol>
<li>Use a wider blowoff tube.</li>
<li>Leave some more headroom.</li>
<li>S-04 is a beast.</li>
</ol>
<p>I cleaned up the mess and replaced the tube with an airlock.</p>
<h2>Bottling (July 2, 2021)</h2>
<p><img src="filled_small.webp" alt="filled beer bottles" /></p>
<p>We got 42 bottles of porter, plus one partially filled.  Not bad, considering
that the fermentor exploded.</p>
<p>The hydrometer read 1.014 at 64° F, which means the <strong>final gravity was 1.014</strong>,
which means the beer is <strong>5.0% ABV</strong>.</p>
<p><img src="hydrometer_small.webp" alt="hydrometer reading" /></p>
<p><img src="thermometer_small.webp" alt="thermometer reading" /></p>
<p>I primed the beer with 1¼ cups of pale dried malt extract boiled in about a
quart of water and cooled.</p>
<p>The beer tastes good flat.  Let's give it a few weeks to carbonate before the
first tasting.</p>


        </body>
    </html></div></content></entry><entry><title>Blog</title><link href="https://www.davidgoffredo.com/blog.html" /><id>https://www.davidgoffredo.com/blog.html</id><updated>2021-06-03</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/blog.html" />
        </head>
        <body>
            <h1>Blog</h1>
<p>The time has come for me to blog about my blog on my blog.  It's bound to
happen eventually with any hand-coded blog.</p>
<p>I've enjoyed the exercise, because the goal is tangible and easy to state,</p>
<blockquote><p>Create a static website generator suitable for programming and travel blogging.</p>
</blockquote>
<p>there is no deadline, I am unconstrained by existing code or people, and it's an
opportunity to learn what really goes on underneath premade offerings.</p>
<p>What I've learned is that I'm more of a maker than an engineer, and that I
more value what is created than why it is created.</p>
<h2>Static</h2>
<p>This website is completely static.  The server doesn't generate content on
demand, and there are no client-side scripts.  It's HTML, CSS, and media
(images and videos).  Nothing else.</p>
<p>If you disable javascript in your browser, the website is unchanged.  If you
disable CSS, the website looks a little bland, but still fine.</p>
<p>There aren't any cookies or modal overlays or scroll-activated banners or
floating menus or asynchonously loaded assets.  It works on your browser, no
matter which browser you use.  There aren't any Google Analytics beacons or
off-screen tracking images.  You won't be asked to sign in with Google, connect
to Facebook, give a thumbs up, or leave a review, and there's no way to tweet,
repost, or add a comment.</p>
<p>It's just HTML, CSS, and media.  My words into the void.</p>
<h2>Design</h2>
<p>The configuration language of the site generator is <em>the file system</em>.</p>
<pre><code class="lang-text hljs">.
├── bin
├── config
├── content
├── posts
├── series
├── site
└── Makefile
</code></pre>
<p>Pages are written in <a href="https://daringfireball.net/projects/markdown/">markdown</a> (<code>.md</code>) and placed in the <code>content/</code>
directory.  Markdown files will be converted into HTML.  Other types of files
in <code>content/</code> will be included in the site verbatim.</p>
<p>The directory structure within <code>content/</code> can be whatever you like (e.g. to 
organize pages with their images in directories).</p>
<p>The <code>posts/</code> directory contains symbolic links to <code>.md</code> files under <code>content/</code>.
Each symbol link is a post, and its name is the ISO 8601 date of the post, e.g.
<code>2021-06-03</code> for June 3rd, 2021.</p>
<p>The <code>config/</code> directory contains pieces of the site that don't vary between
pages, such as the style sheets and the HTML of the navigation bar that appears
at the top and bottom of every page.</p>
<p>The <code>series/</code> directory contains one subdirectory per "series."  A series is a
group of related posts, e.g. a series of posts on restoring a car.  The name of
each subdirectory under <code>series/</code> is the display name of the series (e.g. 
"Programming Languages"),  and the contents of each such subdirectory are
symbolic links to links in <code>posts/</code>, where the name of each symbol link is the
nickname for that post in the series, e.g. "Day 12" in a series on "Peru Trip."</p>
<pre><code class="lang-text hljs">.
├── bin
├── config
│   ├── common.css
│   └── navigate.html
├── content
│   ├── cheesecake.md
│   ├── i-love-scheme.md
│   ├── in_the_oven.jpg
│   └── yay-python.md
├── posts
│   ├── 2021-06-03 -&gt; ../content/yay-python.md
│   ├── 2021-06-09 -&gt; ../content/cheesecake.md
│   └── 2021-07-15 -&gt; ../content/i-love-scheme.md
├── series
│   └── Programming Languages
│       ├── Python -&gt; ../../posts/2021-06-03
│       └── Scheme -&gt; ../../posts/2021-07-15
├── site
└── Makefile
</code></pre>
<p>The <code>bin/</code> directory contains scripts used when generating the site.</p>
<p>The <code>site/</code> directory contains the generated static website, where most of the
site's assets are symbolic links to files in <code>content/</code> and <code>config/</code>.</p>
<p>To generate the site, run <code>make</code>.  Then you can run a web server with <code>site/</code>
as the domain root, e.g.</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> site</span>
<span class="hljs-meta">$</span><span class="bash"> python3 -m http.server</span>
</code></pre>
<p>I deploy the site by deep copying <code>site/</code> to another directory (no more symbolic
links), and shipping that directory to wherever the blog is hosted.</p>
<h2>Implementation</h2>
<p>At first, the code generator was a single python script, <a href="https://github.com/dgoffredo/dgoffredo.github.io/blob/12b499adc0480a55c1bcd34e31ac21f8aa0cd4d0/bin/generate">bin/generate</a>.</p>
<p>Now it's a <a href="https://github.com/dgoffredo/dgoffredo.github.io/blob/master/Makefile">Makefile</a> supported by a menagerie of <a href="https://github.com/dgoffredo/dgoffredo.github.io/tree/master/bin">scripts</a>, and as the
final step of the build a <a href="https://github.com/dgoffredo/dgoffredo.github.io/blob/master/bin/generate">descendent of bin/generate</a> is called to
copy/link files into <code>site/</code>.</p>
<p>The current Frankenstein's monster state of affairs arose gradually, as with
all software projects, due to an accumulation of features implemented by an
inadequately disciplined developer learning things as he went along.</p>
<p>If I could figure out how to end up with cleaner code, documentation, and tests
once I get to this point, I'd be a better developer.</p>
<p>It's a journey!  Now on to the details...</p>
<h3>Accumulated Features</h3>
<p>The <a href="https://github.com/dgoffredo/dgoffredo.github.io/commits/master">commit history</a> tells the story of features added.</p>
<ul>
<li>link to page that lists all posts</li>
<li>style HTML generated from markdown</li>
<li>generate a table of contents in each post</li>
<li>highlight syntax in code snippets, using a client-side script</li>
<li>generate thumbnails for large images (<code>*_small.*</code>)</li>
<li>allow nested directories under <code>content/</code></li>
<li>support "series" of posts, and generate per-series navigation tables</li>
<li>link to a page that lists all series</li>
<li>highlight syntax in code snippets, on the server (no more client-side scripts)</li>
<li>automatically insert <code>width</code> and <code>height</code> attributes in <code>&lt;img&gt;</code> tags.</li>
<li>inline CSS (to avoid blocking initial page paint)</li>
<li>add a mailing list</li>
<li>add an "API" to facilitate offline scripts related to the mailing list</li>
<li>add a viewport and tweak styles so that the site looks good on mobile browsers</li>
<li>use a custom embedded font</li>
<li>generate an Atom feed (kind of like RSS)</li>
</ul>
<p>Those are just "user facing" changes.  There was also substantial toil moving
things around, optimizing the generator, writing scripts that generate various
intermediate files, changing how the generated site was structured and
deployed, and packaging the build process into reproducible isolated
environments (like Docker, Guix, and Nix).</p>
<p>Should have just used Wordpress, right?</p>
<h2>Who Gives a Shit?</h2>
<p>I'm proud enough to say what I ended up with is better and lighter than other
generators out there, but I'm wise enough to know that isn't true.</p>
<p>My static site generator is better than anything else out there for
<em>generating my site</em>, and nothing more.  If it had to support the myriad use
cases of even the smallest popular offerings (e.g. <a href="https://github.com/jekyll/jekyll">Jekyll</a>), and if my past
development process is any indicator of how it'd go in the future, then what
I'd end up with is a smoldering dumpster fire of bugs, and I'd end up moving
to <a href="https://www.squarespace.com/">Squarespace</a> or something.</p>
<p>If I wanted to do the experiment, I'd clean up (read: rewrite) the code and
market the generator online as "yet another static blog generator," and either
the project would be duly ignored, or unanticipated difficulties encountered
while implementing requested features would ignite the dumpster anew.</p>
<p>In summary: Software is hard. To claim anything else is either arrogance or a
sales pitch.  Still, it's fun.  Look, I made a website!</p>


        </body>
    </html></div></content></entry><entry><title>Lemonade</title><link href="https://www.davidgoffredo.com/lemonade/lemonade.html" /><id>https://www.davidgoffredo.com/lemonade/lemonade.html</id><updated>2021-05-27</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/lemonade/lemonade.html" />
        </head>
        <body>
            <h1>Lemonade</h1>
<p>I've been making lemonade.  Here's how.</p>
<h2>Ingredients</h2>
<ul>
<li>2 pounds of lemons</li>
<li>1½ cups of sugar</li>
<li>tap water</li>
</ul>
<h2>Equipment</h2>
<ul>
<li><a href="https://www.amazon.com/s?k=manual+lemon+squeezer">citrus juicer</a> (or strong hands)</li>
<li>knife (for cutting lemons)</li>
<li>colander/strainer (for removing lemons and filtering the liquid)</li>
<li>two pots</li>
</ul>
<h2>Procedure</h2>
<p>This recipe is based off of (almost exactly) <a href="https://www.reddit.com/r/Old_Recipes/comments/hl2ehg/i_didnt_realize_lemonade_was_so_complicated/">a Reddit post</a>.</p>
<p>Cut all of the lemons in half and squeeze their juice into a pot.</p>
<p>Cut each squeezed half lemon into fourths and put into the pot with the juice.</p>
<p>Evenly sprinkle one cup of sugar over the lemons.</p>
<p>Cover the pot and let sit for thirty minutes.  No heat.</p>
<p>While that's happening, bring a half cup of sugar to a boil in a little bit of
water in another pot.  Let boil for a few minutes, and then turn off the heat
and cover the pot.</p>
<p>When the thirty minutes is up for the lemons, add six cups of water to the
lemon/juice/sugar pot, stir, and bring to a boil.  Let that boil for ten minutes.</p>
<p>After boiling for ten minutes, turn off the heat and strain into the other pot
(the one containing the boiled sugar water), removing the lemons.  I like to
give the lemons a firm poke with a wooden spoon to get any remaining liquid
out of them.</p>
<p>Using a strainer, filter the liquid back and forth between the two pots, at
least three times (I do five or six times).</p>
<p>Cover whichever pot the lemonade ended up in, and put the pot into the sink
surrounded by cold water (and ice packs, if you have them).</p>
<p>When the lemonade has cooled to room temperature (takes a while), add ice
cubes and serve with a ladle.  Or, scoop your glass into the pot because life
is short.</p>
<p><img src="lemonade_small.webp" alt="lemonade in pot in sink" /></p>
<p>Happy almost Summer.</p>


        </body>
    </html></div></content></entry><entry><title>Double Panda IPA</title><link href="https://www.davidgoffredo.com/double-panda-ipa/double-panda-ipa.html" /><id>https://www.davidgoffredo.com/double-panda-ipa/double-panda-ipa.html</id><updated>2021-05-19</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/double-panda-ipa/double-panda-ipa.html" />
        </head>
        <body>
            <h1>Double Panda IPA</h1>
<p><a href="label.png"><img src="label.webp" alt="Double Panda IPA beer label" /></a></p>
<p />
<style>
table.brewing td, table.brewing th {
    padding: 0 15px;
}
</style><p>I'm making a beer for the first time since the end of 2017, so I thought I'd
blog about it.  This will be the first post in a "beer" series.</p>
<p>I brewed this batch on May 8, 2021.  Grace was here and helped out.</p>
<h2>Ingredients</h2>
<p>I made a big <a href="https://en.wikipedia.org/wiki/India_pale_ale">IPA</a> based on the ingredients I had on hand.  They're all <em>old</em>
ingredients, which might have been problematic, but I think I'll get a solid
beer out of it anyway.</p>
<table class="brewing">
  <tr><th>Grain</th><th>Quantity</th><th>Notes</th></tr>
  <tr><td>American 2-Row</td><td>≈14 lbs.</td><td>might have been more</td></tr>
  <tr><td>American Pilsner</td><td>2 lbs.</td><td /></tr>
  <tr><td>Caramel 40L</td><td>≈8 oz.</td><td /></tr>
  <tr><td>Roasted Barley</td><td>≈2 oz.</td><td>"a handful," for color</td></tr>

  <tr><th>Hop</th><th>Quantity</th><th>Boil Time</th></tr>
  <tr><td>Citra (12.7% <a href="https://en.wikipedia.org/wiki/Alpha_acid">AA</a>)</td><td>1 ⅓ oz.</td><td>split: 60 min., 15 min., and 2 min.</td></tr>
  <tr><td>Centennial (12% AA)</td><td>1 ⅓ oz.</td><td>split: 60 min., 15 min., and 2 min.</td></tr>
  <tr><td>Cascade (7.3% AA)</td><td>1 ⅓ oz.</td><td>split: 60 min., 15 min., and 2 min.</td></tr>
  <tr><td>Belma (5% AA)</td><td>1 oz.</td><td>split: 60 min., 15 min., and 2 min.</td></tr>

  <tr><th>Yeast</th><th>Quantity</th><th>Notes</th></tr>
  <tr><td>Safale US-05</td><td>1 pack dry</td><td>sprinkled directly into wort</td></tr>
  <tr><td>Saflager W34/70</td><td>2 packs dry</td><td>added after ≈20 hours; rehydrated in diluted/boiled/chilled wort</td></tr>
</table><h2>Grain Preparation</h2>
<p>I used my bathroom scale to weigh out the bulk grains from the bags that had
been sitting in my refrigerator for five years.  At one point, my body weight
(which I was using as a zero for weighing the grains) showed a different value,
so that's why I suspect the ≈14 lbs. of 2-row might actually have been more.
That, or I got a much better mash/sparge efficiency than I've previously
measured.</p>
<p>I crushed the grain out back using my trusty modified <a href="https://victoriacookware.com/">Victoria</a> grain mill.</p>
<p><img src="mill_small.webp" alt="grain mill setup" /></p>
<p>Instead of letting the crushed grain collect in a garbage bag, I cut the bag so
that it acts as a chute, and the grains fall into a plastic bucket below.  Much
better.  The grain generated a lot of dust, because it was so old and dry.</p>
<h2>Mashing</h2>
<p>I mashed thick, using ≈4 gallons of water for ≈16.5 pounds of grain (just less
than 1 qt./lb.).  I heated the mash water up to 190°F, and dumped it into the
empty mash/lauter tun to heat the equipment, with a blanket on the lid.</p>
<p>When the water had cooled to about 170°F, I slowly stirred the grain into the
tun.  After stirring and letting the mash sit for a few minutes, I measured its
temperature to be between 147°F and 149°F, which was below my target of
154°F.  <strong>However</strong>, when I later checked the temperature an hour later, it
read 154°F.  I trust the second reading, and so the initial mash temperature
was likely over 154°F.</p>
<p>After mashing for an hour, an iodine tincture test showed that there was still
starch in the solution, so I added about a quart of hot water, stirred, and let it
mash longer.</p>
<p>After another twenty minutes, an iodine tincture test still showed starch, so
I stirred and covered again at 152°F.  Old grain whose enzymes have worn off?
Or did I denature them with a too hot initial mash?</p>
<p>After another thirty minutes of mashing, there was still starch in the solution, but
at 136°F I gave up and started the sparge.</p>
<p>So, that's a 110 minute mash from somewhere above 154°F down to 136°F, never
showing complete conversion.  There is a long fly sparge ahead, though, so
maybe I ended up getting all of the sugar after all.</p>
<h2>Sparging</h2>
<p>Here's my fly sparging setup.</p>
<video controls="true" width="700">
  <source src="sparging.mp4" type="video/mp4" />
</video><p>I don't think there's really any reason to fly sparge.  Batch sparging and
no-sparge brewing proportedly work just as well at the homebrew scale, but I
don't know... I like it.  It's the most Rube Goldberg part of the process, and
in a nerdy hobby, it fits.</p>
<p>I adjust the flow rate both into and out of the lauter tun based on the level
of water above the mash as indicated by sharpie markings on the inside of the
cooler.</p>
<table class="brewing">
  <tr><th>Time</th><th>Level</th><th>Notes</th></tr>
  <tr><td>4:06 PM</td><td>16 cm</td><td>runnings at 27<a href="https://en.wikipedia.org/wiki/Brix">°Bx</a> ≈ 1.115 <a href="https://en.wikipedia.org/wiki/Relative_density">SG</a></td></tr>
  <tr><td>4:14 PM</td><td>17 cm</td><td>let's speed up the flow a bit</td></tr>
  <tr><td>4:23 PM</td><td>16 cm</td><td /></tr>
  <tr><td>4:37 PM</td><td>14 cm</td><td>refilling sparge bucket with hot tap water</td></tr>
  <tr><td>4:42 PM</td><td>16 cm</td><td>back at it again</td></tr>
  <tr><td>4:49 PM</td><td>16 cm</td><td>runnings at 8°Bx ≈ 1.0318 SG</td></tr>
</table><p>By 4:59 PM (about one hour of sparging) I had collected 8 gallons of
15°Bx ≈ 1.0611 SG wort.  I was concerned that if I let this boil down to 5
gallons, that the resulting wort would be way too strong.  I decided to let it
boil off for a while, to gague the boil off rate, and then discard some wort so
that the target 5 gallons of wort at the end of the boil had a reasonable
gravity.</p>
<h2>Boiling</h2>
<p>During the sparge, I collected the wort between two small pots.  When one
began to fill up, I'd switch over to the other one and then pour the fuller pot's
contents into the brew pot.  After collecting about three gallons this way, I
fired up the burners under the brew pot so that I could get a head start on
bringing the total volume of wort to a boil.</p>
<p>The hot break happened around 5:20 PM, about twenty minutes after I stopped
sparging.  What a mess.</p>
<p>At some point, I scooped a few quarts of wort out of the kettle.  Some I saved
in a tupperware container for priming bottles, and some I discarded.
The wort that I saved was at 1.068 SG.</p>
<p><img src="wort_small.webp" alt="wort set aside for priming bottles down the road" /></p>
<h3>Hop Additions</h3>
<p>The recipe started with one ounce each of the four hop varieties listed in the
<a href="#ingredients">ingredients</a> section.  I planned to blend them together and do 2
ounces at 60 minutes, 1 ounce at 15 minutes, and 1 ounce at 2 minutes.  Then I
wanted to increase the <a href="https://en.wikipedia.org/wiki/Beer_measurement#Bitterness">IBUs</a> by upping the addition at 15 minutes, but I
only had one ounce of Belma total.  So, I added an additional ⅓ ounce of each
of the centennial, citra, and cascade hops to the 15 minute addition.</p>
<p>The actual hop schedule was the following:</p>
<table class="brewing">
  <tr><th>Hop/Quantity</th><th>Boil Time</th></tr>
  <tr><td>½ oz. Citra, ½ oz. Centennial, ½ oz. Cascade, ½ oz. Belma</td><td>60 min.</td></tr>
  <tr><td><sup>7</sup>/<sub>12</sub> oz. Citra, <sup>7</sup>/<sub>12</sub> oz. Centennial, <sup>7</sup>/<sub>12</sub> oz. Cascade, ¼ oz. Belma</td><td>15 min.</td></tr>
  <tr><td>¼ oz. Citra, ¼ oz. Centennial, ¼ oz. Cascade, ¼ oz. Belma</td><td>2 min.</td></tr>
</table><h3>Chilling</h3>
<p>15 minutes before the end of the boil (around the second hop addition), I added
the wort chiller to the kettle to sanitize it.</p>
<p>At flameout, I turned on the cold water faucet and continually swirled the
chiller in the wort to cool it.</p>
<video controls="true" width="700">
  <source src="chiller.mp4" type="video/mp4" />
</video><p>Be sure to fasten the input line to the faucet using a wrench, or it's likely
to pop off.</p>
<video controls="true" width="700">
  <source src="thriller.mp4" type="video/mp4" />
</video><p>The wort cooled down to 68°F.  The original gravity of the batch was 1.082@68°F →<strong>1.083 SG</strong>.</p>
<p>Before chilling the beer, I noted the level of the wort inside the kettle to be
about 5.5 gallons hot.  Water has an expansion factor of 1.043 at 212°F, so
chilled I had around 5.3 gallons of wort.</p>
<h2>Fermenting</h2>
<p>Using a sanitized, broken <a href="https://www.amazon.com/s?k=auto+siphon">autosiphon</a>, I transferred the chilled wort to a
sanitized 5 gallon glass carboy, splashing the stream of wort as it filled the
carboy.  Then I plugged it and shook the hell out of it for several seconds.</p>
<p>I sprinkled a pack of US-05 dried ale yeast (expired in 2017) into the carboy,
fitted a blowoff tube, and placed the fermentor into the chest freezer set to
60°F.</p>
<p>After a day, there was no visible fermentation activity.  In retrospect, this
is not surprising.  A previous batch of similarly strong beer didn't start
chugging until the third day.  This time, though, I was concerned about the
strength of the wort and the viability of the expired yeast.  I've read that
dried yeast lose their viability at a rate of a couple percent <em>per year</em>, but
still...</p>
<p>So, I took <em>two</em> packs of W34/70 dried lager yeast (also expired in 2017), rehydrated them in some of the
set-aside 1.068 wort that I first diluted (arbitrarily), boiled, and 
chilled, and then dumped the whole thing into the fermentor about a day after
brewing.</p>
<p>By the following day, fermentation had taken off like a bat out of hell.</p>
<p><img src="fermentor-with-blowoff_small.webp" alt="fermentation with blowoff tube" /></p>
<p>Are both yeast strains working on the beer?  Is it just the lager yeast?  Or
maybe it's just the ale yeast, after a two day lag as before?  I don't know.</p>
<p>A few days later I replaced the blowoff tube with an airlock, and as of today
the batch is still quietly bubbling away.</p>
<p><img src="fermentor-with-airlock_small.webp" alt="fermentation with airlock" /></p>
<h2>Bottling</h2>
<p>I plan to bottle condition this beer, priming with the 1.068 OG wort that I set
aside on brew day.  Maybe I should just use corn sugar instead, I don't know.</p>
<p>The bottles will get <a href="labels.pdf">these labels</a>, and caps that look something
like this:</p>
<p><a href="cap.png"><img src="cap.webp" /></a></p>
<p>The labels I'll print out on glossy paper, cut out with scissors, and then
attach to the bottles using a glue stick.  The caps I ordered from a printer
online; we'll see how they come out.</p>
<p>Yesterday I cleaned out the years of boxes, move-in artifacts, and other
detritus from the storage loft in my apartment, so now I have a tidy collection
of empty bottles that I can de-label in preparation for filling.</p>
<p><img src="empties_small.webp" alt="empty bottles" /></p>
<p>The beer is not yet done fermenting, so I'll update this post come bottling
day.</p>
<h3>Bottling Day (June 13, 2021)</h3>
<p><img src="fg_small.webp" alt="hydrometer showing final gravity" /></p>
<p>Today was bottling day, and we ended up with 48 12 oz. bottles of primed beer
at 9.58% alcohol by volume.</p>
<p><img src="capped_small.webp" alt="capped beer bottle seen from the top" /></p>
<p>We haven't labeled them yet — still need to update the ABV on the label,
print them out, cut them out, and glue them to the bottles.</p>
<p>I primed the beer with the unhopped, unfermented wort that I set aside towards
the begininng of the boil on brew day.  According to the internet, it's risky
to do this, because the fermentability of wort varies from batch to batch (as
opposed to glucose solution, which is always the same).  I used the <a href="https://www.brewersfriend.com/gyle-and-krausen-priming-calculator/">Brewer's 
Friend calculator</a> for "gyle."  I hope that the beer doesn't turn out flat.</p>
<p><img src="gyle_measure_small.webp" alt="measuring out the gyle" /></p>
<p><img src="gyle_addition_small.webp" alt="pouring guile into fermented beer" /></p>
<p>I boiled and chilled the wort before measuring out the amount specified by the
calculator and pouring it into the fermentor using a funnel.  Then I gently
stirred the wort to mix it in, taking care not to splash.</p>
<p><video controls="true" width="700">
  <source src="stirring.mp4" type="video/mp4" />
</video>
<em>[It's Spotify's "Yacht Rock," I don't know the song.]</em></p>
<p>Then my little helper and I siphoned the mixture into 48 sanitized empty beer
bottles, capping each one.</p>
<p><img src="helper_small.webp" alt="Grace on the bottling floor" /></p>
<p><img src="siphon1_small.webp" alt="siphoning setup — the beer" /></p>
<p><img src="siphon2_small.webp" alt="siphoning setup — the bottling wand" /></p>
<p>I no longer use an auto-siphon.  The theory is that it was introducing tiny air
bubbles during bottling, causing the beer to go stale almost immediately.  I
also no longer use a bottling bucket, for the same reason.  Now it's just a
racking cane into a vinyl tube, all initially filled with sanitizer to start
the siphon, and off we go.</p>
<p><img src="bottled_and_stored_small.webp" alt="bottled and stored" /></p>
<p>Did I mention that I forgot to dry hop this batch?  I forgot to dry hop this
batch!  For such a strong, hop-forward beer as this, it's probably a real
loss.  I'm curious to find out how to tastes when (if) it carbonates.  My
guess is that it won't taste right until at least a month in the bottle.</p>
<p>In the mean time, I'll work on the labels.</p>


        </body>
    </html></div></content></entry><entry><title>Installing Guile from Source</title><link href="https://www.davidgoffredo.com/guile.html" /><id>https://www.davidgoffredo.com/guile.html</id><updated>2021-04-30</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/guile.html" />
        </head>
        <body>
            <h1>Installing Guile from Source</h1>
<p>It's not hard, but the <a href="https://git.savannah.gnu.org/cgit/guile.git/tree/HACKING">HACKING</a> file doesn't cover it all, so here's the
rest.</p>
<h2>Debian Packages</h2>
<p>TL;DR: Do the following.</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> sudo apt install git</span>
<span class="hljs-meta">
$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://git.sv.gnu.org/git/guile.git</span>
<span class="hljs-meta">
$</span><span class="bash"> <span class="hljs-built_in">cd</span> guile</span>
<span class="hljs-meta">
$</span><span class="bash"> sudo apt install -y \
        autoconf automake libtool gettext flex \
        autopoint libreadline-dev pkg-config libgmp-dev \
        libunistring-dev libgc-dev make gperf texinfo</span>
<span class="hljs-meta">
$</span><span class="bash"> ./autogen.sh</span>
<span class="hljs-meta">
$</span><span class="bash"> ./configure</span>
<span class="hljs-meta">
$</span><span class="bash"> make -j 16</span>
<span class="hljs-meta">
$</span><span class="bash"> sudo make install</span>
<span class="hljs-meta">
$</span><span class="bash"> sudo ldconfig</span>
<span class="hljs-meta">
$</span><span class="bash"> guile</span>
</code></pre>
<p>Now in more detail.</p>
<p>Here are the dependencies mentioned in the <a href="https://git.savannah.gnu.org/cgit/guile.git/tree/HACKING">HACKING</a> file:</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> sudo apt install autoconf automake libtool gettext flex</span>
</code></pre>
<p>Then <code>./autogen.sh</code> wants the following, due to the presence of <code>gettext</code>:</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> sudo apt install autopoint</span>
</code></pre>
<p>I wouldn't want to use a REPL without readline support, so install that, too:</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> sudo apt install libreadline-dev</span>
</code></pre>
<p><code>./configure</code> will complain unless all of the following are installed:</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> sudo apt install pkg-config libgmp-dev libunistring-dev libgc-dev</span>
</code></pre>
<p>Then of course you need <code>make</code>, but also <code>gperf</code> (for some reason) and
<code>texinfo</code> for documentation:</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> sudo apt install make gperf texinfo</span>
</code></pre>
<h2>Installation</h2>
<p>After <code>sudo make install</code>, guile will be installed under <code>/usr/local/</code>, but
will fail to run until you first refresh the loader's knowledge of where
shared objects are:</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> sudo ldconfig</span>
</code></pre>
<p>Finally, guile is ready:</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> guile</span>
GNU Guile 3.0.6.7-3bce5
Copyright (C) 1995-2021 Free Software Foundation, Inc.

Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
This program is free software, and you are welcome to redistribute it
under certain conditions; type `,show c' for details.

Enter `,help' for help.
<span class="hljs-meta">scheme@(guile-user)&gt;</span><span class="bash"> </span>
</code></pre>


        </body>
    </html></div></content></entry><entry><title>Mexico, Day 29</title><link href="https://www.davidgoffredo.com/mexico/mexico5.html" /><id>https://www.davidgoffredo.com/mexico/mexico5.html</id><updated>2021-03-22</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/mexico/mexico5.html" />
        </head>
        <body>
            <h1>Mexico, Day 29</h1>
<p><img src="mexico_49_small.webp" alt="" /> </p>
<p>If you zoom in (click), you can see a horse above the third post from the left,
in the center of the image.  My first few days in Aguascalientes, this horse
shamelessly presented itself near the fence.  I'll take a picture another day,
I said.  I'm in a hurry, I said.  Then the horse disappeared for weeks.
Imagine my concern.  When it finally returned, it stayed far away from the
road.  This is the best I could manage without venturing into the pasture.  I
can't help but wonder what might have been.</p>
<p>I'm sitting in another Aeromexico commuter jet, just having walked onboard
from the tarmac.  When I first arrived, there was a beautiful sunset behind the
mountains on the horizon past the runway, but in my fluster I didn't photograph
it.  This time around all we get is a view of the dusty distance.</p>
<p><img src="mexico_50_small.webp" alt="" /> </p>
<p>As compensation, here is another sunset.</p>
<p><img src="mexico_52_small.webp" alt="" /> </p>
<p>I invited Grace's parents over to the Airbnb for dinner.  Here we are having a
dessert of pineapple and mango with chamoy and tajín.  The main course was
again Grace's sun-dried tomato chicken and roasted potatoes, and my chicken
stew.  This time I put a little wine in the soup; I think it worked well.</p>
<p><img src="mexico_53_small.webp" alt="" /> </p>
<p><img src="mexico_54_small.webp" alt="" /> </p>
<p><img src="mexico_55_small.webp" alt="" /> </p>
<p>Grace saved the street food for the end of the trip.  Last night we went
driving in search of "street corn," or "elote," or "chascas."  Because it was a
notable historical figure's birthday, and because it was Sunday, most of the
street corn vendors were closed.  But not this one.</p>
<p><img src="mexico_56_small.webp" alt="" /> </p>
<p>I ordered... something.  It looks kind of like what I imagine the inside of an
animal looks like.</p>
<p><img src="mexico_57_small.webp" alt="" /> </p>
<p>It's primarily corn, but there's also cheese and bacon and mushrooms and stuff
<em>there's so much stuff</em>.</p>
<p>As if that weren't enough (Grace got a smaller dish), we ordered tacos when we
got back home.</p>
<p><img src="mexico_58_small.webp" alt="" /> </p>
<p><img src="mexico_59_small.webp" alt="" /> </p>
<p><img src="mexico_60_small.webp" alt="" /> </p>
<p>Tacos!</p>
<p>That's about it.  I checked my bag this time, because it now contains a cast
iron skillet (never leave a soldier behind) and a bottle of tequila.  Since you
were wondering, here's the accumulation of a month's worth of grocery
shopping.</p>
<p><img src="mexico_61_small.webp" alt="" /> </p>
<p>I kept the skillet and the tequila glasses, but the rest is for the next guy.
Except the pepper.  Grace's mom got the pepper.</p>
<p>We in no way finished the puzzle.</p>
<p><img src="mexico_62_small.webp" alt="" /> </p>
<p>Ahora, a Nueva York.</p>


        </body>
    </html></div></content></entry><entry><title>Mexico, Day 21</title><link href="https://www.davidgoffredo.com/mexico/mexico4.html" /><id>https://www.davidgoffredo.com/mexico/mexico4.html</id><updated>2021-03-14</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/mexico/mexico4.html" />
        </head>
        <body>
            <h1>Mexico, Day 21</h1>
<p><img src="mexico_35_small.webp" alt="" /> </p>
<p><img src="mexico_36_small.webp" alt="" /> </p>
<p><img src="mexico_37_small.webp" alt="" /> </p>
<p><img src="mexico_38_small.webp" alt="" /> </p>
<p>Cancún.</p>
<p><img src="mexico_39_small.webp" alt="" /> </p>
<p><img src="mexico_40_small.webp" alt="" /> </p>
<p>Can you find the bottled water?</p>
<p><img src="mexico_41_small.webp" alt="" /> </p>
<p>How about now?</p>
<p><img src="mexico_42_small.webp" alt="" /> </p>
<p>How about now?</p>
<p><img src="mexico_43_small.webp" alt="" /> </p>
<p>I didn't know that was there. I thought it strange that the maid ignored my
note requesting more water (nor did she take the pesos).  The perpetually hot
wood should have tipped me off.</p>
<p>It's nice by the beach.  The only trouble was that the water was mostly too
rough for swimming.  The lifeguard wouldn't allow it until later in the
afternoon, and even then you were likely to end up with a face full of sand
after the surf had its way with you.  I think the chop was on account of the
wind.</p>
<p><img src="mexico_44_small.webp" alt="" /> </p>
<p>We'd broil on the beach for a while late in the morning, and then head to one
of the pools to cool off.  Unlimited drinks everywhere.  They come around and
ask you what you want.  Is it noon yet?  I'll have a margarita, please.  The
guy with the box of cigars sells cocaine.  You can drink the tap water.  I
finally finished Mingus's autobiography.</p>
<p><img src="mexico_45_small.webp" alt="" /> </p>
<p>It's "all inclusive," so the only things you have to pay extra for are
bottles of wine (the house wine is unlimited), tips (optional), and I
suppose the cigars.  One glass of wine will knock Grace right on her ass, so
we just had what was included.  In four nights we never left the resort.
There are famous clubs, pyramids, and outdoor activities to be had beyond,
but did I mention the pool?  Next time.</p>
<p>The portions are small, so order double.  You already paid.</p>
<p><img src="mexico_46_small.webp" alt="" /> </p>
<p>We're currently aboard a Boeing 787-8 Dreamliner en route to Mexico City.  Then
back to Aguascalientes.</p>
<p><img src="mexico_47_small.webp" alt="" /> </p>
<p>You know those mornings when you wake up and ask yourself, "did somebody hire
a mariachi band last night?" Such is life.  The idea was that
Grace's mom would prepare cocktails for the four of us.  They were delicious.
We should have started much, much later in the day.  Next thing I know,
Manuel is a couple tequila shots in, talking excitedly on the phone.  Next
thing I know, I'm playing an ill fated game of chess with Grace's brother
(another Manuel, I blundered my bishop).  Next thing I know, a family friend
is making requests to the group of eight musicians who had been assembled in
the backyard.  They were quite good.  I do not have any pictures.  Here is my
last picture.</p>
<p><img src="mexico_48_small.webp" alt="" /> </p>
<p>These people are not drinkers, but perhaps I have a way of bringing out the
Irish within.  More likely, this they deemed a special occasion.  My personal
impromptu mariachi party.  The singers had trained voices, and the trumpets
were in tune.  Yes, they played "Cielito Lindo."  Of course they did.</p>
<p><em>Ayyyy yaaaay yah yahhhhhhh...</em></p>


        </body>
    </html></div></content></entry><entry><title>Mexico, Day 13</title><link href="https://www.davidgoffredo.com/mexico/mexico3.html" /><id>https://www.davidgoffredo.com/mexico/mexico3.html</id><updated>2021-03-06</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/mexico/mexico3.html" />
        </head>
        <body>
            <h1>Mexico, Day 13</h1>
<p>It's laundry day again.  This time I included two bath towels, so now all of
my clothes are covered in white lint.</p>
<p><img src="mexico_19a_small.webp" alt="" /></p>
<p>Aguascalientes doesn't fuck around with its sunsets.</p>
<p><img src="mexico_19b_small.webp" alt="" /> </p>
<p><img src="mexico_20_small.webp" alt="" /> </p>
<p>Yesterday, Grace, her parents, and I visited the town of <a href="https://en.wikipedia.org/wiki/Calvillo">Calvillo</a>.
Manuel drove us down from the stratosphere and across swaths of
characteristically Mexican landscape.</p>
<p><img src="mexico_21_small.webp" alt="" /> </p>
<p><img src="mexico_22_small.webp" alt="" /> </p>
<p>Calvillo has narrow streets lined with brightly colored buildings.  Some of
the streets (not pictured) were steeply inclined and reminded me of San
Francisco.</p>
<p><img src="mexico_23_small.webp" alt="" /> </p>
<p><img src="mexico_24_small.webp" alt="" /> </p>
<p><img src="mexico_25_small.webp" alt="" /> </p>
<p>We stopped for lunch at a nice outdoor restaurant attached to a hillside hotel.</p>
<p><img src="mexico_26a_small.webp" alt="" /> </p>
<p><img src="mexico_26b_small.webp" alt="" /> </p>
<p><img src="mexico_27_small.webp" alt="" /> </p>
<p>For a desert-dwelling Mexican, Grace does not much tolerate hot weather.  She
prefers a vampiric lifestyle.</p>
<p>I've been eating food, can you believe?</p>
<p>That morning I fried some leftover bacon for breakfast.</p>
<p><img src="mexico_28_small.webp" alt="" /></p>
<p>Previously, madre Graciela had prepared Manuel's favorite dish for us:
<a href="https://en.wikipedia.org/wiki/Chile_relleno">chile relleno</a>.  They are distantly related to the stuffed bell peppers
that my mom used to make, except fried with egg whites and filled with
minced meat.</p>
<p><img src="mexico_29_small.webp" alt="" /></p>
<p>Grace and I cooked a pasta/chicken/eggplant recipe of hers. There is still
some left over...</p>
<p><img src="mexico_30_small.webp" alt="" /></p>
<p>I improvised some chicken-with-leeks-over-pasta dish.  I got the wrong cut of
chicken from the supermarket, but it was edible nonetheless.  Grace had never
had leeks before.</p>
<p><img src="mexico_31_small.webp" alt="" /></p>
<p>I also cooked a big batch of my <a href="https://www.littlebroken.com/one-pot-chicken-stew/">chicken stew</a> last night, but I don't
have any pictures.</p>
<p>There's a tiny sorbet store of great renown near Grace's parents' place. She
got strawberry and I got tamarind.</p>
<p><img src="mexico_32_small.webp" alt="" /></p>
<p>The real culinary innovation of the trip so far is how to eat fruit.  In Mexico
there are two magical condiments that form a dyad of fruictific perfection:
<a href="https://en.wikipedia.org/wiki/Chamoy">chamoy</a> and <a href="https://en.wikipedia.org/wiki/Taj%C3%ADn_(seasoning)">tajín</a>.  They balance the sweetness of fruit with tart,
salty, and savory goodness.  Grace's favorite is on mango.</p>
<p><img src="mexico_33_small.webp" alt="" /></p>
<p>Here she is looking smug about her preparation of pineapple.</p>
<p><img src="mexico_34_small.webp" alt="" /></p>
<p>Speaking of food, it's one o'clock here and I haven't eaten today.  Let's put
that microwave to use.  ¡Adios!</p>


        </body>
    </html></div></content></entry><entry><title>Mexico, Day 8</title><link href="https://www.davidgoffredo.com/mexico/mexico2.html" /><id>https://www.davidgoffredo.com/mexico/mexico2.html</id><updated>2021-03-01</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/mexico/mexico2.html" />
        </head>
        <body>
            <h1>Mexico, Day 8</h1>
<p><img src="mexico_5_small.webp" alt="" /> </p>
<p><img src="mexico_6_small.webp" alt="" /> </p>
<p>I haven't done my own laundry in a while. In this arid climate, you hardly
even need to hang the clothes to dry.</p>
<p><img src="mexico_7_small.webp" alt="" /> </p>
<p><img src="mexico_8_small.webp" alt="" /> </p>
<p>The salmon came out well.  Luxurious though this stove may be, its lowest
setting is more flame than I'd like, so I'm learning how not to burn things.</p>
<p><img src="mexico_9_small.webp" alt="" /> </p>
<p>Grace and I ubered downtown in the afternoon to check things out. My
favorite moment was when we sat at a small cafe table outside in a "codo" of
shops under the shade of some large trees. I don't have a picture of it. I
had a small vanilla ice cream and Grace had <a href="https://en.wikipedia.org/wiki/Churro">churros</a>.  Grace managed to
get pooped on by one of the birds above. She was momentarily inconsolable.</p>
<p><img src="mexico_10_small.webp" alt="" /> </p>
<p><img src="mexico_11_small.webp" alt="" /> </p>
<p><img src="mexico_12_small.webp" alt="" /> </p>
<p><img src="mexico_13_small.webp" alt="" /> </p>
<p>After downtown, we had a 5:00 dinner date with Grace's parents. The menu was
<a href="https://en.wikipedia.org/wiki/Carne_asada">carne asada</a> and "tacos gorda," an invention of Grace's.  They call her
"Gorda" because she was a fat baby, and because Mexicans have a habit of
choosing contrary nicknames.</p>
<p><img src="mexico_14_small.webp" alt="" /> </p>
<p>Tacos Gorda contain slices carne asada with grilled buttered potatoes and carmelized onions, together in a tortilla with <a href="https://en.wikipedia.org/wiki/Salsa_verde">salsa verde</a>.  They're so good.</p>
<p>After some wine and some beer, we switched to tequila.  Things got festive.
This is how Grace's mother, Graciela, reacts when you point a camera at her
and say "¡Oye, bonita!"</p>
<p><img src="mexico_15_small.webp" alt="" /> </p>
<p>Here she is with her husband, Manuel.</p>
<p><img src="mexico_16_small.webp" alt="" /> </p>
<p>Here's Grace and yours truly.</p>
<p><img src="mexico_17_small.webp" alt="" /> </p>
<p>After dinner, we put away the picnic table and moved into the kitchen to play
dominoes.  Can you believe that I'd never played before?  There was more
tequila, or as Grace called it, "truth serum."  Grace's mom is quick with
arithmetic.</p>
<p>The following morning I was "crudo," but the tequila must have been of very
high quality, because I felt well by 11 AM, a personal record.</p>
<p>The following afternoon we hung out at Grace's parents' again, this time
listening to Grace's newly bought The Police vinyls, and then a round of
<a href="https://en.wikipedia.org/wiki/Pictionary">Pictionary</a>.  I like them.</p>
<p>Try playing Pictionary in Spanish.</p>
<p>I will not run out of water.</p>
<p><img src="mexico_18_small.webp" alt="" /> </p>
<p>¡Hasta la proxima vez!</p>


        </body>
    </html></div></content></entry><entry><title>Mexico, Day 5</title><link href="https://www.davidgoffredo.com/mexico/mexico1.html" /><id>https://www.davidgoffredo.com/mexico/mexico1.html</id><updated>2021-02-26</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/mexico/mexico1.html" />
        </head>
        <body>
            <h1>Mexico, Day 5</h1>
<p><img src="mexico_1_small.webp" alt="" /></p>
<p>An electric fence tops the walls surrounding my neighborhood.  Presumably
this is to keep bad people out, but I can't leave unless the man at the gate
allows it.  Then again, he is unarmed, and short, and friendly.</p>
<p>This is my fourth full day here, and I'm happy to report that I've so far
done <em>nothing much</em>. Yesterday we went over to Grace's parents' place for a
dinner of sopa de tortilla, and listened to some records in her father's
studio man cave. We sipped fancy tequila. Otherwise I've been hanging out at
my sunny three bedroom house inside the castle walls, occasionally venturing
out to a restaurant or cafe. There's a big screen TV and a 1000-piece
puzzle. I'm becoming fond of my morning ritual of coffee and computer in the
backyard.</p>
<p><img src="mexico_2_small.webp" alt="" /></p>
<p>Bottled water is the way to go, but for making coffee you can get away with
boiling the tap for a while.  Once the water cools, there's a slick of
precipitated minerals on top, and it smells slightly of sulfur.  No wonder
the coffee tasted bland; this morning I used bottled water and it was much
improved.</p>
<p><img src="mexico_3_small.webp" alt="" /></p>
<p>I didn't realize until yesterday that Aguascalientes sits at an elevation of
over 6000 feet (1888 meters).  I've been to Aspen before, where altitude
sickness is unavoidable, whereas here I just felt a little winded and thirsty.</p>
<p>It's a veritable desert, but February is "Winter," so it's not too hot
during the day nor cold at night.  Don't forget to drink lots of water (but
<em>don't drink the water</em>).</p>
<p>My growing list of Mexican foodstuffs:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Chilaquiles">chilaquiles</a></li>
<li><a href="https://en.wikipedia.org/wiki/Taco">tacos</a></li>
<li><a href="https://en.wikipedia.org/wiki/Tortilla_soup">sopa de tortilla</a></li>
</ul>
<p>I also had a chili hamburger that was the fucking bomb. Oh, and an "Italian"
restaurant. And Grace's sun-dried tomato chicken with potatoes. I've been
eating food, basically. Welcome to Mexico.</p>
<p>This afternoon we'll head to the supermarket again so I can attempt my salmon
recipe.  Then later we'll take a walk downtown.  Originally I planned to stay
for a week or two, but now I'm staying for a month.  For $40 per day, where
else would I be?  Hasta luego...</p>
<p><img src="mexico_4_small.webp" alt="" /></p>


        </body>
    </html></div></content></entry><entry><title>The Language That I Think I Want</title><link href="https://www.davidgoffredo.com/language-notes.html" /><id>https://www.davidgoffredo.com/language-notes.html</id><updated>2020-04-15</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/language-notes.html" />
        </head>
        <body>
            <pre><code class="hljs">(<span class="hljs-name">define</span> sum
  (λ (<span class="hljs-name">args</span> ...)
    (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> args ...)))

(<span class="hljs-name">define</span> (<span class="hljs-name"><span class="hljs-builtin-name">sum</span></span> args ...)
  (<span class="hljs-name"><span class="hljs-builtin-name">+</span></span> args ...))

(<span class="hljs-name">define-as</span> (<span class="hljs-name">list</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> third _ ...) (<span class="hljs-name">something</span> <span class="hljs-string">"foo"</span>))

{key value key2 value2}

[value value2 value3]

(<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> (<span class="hljs-name">foo</span> bar
      baz buzz)
  whatever)

(<span class="hljs-name">match</span> value
  pattern template
  pattern2 template2)
</code></pre>
<h1>The Language That I Think I Want</h1>
<ul>
<li>but probably don't</li>
<li>and certainly don't need</li>
</ul>
<p>I'm one of those nerds who likes to opine about programming languages.</p>
<p>From an industry perspective, it's an all-too-common Big Waste of Time, but boy
is it fun.  It's like having strong opinions about fonts, except that the
fonts can move mountains.  Digital mountains, of course.</p>
<h2>Observations</h2>
<ul>
<li>Scheme is all anybody needs, but it sucks to always start from scratch</li>
<li>C is all anybody needs, but it sucks to always start from scratch</li>
<li>Go is all anybody needs, but it sucks to always start from scratch<ul>
<li>Well, that's not so fair.  Go has a useful standard library.</li>
<li>I know that complaining about the lack of generics is a cliche<ul>
<li>but come on!</li>
<li>won't even compare lists, that's where I draw the line</li>
</ul>
</li>
</ul>
</li>
<li>Maybe I should try OCaml.  They've been telling me for years...</li>
<li>Programming languages grow in scope and complexity as they age<ul>
<li>embrace it, simplicitly is dead!</li>
<li>maybe FORTRAN '22 <em>should</em> have built-in SMTP.  Might be useful!</li>
</ul>
</li>
</ul>
<h2>Aims</h2>
<p>The <em>reason</em> for this exercise is to end up at:</p>
<pre><code class="hljs"><span class="hljs-variable">$</span> mkdir solveproblem
<span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> solveproblem
<span class="hljs-variable">$</span> vim somefile.language
[<span class="hljs-type">...</span> <span class="hljs-type">write</span> <span class="hljs-type">a</span> <span class="hljs-type">small</span> <span class="hljs-type">amount</span> <span class="hljs-type">of</span> <span class="hljs-type">non</span>-<span class="hljs-type">arcane</span> <span class="hljs-type">code</span> <span class="hljs-type">...</span>]
<span class="hljs-variable">$</span> sometool
<span class="hljs-variable">$</span> ./solveproblem
<span class="hljs-variable">$</span> xdg<span class="hljs-literal">-open</span> beer
</code></pre>
<p>Maybe you're thinking "Perl."  I'm thinking more of something:</p>
<ul>
<li>Like Scheme, but borrowing some conveniences from Clojure:<ul>
<li>literal data structures (vectors, lists, dictionaries, sets)</li>
<li>immutable by default</li>
<li>fewer parentheses</li>
<li>no cons cells</li>
<li><strong>functions act on interfaces, not on concrete types</strong></li>
</ul>
</li>
<li>Scheme is so good because regular syntax, homoiconic, programmable...<ul>
<li>... blah blah BLAH DRINK THIS KOOL-AID</li>
<li>let's be honest, we're just doing this for the parentheses</li>
<li>so smooth, aesthetically pleasing, perfectly balanced, very nice</li>
</ul>
</li>
<li>More pattern matching:<ul>
<li>in function definitions, let bindings</li>
<li>like ES6 destructuring, but with Scheme's pattern matching</li>
</ul>
</li>
<li>File system based packages, maybe something like in Python<ul>
<li>no special <code>tool init</code>, no special <code>.module</code>, etc.</li>
</ul>
</li>
<li>Reduced variety of primitive types<ul>
<li>only one type of number (decimal!), one text encoding, no char</li>
<li>scary compatibility and performance implications, YOLO!</li>
</ul>
</li>
<li>Hygienic macro system, maybe something like Racket's syntax-parse</li>
<li>"Batteries included" library support, e.g.:<ul>
<li>POSIX equivalents (a lot: file systems, sockets, clock, poll, etc.)</li>
<li>Python-compatible regular expressions</li>
<li>random number generation</li>
<li>... maybe what I want is just <a href="https://docs.hylang.org/en/stable/">Hy</a> :)<ul>
<li>or <a href="https://github.com/anmonteiro/lumo">ClojureScript on node</a>?<ul>
<li>I'll do a project in those languages first...</li>
</ul>
</li>
</ul>
</li>
<li>command line parsing</li>
<li>all the algorithms (e.g. STL)</li>
<li>database inter-op</li>
<li>sqlite (life is too short not to have sqlite)</li>
</ul>
</li>
<li>a simple, non-opaque system for record types and interfaces<ul>
<li>maybe like Go, or maybe just use duck typing (like Python)</li>
<li>Crockford's "class-free object oriented programming" is tempting,
except that I think a checked interface (whether dynamic or static)
is beneficial enough to be part of the language.</li>
</ul>
</li>
<li>date/time and time zones that just work and don't let you get it wrong<ul>
<li>ISO-8601 built in</li>
</ul>
</li>
<li>built-in concurrency<ul>
<li>Go's approach is so compelling, I think that's the way</li>
<li>might be better suited as a library, like Guile's fibers.  Not sure.<ul>
<li>oh yeah, and if we do CSP, let it be based on CML</li>
</ul>
</li>
</ul>
</li>
<li>macros or special syntax for comprehensions<ul>
<li>Racket's <code>(for/list ...)</code>  is pretty good.  Maybe even more concise.</li>
<li>hard to do better than Python or Haskell style comprehensions</li>
</ul>
</li>
</ul>
<h2>TBD</h2>
<ul>
<li>How much like Scheme with regard to control flow?<ul>
<li>call/cc?</li>
<li>dynamic-unwind?</li>
<li>maybe something more like exceptions?</li>
<li>or maybe errors as values? (e.g. Go)</li>
<li>or maybe dedicated error syntax as <em>part</em> of the call syntax?<ul>
<li>what could that look like?</li>
</ul>
</li>
</ul>
</li>
<li>assertions?</li>
<li>foreign function interface?</li>
<li>"unsafe" library? (for memory access, syscalls, etc. a la Go)</li>
</ul>
<h2>Conclusions</h2>
<ul>
<li>There's nothing new here, really.</li>
<li>This synthesis is probably not going to produce anything substantially
better than what's currently available, except that it will all fit in
my head (and nobody else's).</li>
<li>Maybe I should just pick a subset of Racket and write in that<ul>
<li>or, HEY, I could implement all of this as a Racket <code>#lang</code></li>
<li>that'd be a worthwhile exercise all on its own</li>
<li>🤩</li>
<li>it's the <a href="http://winestockwebdesign.com/Essays/Lisp_Curse.html">lisp curse</a>!</li>
</ul>
</li>
</ul>


        </body>
    </html></div></content></entry><entry><title>The Thrush Combinator</title><link href="https://www.davidgoffredo.com/thrush.html" /><id>https://www.davidgoffredo.com/thrush.html</id><updated>2020-03-24</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/thrush.html" />
        </head>
        <body>
            <h1>The Thrush Combinator</h1>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">const</span> thrush = <span class="hljs-function">(<span class="hljs-params">value, func, ...funcs</span>) =&gt;</span>
    func ? thrush(func(value), ...funcs) : value;
</code></pre>
<p>I was looking up how I've <a href="https://github.com/dgoffredo/llama/blob/master/bin/llama.js">previously</a> used <a href="https://requirejs.org/">requirejs</a> and noticed the
function definition above.</p>
<p>Some call this the <a href="https://www.google.com/search?q=thrush+combinator">thrush combinator</a>, though I don't know if it's really
a thing.  It has nothing to do with <a href="https://en.wikipedia.org/wiki/Linear_gingival_erythema">HIV</a>.</p>
<p>The idea is that you have an initial value on which you want to perform a
sequence of transformations.  For example, in a UNIX shell, you might write</p>
<pre><code class="lang-console hljs"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> foobar | tr i x | sed <span class="hljs-string">'s/./\0\n/g'</span> | sort | uniq -c | sort -rn | head -1</span>
      2 o
</code></pre>
<p>In programming languages with function invocation syntax, you might write</p>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">const</span> result = finally_this(and_then_this(then_this(do_this(initial_data))))
</code></pre>
<p>The order in which those functions are applied reads right-to-left:</p>
<ol>
<li>You start with <code>initial_data</code>,</li>
<li>then you apply <code>do_this</code> to <code>initial_data</code>,</li>
<li>then you apply <code>then_this</code> to the result of (2),</li>
<li>then you apply <code>and_then_this</code> to the result of (3),</li>
<li>then you apply <code>finally_this</code> to the result of (4),</li>
<li>and then (5) is the answer.</li>
</ol>
<p><code>thrush</code> allows you to rewrite that expression in the following way:</p>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">const</span> result =
    thrush(initial_data, do_this, then_this, and_then_this, finally_this);
</code></pre>
<p>That looks more like the shell pipeline.  It also looks like a sequence of
statements in an imperative programming language, where there is an implicit
<a href="https://en.wikipedia.org/wiki/Sequence_point">sequence point</a> after each function invocation:</p>
<pre><code class="hljs">declare initial_data<span class="hljs-comment">;</span>
do_this()<span class="hljs-comment">;</span>
then_this()<span class="hljs-comment">;</span>
and_then_this()<span class="hljs-comment">;</span>
finally_this()<span class="hljs-comment">;</span>
</code></pre>
<p>In programming languages with objects and methods, this is sometimes expressed
as a chain of method invocations and called a <a href="https://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a>:</p>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">const</span> result =
    initial_data.do_this().then_this().and_then_this().finally_this();
</code></pre>
<p>That's often formatted vertically to give an imperative feel:</p>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">const</span> result =
    initialdata
    .do_this()
    .then_this()
    .and_then_this()
    .finally_this();
</code></pre>
<p>Clojure has a macro version of the thrush combinator, spelled <a href="https://en.wikipedia.org/wiki/Fluent_interface">-&gt;</a>, and
confusingly called the "threading macro":</p>
<pre><code class="lang-clojure hljs">(<span class="hljs-keyword">def</span> <span class="hljs-title">result</span>
  (<span class="hljs-name"><span class="hljs-builtin-name">-&gt;</span></span> initial-data do-this then-this and-then-this finally-this))
</code></pre>
<p>Getting back to the Javascript implementation from before:</p>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">const</span> thrush = <span class="hljs-function">(<span class="hljs-params">value, func, ...funcs</span>) =&gt;</span>
    func ? thrush(func(value), ...funcs) : value;
</code></pre>
<p>Isn't it cool how that works?  Maybe it's clearer with less syntax, in
<a href="https://racket-lang.org/">Racket</a>:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name"><span class="hljs-builtin-name">define</span></span> (<span class="hljs-name">thrush</span> value . funcs)
  (<span class="hljs-name"><span class="hljs-builtin-name">if</span></span> (<span class="hljs-name">empty?</span> funcs)
    value
    (<span class="hljs-name"><span class="hljs-builtin-name">apply</span></span> thrush (<span class="hljs-name"><span class="hljs-builtin-name">cons</span></span> ((<span class="hljs-name">first</span> funcs) value) (<span class="hljs-name">rest</span> funcs)))))
</code></pre>
<p>Yuck, that didn't help at all.  Maybe pattern matching will help.  How about
this?</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name"><span class="hljs-builtin-name">define</span></span> thrush
  (<span class="hljs-name">match-lambda*</span>
    [(<span class="hljs-name"><span class="hljs-builtin-name">list</span></span> value) value]
    [(<span class="hljs-name"><span class="hljs-builtin-name">list</span></span> value func funcs ...) (<span class="hljs-name">thrush</span> (<span class="hljs-name">func</span> value) funcs ...)]))
</code></pre>
<p>Getting better?  Maybe it's clearer as a pattern matching <em>macro</em> instead of as
a function:</p>
<pre><code class="lang-scheme hljs">(<span class="hljs-name"><span class="hljs-builtin-name">define-syntax</span></span> thrush
  (<span class="hljs-name"><span class="hljs-builtin-name">syntax-rules</span></span> ()
    [(<span class="hljs-name">thrush</span> value) value]
    [(<span class="hljs-name">thrush</span> value func funcs ...) (<span class="hljs-name">thrush</span> (<span class="hljs-name">func</span> value) funcs ...)]))
</code></pre>
<p>They're really very similar, aren't they?</p>
<p>This makes me wonder what a horrid affair this would be in C++.  Let's try it:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-function">Value&amp;&amp; <span class="hljs-title">thrush</span><span class="hljs-params">(Value&amp;&amp; value)</span> </span>{
    <span class="hljs-keyword">return</span> std::forward&lt;Value&gt;(value);
}

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value, <span class="hljs-keyword">typename</span> Func, <span class="hljs-keyword">typename</span> ... Funcs&gt;
<span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">thrush</span><span class="hljs-params">(Value&amp;&amp; value, Func&amp;&amp; func, Funcs&amp;&amp;... funcs)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">thrush</span>(<span class="hljs-built_in">func</span>(std::forward&lt;Value&gt;(value)),
                  std::forward&lt;Funcs&gt;(funcs)...);
}
</code></pre>
<p>The <code>auto</code> function with a deduced return type (i.e. without a trailing return
type) is a C++14 feature.  You know, if it weren't for the <code>std::forward</code>
noise, this would be nearly as clean as the Racket code.  Maybe we can omit the
<code>std::forward</code> calls and it will only matter sometimes.  What do I know?  Let's
see what that looks like:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value&gt;
<span class="hljs-function">Value <span class="hljs-title">thrush</span><span class="hljs-params">(Value&amp;&amp; value)</span> </span>{
    <span class="hljs-keyword">return</span> value;
}

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Value, <span class="hljs-keyword">typename</span> Func, <span class="hljs-keyword">typename</span> ... Funcs&gt;
<span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">thrush</span><span class="hljs-params">(Value&amp;&amp; value, Func&amp;&amp; func, Funcs&amp;&amp;... funcs)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">thrush</span>(<span class="hljs-built_in">func</span>(value), funcs...);
}
</code></pre>
<p>Hot damn!  What about using <code>class</code> instead of <code>typename</code>?</p>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Value</span>&gt;</span>
<span class="hljs-function">Value <span class="hljs-title">thrush</span><span class="hljs-params">(Value&amp;&amp; value)</span> </span>{
    <span class="hljs-keyword">return</span> value;
}

<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Value</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">Func</span>, <span class="hljs-keyword">class</span> ... <span class="hljs-title">Funcs</span>&gt;</span>
<span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">thrush</span><span class="hljs-params">(Value&amp;&amp; value, Func&amp;&amp; func, Funcs&amp;&amp;... funcs)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">thrush</span>(<span class="hljs-built_in">func</span>(value), funcs...);
}
</code></pre>
<p>That's pretty good.  The last thing I'd do is make the first overload <code>auto</code>,
even though it doesn't save us much.  It makes the two overloads more
consistent:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Value</span>&gt;</span>
<span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">thrush</span><span class="hljs-params">(Value&amp;&amp; value)</span> </span>{
    <span class="hljs-keyword">return</span> value;
}

<span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Value</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">Func</span>, <span class="hljs-keyword">class</span> ... <span class="hljs-title">Funcs</span>&gt;</span>
<span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">thrush</span><span class="hljs-params">(Value&amp;&amp; value, Func&amp;&amp; func, Funcs&amp;&amp;... funcs)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">thrush</span>(<span class="hljs-built_in">func</span>(value), funcs...);
}
</code></pre>
<p>Not too shabby.  Still can't beat Javascript, though.</p>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">const</span> thrush = <span class="hljs-function">(<span class="hljs-params">value, func, ...funcs</span>) =&gt;</span>
    func ? thrush(func(value), ...funcs) : value;
</code></pre>
<p>What about in <a href="https://golang.org/">Go</a>?  Forget it.</p>


        </body>
    </html></div></content></entry><entry><title>India, Day 15</title><link href="https://www.davidgoffredo.com/india/india6.html" /><id>https://www.davidgoffredo.com/india/india6.html</id><updated>2019-10-04</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/india/india6.html" />
        </head>
        <body>
            <h1>India, Day 15</h1>
<p>They have Jesus in Kerala.</p>
<p><img src="india6_66_small.webp" alt="" /></p>
<p>Christianity, Islam, and Hinduism simmer together in the region like mismatched
spices in some yogurt dish.  There's even a synagogue.  And a bronze chicken.</p>
<p><img src="india6_50_small.webp" alt="" /></p>
<p>For comparison, here are real chickens.</p>
<p><img src="india6_17_small.webp" alt="" /></p>
<p>We began our long descent from the mountains at eight o'clock.  Arun insisted
that we be ready to go by seven, which we were.  With eight milligrams of
loperamide in my stomach, I was a rock, a clogged sink.</p>
<p><img src="india6_1_small.webp" alt="" /></p>
<p>Arun didn't read into Vineet's regular requests to turn down the music, but
I didn't mind.  It was like a cooking show travel montage.</p>
<p>We stopped for breakfast in a homey outdoor cafe.  I ordered the smallest thing
on the menu.</p>
<p><img src="india6_2_small.webp" alt="" /></p>
<p><img src="hat_small.webp" alt="" /></p>
<p>I liked the place.  Also, I found myself liking the people in Kerala generally.
It was probably because they were not yelling at me to give them money.  Or
maybe they're better looking.  The cashier girl at the airport KFC just would
not stop smiling.</p>
<p>Have you ever wondered how to tell if a restaurant is classy?  I've developed
a diagnostic that you can use.  If there is a sign in the bathroom forbidding
vomiting in the sink, then the restaurant has at least two Michelin stars.</p>
<p><img src="india6_3_small.webp" alt="" /></p>
<p>My pancake volcano caused no discomfort.</p>
<p><img src="india6_4_small.webp" alt="" /></p>
<p>Car hopping from place to place to see the sights worked for Delhi, Agra, and
Jaipur.  In Kerala, however, it seemed excessive.  Aside from sleeping at
night, we spent by far the most of our time in the car going somewhere or the
other.  Six of us and the driver, hobbled into a four wheel drive barreling
around mountains on partially paved, nearly lawless roads.  You'd be
hard-pressed to read a book or take a picture of something out the window.  But
with Bollywood blaring, it had its own charm.</p>
<p>The better way to do Kerala is slowly.  Our hotel offered complimentary
bicycles.  There are interesting flowers and critters everywhere.  It's quiet.</p>
<p>Things finally slowed down when we reached the <a href="https://en.wikipedia.org/wiki/Kerala_backwaters">backwaters</a> of Alleppey.</p>
<p><img src="india6_5_small.webp" alt="" /></p>
<p>There we boarded a big ol' houseboat just for us six and the three crew.</p>
<p><img src="india6_14_small.webp" alt="" /></p>
<p>There was a helmsman,</p>
<p><img src="india6_7_small.webp" alt="" /></p>
<p>a cook,</p>
<p><img src="india6_39_small.webp" alt="" /></p>
<p>and one other crew member who I didn't see much of.</p>
<p>Here is a small diaspora of Australians.  From left to right it's Shaun,
Janice, and Kho Yin, who they call Kho.</p>
<p><img src="india6_12_small.webp" alt="" /></p>
<p>When not wrestling crocodiles or boxing kangaroos, some Australians do yoga.</p>
<p><img src="india6_13_small.webp" alt="" /></p>
<p>The houseboat cruises down the river, and everybody just hangs out.  Later that
evening we played charades on the upper deck.</p>
<p>Before dinner, we stopped at the shore of the river to take a walk and see the
sunset across a rice field.</p>
<p><img src="india6_15_small.webp" alt="" /></p>
<p><img src="india6_20_small.webp" alt="" /></p>
<p><img src="india6_19_small.webp" alt="" /></p>
<p>The cook prepared excellent food for us.  It was "home style" Kerala cooking,
rather than the restaurant buffet northern Indian food we had been inundated
with until that point.  He would occasionally bring out coconuts for us to
drink from, or pineapple slices, and plenty of masala chai.</p>
<p><img src="food_small.webp" alt="" /></p>
<p>I think Janice took that photo.</p>
<p>While we were charading upstairs, a crew member discreetly turned on the air
conditioners in each of our rooms, so that when we retired at ten o'clock,
our beds were comfortably cool.</p>
<p>I woke up early, but not as early as the crows.  Morning on the river is for
the crows.  I observed them from the upper deck until the Australians arose.</p>
<p><img src="india6_26_small.webp" alt="" /></p>
<p><img src="india6_27_small.webp" alt="" /></p>
<p><img src="india6_28_small.webp" alt="" /></p>
<p>Without a beast in sight for wrestling, more yoga was sought as a substitute.</p>
<p><img src="india6_29_small.webp" alt="" /></p>
<p>The rest of the morning was another leisurely cruise down the river, until we
once again reached the shore and were picked up by our driver.</p>
<p><img src="india6_32_small.webp" alt="" /></p>
<p>It's a couple hours' drive back to Kochi, where the airport is, but we had more
time to kill, so on our last day in Kerala we did some more sightseeing.  This
included a very full museum of <em>stuff</em> including prehistoric cutting tools,
nude portraits, bronze chickens, life-sized crucified Jesuses, and a pantheon
of Hindu gods carved into an ornate wooden ceiling.</p>
<p><img src="india6_47_small.webp" alt="" /></p>
<p><img src="india6_45_small.webp" alt="" /></p>
<p><img src="india6_44_small.webp" alt="" /></p>
<p>Then we went to a fishery where nets are lowered into the water on giant
levers.  After a couple of minutes, the lever is pulled upright again, and
the resulting catch hangs in the net just above the water.  Or, as was the case
demonstrated to us, nothing ends up in the net just above the water.  Fishing
season is not until later in the year.</p>
<p>These are called Chinese fishing nets.</p>
<p><img src="india6_55_small.webp" alt="" /></p>
<p><img src="india6_54_small.webp" alt="" /></p>
<p><img src="india6_56_small.webp" alt="" /></p>
<p>We then stopped by God's house to say hello.</p>
<p><img src="india6_63_small.webp" alt="" /></p>
<p><img src="india6_64_small.webp" alt="" /></p>
<p>No photography inside God's house.  I recognized all but one of the depictions
inside.  There was of course our boy J-Unit, his mom, his baptism by John,
etc., etc., but also there was this Hindu-looking guy on a horse.  I didn't
learn about him in school.  Dude on a horse, in a church.  He was depicted in
both the smaller old chapel and in the cavernous new one.</p>
<p>Our last stop was a very fancy shopping mall.  I had chicken fried rice and
Vineet got some new kicks.</p>
<p><img src="india6_67_small.webp" alt="" /></p>
<p>After the mall, Arun dropped us off at the airport so we could catch a direct
flight back to Delhi.  I cabbed with Asha and Vineet, since I would stay the
night at a hotel near where they're staying, or so we thought.  We accidentally
booked the wrong hotel, and so made a couple of last minute re-bookings from
the cab after midnight, which added to the flavor.  The keeper at our first
stop recommended we go across the street, where the air conditioning is
working.  After tipping our patient cab driver, I gratefully accepted a room
with a working air conditioner, hot shower, and flushing toilet.  Not sure
exactly where I was.</p>
<p>The next morning, my pocket elephant alerted me to a possible source of water
damage.  Condensation from the vents of the air conditioner dripped onto the
television and into the cable box.  Using his trunk as a tiny siphon, the
elephant carefully moved the puddle into a drinking glass, and then, bending
forward like a beast of burden, pushed the glass with his head until it was
positioned below the leak.</p>
<p><img src="india6_68_small.webp" alt="" /></p>
<p>I showered and then went down to have the complimentary breakfast, which was
fine.  There was a man with his two kids, and then later two Indian business
travelers came in speaking English.</p>
<p>The rest of the day I spent hanging out at Vineet's parents' place.  I sat on
their couch working on this blog, learned how to make tea the Ahuja way, and
later met Asha's friend and former coworker Melissa, who would continue to
travel around India after we left that night.</p>
<p>We got lunch with the Australians one last time, walked through a neighborhood
market near Vineet's place, and later that night departed for the airport.</p>
<p>I woke up at around eight o'clock AM Delhi time, Friday, October 4th, and it is
now six o'clock PM New York time, Saturday, October 5th.  Don't be tempted by
night flights, people.</p>
<p>That's it for my first India trip.  I think I'll return someday, next time
adjusting a few knobs:  fewer tours, more people;  less driving, more
wandering;  less airport, more nature.</p>
<p><img style="width: 200px;" src="hindi.png" /></p>


        </body>
    </html></div></content></entry><entry><title>India, Day 13</title><link href="https://www.davidgoffredo.com/india/india5.html" /><id>https://www.davidgoffredo.com/india/india5.html</id><updated>2019-10-02</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/india/india5.html" />
        </head>
        <body>
            <h1>India, Day 13</h1>
<p><img src="india5_28_small.webp" alt="" /></p>
<p>One of the unsung advantages of having acute diarrhea is the ability to use the
little flush button instead of the big one.  As you can imagine, I've been
spending plenty of time reading about the properties of loperamide.  For
example, did you know that in addition to slowing the activity of the bowel,
loperamide also "increases the tone of the anal sphincter"?  It's not as
exciting as it sounds.</p>
<p>I'm grateful for the chemically enhanced tone, though, because I think that
I have never had an experience more primal, more urgent, more deeply spiritual
and foundation-shaking than the five hour ride from the Kochi airport to our
hotel in the mountains.  I discovered new things about nature, pain, control,
perseverance, the human condition, and my anus.</p>


<p>I regretted not having packed a spade (or a gun), it was that bad.  I'm
currently rather medicated, but I think the worst is behind me anyway.  Enough
about that.</p>
<p>I'm on a boat!  But first, the mountains.</p>
<p><img src="india5_29_small.webp" alt="" /></p>
<p>That's the view from my room.  <em>My</em> room.  Here's the view from the shower.</p>
<p><img src="india5_32_small.webp" alt="" /></p>
<p>Yes, the shower.  Maybe it's so that you can get natural light into the
bathroom during the day, or maybe people in Kerala like to watch each other
wash.</p>
<p>We got a tour of a tea factory, but photography was not allowed inside.  It's
a shame, too, because the facility was way cool.</p>
<p><img src="india5_36_small.webp" alt="" /></p>
<p>Next to the factory was a "museum".  The items exhibited included:</p>
<ul>
<li>a brick</li>
<li>a porcelain bathtub</li>
<li>a VCR</li>
<li>an aspee bolo motorized knapsack mist blower cum duster</li>
</ul>
<p>What, you think I made one up?</p>
<p><img src="india5_37_small.webp" alt="" /></p>
<p>There were some nice views from the factory grounds.</p>
<p><img src="india5_41_small.webp" alt="" /></p>
<p><img src="india5_40_small.webp" alt="" /></p>
<p><img src="india5_48_small.webp" alt="" /></p>
<p><img src="india5_45_small.webp" alt="" /></p>
<p>With Asha for scale.</p>
<p>On the way to the hotel, we stopped for lunch at an outdoor restaurant.</p>
<p><img src="india5_4_small.webp" alt="" /></p>
<p>Was I inoculated here?  Or was it the dumplings I had some hours earlier at the
airport (they at least were freshly boiled)?  I don't know, but when the owner
saw my confusion as I looked at my plate, he asked "serve?"  I said, "no, I
need a fork."  This seemed new to him.  He hurried to the back and I saw him
digging through something and then what looked like vigorous rubbing.  Should
have eaten with my hands.</p>
<p>Munnar is a heavily wooded jungle-like mountainous area.  The roads are
treacherous and the beauty is extreme.  Clouds float at arms length in the
valleys below, and occasionally rise to engulf everything in a thick fog, which
depending on whether the sun is shining, is either a cool mist or an intense
sauna.</p>
<p><img src="india5_8_small.webp" alt="" /></p>
<p>Here is our driver, Arun, and one of our traveling companions, Shaun (and some
other guy):</p>
<p><img src="india5_14_small.webp" alt="" /></p>
<p>Arun stopped at a couple of waterfalls by the roadside.</p>
<p><img src="india5_15_small.webp" alt="" /></p>
<p><img src="india5_12_small.webp" alt="" /></p>
<p>Leave no stone untrashed.</p>
<p>The area surrounding the hotel is all tea plantations.</p>
<p><img src="india5_53_small.webp" alt="" /></p>
<p><img src="india5_54_small.webp" alt="" /></p>
<p>That's what tea looks like.  Now you know.</p>
<p>One of our activities was to walk up a hill in a national park.  Something
about an endangered antelope deer thing.  Didn't see any.  It was raining,
though, which allowed more interesting pictures.</p>
<p><img src="india5_67_small.webp" alt="" /></p>
<p><img src="india5_60_small.webp" alt="" /></p>
<p><img src="india5_64_small.webp" alt="" /></p>
<p>Bear in mind that if I were to relax even for a moment, dark toxic sludge would
explode into my pants.</p>
<p>Here's a cat.</p>
<p><img src="india5_73_small.webp" alt="" /></p>
<p>Our last stop was fittingly a dam <em>about to burst</em>:</p>
<p><img src="india5_80_small.webp" alt="" /></p>
<p><img src="india5_82_small.webp" alt="" /></p>
<p>We got back to the hotel before 7 PM, and I immediately slept.  I woke up at
midnight, drank some water, and slept again until 6 AM.</p>
<p>The view in the morning is even better.</p>
<p><img src="india5_83_small.webp" alt="" /></p>
<p>Then it was another five hour drive, this time into the backwaters.</p>
<p><img style="width: 200px;" src="hindi.png" /></p>


        </body>
    </html></div></content></entry><entry><title>India, Day 10</title><link href="https://www.davidgoffredo.com/india/india4.html" /><id>https://www.davidgoffredo.com/india/india4.html</id><updated>2019-09-29</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/india/india4.html" />
        </head>
        <body>
            <h1>India, Day 10</h1>
<p><img src="india4_23_small.webp" alt="" /></p>
<p>He didn't get left behind, after all.  It should have occurred to me earlier
to search for the marble elephant in a marble room.</p>
<p><img src="india4_26_small.webp" alt="" /></p>
<p>Asha and Vineet are now married.  They were already married, but now they still
are.</p>
<p>Here was my view of the beginning of the ceremony:</p>
<p><img src="india4_34_small.webp" alt="" /></p>
<p>After a while, the staff began bringing in chairs, so by remaining standing I
got a better view of what was going on.  Asha and Vineet were sitting on a
bench opposite a small fire.  On the other side was a priest with a microphone.</p>
<video controls="true" width="700">
  <source src="havan.mp4" type="video/mp4" />
</video><p>I should mention that the wedding couple are not visible in the video (they're
off to the left), and that the shaking image is due to coffee.</p>
<p>This ritual likely had a deep significance for a few attending, but not for the
bride or groom.</p>
<p><img src="india4_35_small.webp" alt="" /></p>
<p>At Indian weddings, women have <a href="https://en.wikipedia.org/wiki/Henna">henna</a> drawn on their bodies in a style
known as <a href="https://en.wikipedia.org/wiki/Mehndi">mehndi</a>.  Here is Asha the bride:</p>
<p><img src="india4_17_small.webp" alt="" /></p>
<p>Here is Asha the cat:</p>
<p><img src="asha3_small.webp" alt="" /></p>
<p>The mehndi artist applies the henna as a paste, carefully decorating the skin
as a pastry chef would.</p>
<p>Immediately after, it looks like this:</p>
<p><img src="india4_7_small.webp" alt="" /></p>
<p><img src="india4_8_small.webp" alt="" /></p>
<p>The women then are unable to use their hands for well over an hour.  It was
hilarious.</p>
<p>After the henna has dried and been scratched off onto a torn piece of
newspaper, the stained skin starts to gradually darken from a iodine orange to
a deep red brown.  Here's Andrea a day after:</p>
<p><img src="india4_37_small.webp" alt="" /></p>
<p><img src="india4_38_small.webp" alt="" /></p>
<p>Speaking of Andrea, check her out.  She borrowed this <a href="https://en.wikipedia.org/wiki/Sari">sari (saree)</a> from
the groom's mother.</p>
<p><img src="india4_29_small.webp" alt="" /></p>
<p>I was wearing my blue suit.  You've already seen it.  If you really want to
see more, then I refer you to any of the ten million photographers hired for
the wedding.</p>
<p>Oh, I just remembered the band that played during the first event.  They were
told to turn down on at least two separate occasions, but the Force was strong
with them.</p>
<p><img src="india4_21_small.webp" alt="" /></p>
<p>Later that evening, a different band played Hotel California.  The guitar solo
was on point.  The vocals were better than I could do.</p>
<p>Here's what you can see from my room:</p>
<p><img src="india4_2_small.webp" alt="" /></p>
<p>and here's what you can see from the pool:</p>
<p><img src="india4_22_small.webp" alt="" /></p>
<p>and that's about all I shot.</p>
<p><img src="hindustan_small.webp" alt="" /></p>
<p>Reading the complimentary Hindustan Times this morning over breakfast, I was
surprised to see no fewer than three rape-related articles.  Now, I know that
newspapers tend to focus on the morbid and sensational, and that 1.3 billion
people live in India, but still:</p>
<ul>
<li>"DCW to help in rehabilitating Unnao rape victim"</li>
<li>"Raj minor kills herself after gang rape"</li>
<li>"Man held for raping minor daughter"</li>
</ul>
<p>In the <a href="https://en.wikipedia.org/wiki/1Q84">novel</a> I'm reading, a shelter for battered women and themes
involving abuse, rape, and incest feature prominently. I'm not sure what all
this is trying to tell me.</p>
<p>Here is a marble elephant.</p>
<p><img src="india4_24_small.webp" alt="" /></p>
<p>At eight o'clock I'll be meeting a new friend for dinner and then getting up
rather early tomorrow for a flight to <a href="https://en.wikipedia.org/wiki/Kerala">Kerala</a>, where the second half of
this trip begins.
<img style="width: 200px;" src="hindi.png" /></p>


        </body>
    </html></div></content></entry><entry><title>India, Day 8</title><link href="https://www.davidgoffredo.com/india/india3.html" /><id>https://www.davidgoffredo.com/india/india3.html</id><updated>2019-09-27</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/india/india3.html" />
        </head>
        <body>
            <h1>India, Day 8</h1>
<p><img src="india3_5_small.webp" alt="" /></p>
<p>I promised you a cow.  You know, I won't be eating them for a while.  It's just
not right.  Well, I might have eaten some of them today.  More on that later.</p>
<p>It wasn't just one, either.  There are at least three cows in India.  I saw one
chewing on a newspaper from a garbage pile.  Some are employed as roadside
landscapers.</p>
<p><img src="india3_1_small.webp" alt="" /></p>
<p>In the morning, we got into Mr. Singh's car for the considerable drive back to
Delhi.  The road is farms and truck stops across the semi-arid landscape.</p>
<p><img src="india3_2_small.webp" alt="" /></p>
<p>Unlike in Agra, these cows have impressive horns.</p>
<p><img src="india3_6_small.webp" alt="" /></p>
<p><img src="legend_small.webp" alt="" /></p>
<p>At the halfway point, we stopped at a roadside hotel with an attached café.
The owner (the man was, as I later found out) has a family member in tech at
Morgan Stanley, and his son is studying "big data" in Kerala.  Andrea had chai
and I had black coffee.  She got some chocolate covered vanilla wafers, and
after my thinly guised entreat, she gave me half of them.</p>
<p>I'm listening to Blind Lemon Jefferson's recording of "Black Snake Moan."  It
nearly fits the mood of the sleepy highway outpost, with its neglected
playground and bovine passers-by.  It seemed that Mr. Singh has a
longstanding working relationship with the owner.  On the one hand, the
professionals we met on our tour have done this a million times and know
what gets a good response from us the customers.  On the other hand, I
sometimes thought we were a resource being passed through a quiet network of
receivers.</p>
<p><img src="india3_7_small.webp" alt="" /></p>
<p>We got back to Delhi just in time, as my bladder was about to explode.
They gave us a room with two beds.  They had guilty looks on their faces and
upgraded us to a larger room, with a refrigerator.  Serves them right.  Finally
somewhere to put the cheap champagne that Mr. Singh gifted us.</p>
<p>It's not really champagne in any sense of the word.  It's twelve percent
alcohol by volume, is probably derived from grapes, and contains carbon
dioxide, but aside from these things it more resembles fortified Kool-Aid.  I
will drink it.</p>
<p><img src="india3_18_small.webp" alt="" /></p>
<p>At 4:30 we were back in the car on our way to a walking tour of
<a href="https://en.wikipedia.org/wiki/Old_Delhi">Old Delhi's</a> street foods.  Our guide was an adorable college student from
Bangladesh or a nearby Indian territory.  She's studying creative writing.  She
said that among the three languages in which she's fluent, English is "the
best."  She prefers to travel alone around northern India, because she tours
so fast and rough that she has yet to find somebody who can hang with her.</p>
<p>We ate a lot of food.  Andrea and I skipped lunch, but it didn't seem to help.</p>
<p>I'm not moved by food.  That's not to say I don't enjoy good food, which it all
was.  It's just that I have trouble focusing on food.</p>
<p><img src="india3_15_small.webp" alt="" /></p>
<p>That being said, we sampled quite the spread as we squeezed through the crowded
streets of Old Delhi, sometimes hopping on a rickshaw to reach another
neighborhood.  We had:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Aloo_tikki">aloo tikki</a> from a street vendor,</li>
<li><a href="https://en.wikipedia.org/wiki/Nankhatai">nankhatai</a> from another street vendor ("like shortbread, but better"),</li>
<li><a href="https://en.wikipedia.org/wiki/Paratha">paratha</a> with breakfast sides in casual open air joint that has been
owned by the same family for six generations,</li>
<li><a href="https://en.wikipedia.org/wiki/Samosa#India">samosas</a> from a street vendor,</li>
<li><a href="https://en.wikipedia.org/wiki/Jalebi">jalebi</a>, which looks like poop but is quite delicious,</li>
<li><a href="https://en.wikipedia.org/wiki/Kheer">kheer</a> eaten from a clay crucible,</li>
<li><a href="https://en.wikipedia.org/wiki/Masala_chai">masala chai</a> in a paper cup, enjoyed at our guide's favorite spot, where
people come to gather around simple tables, drink tea, and talk about
politics.  She told us how to make the tea, and when I contrasted it with how
I typically prepare chai, she said "that sounds bland."</li>
<li><a href="https://en.wikipedia.org/wiki/Seekh_kebab">seekh kebab</a> and some other meat preparation in the Muslim part of town.
I noticed that the number of people wearing hats increased as we crossed the
cultural divide.  This place was simply decorated and well lit by florescent
lights.  There were two air conditioners in the back where we were sitting.
Andrea said that it looked like the kind of place you'd end up at late after
a night of drinking.  It did remind me of an
open-until-three-in-the-morning-for-muslim-cab-drivers halal chicken place in
my neighborhood.</li>
<li><a href="https://www.hindustantimes.com/more-lifestyle/tried-and-tasted-the-best-place-for-butter-chicken-in-old-delhi-revealed/story-dNU54TEGHl2oeTDCM86WbL.html">butter chicken</a> from the roof of a densely packed five story chicken
emporium.  We climbed climbed climbed through the squished crowds of people
until we reached the charcoal illuminated top of the building where the
chicken is cooked.  There was a good view of the surrounding area, but I
didn't manage a good photo.</li>
<li><a href="https://en.wikipedia.org/wiki/Kulfi">kulfi</a> in a space that felt more like a waiting room in a realtor's
office than an ice cream shop.  Andrea liked the fruit flavors, whereas I
think I preferred the nuts.</li>
</ul>
<p><img src="india3_25_small.webp" alt="" /></p>
<p><img src="india3_23_small.webp" alt="" /></p>
<p>We began with another Sikh temple, and along the way there was a quiet street
of Jain households.  After kulfi we rickshawed back to the car, where our guide
seemed oddly interested in keeping far away from our driver.</p>
<p>So ended the street food walking tour.</p>
<p>On the way back, we stopped to get some cash for tipping Mr. Singh, as it would
be our last drive with him.</p>
<p><img src="india3_26_small.webp" alt="" /></p>
<p>Thanks for the jungle juice.</p>


        </body>
    </html></div></content></entry><entry><title>India, Day 6</title><link href="https://www.davidgoffredo.com/india/india2.html" /><id>https://www.davidgoffredo.com/india/india2.html</id><updated>2019-09-25</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/india/india2.html" />
        </head>
        <body>
            <h1>India, Day 6</h1>
<p><img src="india2_38_small.webp" alt="" /></p>
<p>Copper (II) sulfate is the product of the reaction between copper metal and
sulfuric acid.  It's water soluble and moderately toxic.</p>
<p>Copper (II) oxide is the result of the breakdown of Copper (I) oxide in humid
air.  It's not particularly toxic, but regular exposure can cause copper to
accumulate in the body, eventually leading to neurological, liver, and kidney
problems.</p>
<p>According to the 2018 New York City Drinking Water Supply Quality Report,
the average concentration of copper is 0.008 milligrams per liter of water,
taken across 464 samples. However, the majority of copper contamination in
New York City comes from copper pipes in buildings, while the water report
samples at the mains. Separate, smaller samples (481 of them) are taken "at
the tap." The finding is that concentrations of copper in drinking water can
be as high as 0.483 milligrams per liter of water, though ninety percent of
samples are below 0.185 milligrams per liter.</p>
<p>Anyway, here are some pictures of the Taj Mahal:</p>
<p><img src="india2_37_small.webp" alt="" /></p>
<p><img src="india2_39_small.webp" alt="" /></p>
<p><img src="india2_41_small.webp" alt="" /></p>
<p><img src="india2_43_small.webp" alt="" /></p>
<p><img src="india2_47_small.webp" alt="" /></p>
<p>You get the idea.  White, pretty, enormous.  Totally my type.  We even saw some
monkeys:</p>
<p><img src="india2_50_small.webp" alt="" /></p>
<p>I said, "oh, more monkeys!"  Our guide for that day replied, slightly amused,
"Yes, more monkeys.  Don't go near them."</p>
<p><img src="india2_1_small.webp" alt="" /></p>
<p>The Taj Mahal is in the city of Agra, which is not Delhi.  So, Mr. Singh drove
us for a few hours through the Indian countryside.  You can probably guess from
his name that Mr. Singh has a beard and wears a turban, which makes him easy to
identify though a windshield.  He could be a tour guide himself (as Andrea
noted), not just a driver, for all he told us along the way.</p>
<p>Indians are really into cows.  It makes me feel bad about eating them (cows,
not Indians).  As we entered the open country, I began to notice tiny thatched
huts spotting the farmlands.  They seemed much too small to be homes, but
maybe they were sheds.  Mr. Singh explained that this is where cow manure is
stored until it dries into a hard cake, which can then be used as fuel.  Gas
fires are unnatural, while this fuel is manifestly natural, and so it is
preferable.  I don't know whether it smells like manure when it burns, but it
probably doesn't smell like hickory.</p>
<p>Once this was pointed out to me, I was floored by number of these huts.  Later,
when we were driving through a town, we could see large cylinders of the stuff
rolled up on the side of the road, in its marketable form.</p>
<p>It's not just the poop, either.  Cows are everywhere in Agra.  If a cow wants
to lie down in the road, it lies down in the road.  If a cow wants to pick
through garbage, it picks through garbage.  If a cow is crossing the road and
decides that actually it wants to go back the other way, it does so.  They
don't moove in response to car horns as reliably as dogs do, so our driver
mostly just steered around them.</p>
<p>Small herds of cows are led each day on the side of the road from the farms
into town, where they're milked early in the morning, then loiter around
blocking traffic and sniffing the ground, and then return to the farms to
graze until they are milked again in the evening.</p>
<p>Women squat in the fields collecting the dung, and a man is often nearby
"helping" (Mr. Singh says that the piles can get heavy, and so maybe the man
is there just in case he is needed, should the woman call in an upper body
strength strike).</p>
<p>You want to see some pictures of cows? Well, I'm as surprised as you are
that I don't have any. In India so far I have taken more pictures of
pigeons, the undisputed rulers of New York City, than I have of Hindu's
sacred animal. I'll try to correct this before returning to Delhi.</p>
<p><img src="india2_2_small.webp" alt="" /></p>
<p>We saw more than the Taj Mahal in Agra.  The first tour was of the so-called
"mini Taj," properly the tomb of I'timād-ud-Daulah.  You can read about the
history on <a href="https://en.wikipedia.org/wiki/Tomb_of_I%27tim%C4%81d-ud-Daulah">wikipedia</a>.  The thing to note in the pictures is how the white
marble is integrated with the red sandstone.  I can no longer think of the
terms "white marble" and "red sandstone" without an Indian accent.</p>
<p>The Mughals were trying out the whole "white marble" thing in the tomb of
I'timād-ud-Daulah.  It ended up looking so badass that, when the Taj Mahal was
built, they went balls deep with the marble.  The marble was barged over from
Jaipur on a river.</p>
<p>Here's the "mini Taj."</p>
<p><img src="india2_7_small.webp" alt="" /></p>
<p><img src="india2_8_small.webp" alt="" /></p>
<p><img src="india2_5_small.webp" alt="" /></p>
<p><img src="india2_4_small.webp" alt="" /></p>
<p>There are two styles of ornamentation at play.  One is inlaid stonework
(<a href="https://en.wikipedia.org/wiki/Pietra_dura">pietra dura</a>), and the other is mural painting.  In a similar way to how
the Taj Mahal shed the red stone preferring marble, the Taj Mahal also is
relatively devoid of murals, instead using extensive pietra dura.</p>
<p>But that's all pretty boring, isn't it?  Check out these camels.</p>
<p><img src="india2_70_small.webp" alt="" /></p>
<p>As we approached this caravan from afar, Mr. Singh said "look, elephants!"
After a few seconds I contributed, "they're very small elephants," and I don't
remember if it was Andrea or Mr. Singh who first admitted that they're camels.
The lesson here is that you should never mistake a camel for an elephant.
Thank you for listening.</p>
<p>My favorite picture so far is this one:</p>
<p><img src="india2_129_small.webp" alt="" /></p>
<p>Rashād watches over all of us from his kingly roost.  <a href="https://en.wikipedia.org/wiki/High-dynamic-range_imaging">HDR</a> is really
growing on me.</p>
<p>Speaking of elephants, here is what they look like:</p>
<p><img src="india2_75_small.webp" alt="" /></p>
<p>Yes, we exploited the elephants.  I'm sorry, ok?  To be honest, had we known
that the item on the tour mentioning elephants was a touristastic ride up a
hill, we would have left it out; but, the tour is a package, and who knew what
the elephant part was about?</p>
<p>Also, what have you done to protect the well-being of elephants?  You're a
hypocrite, and you know it, and that's why you're going to hell when you die.</p>
<p>If you're not sure what I'm talking about, then <a href="https://en.wikipedia.org/wiki/Elephant_crushing">read</a> this kind of
<a href="https://www.bbc.com/news/science-environment-40501667">stuff</a> until you're crying.</p>
<p>For what it's worth, Mr. Singh and our guide claimed that the use of elephants
for tourism in India is regulated by the government, that each elephant is
limited in the amount of work it is allowed to be made to do in a day, and that
everything is really just fantastic.  On the other hand, Mr. Singh also said
that car crashes are relatively rare in India due to the low speed of travel,
but in actuality vehicular deaths are <a href="https://en.wikipedia.org/wiki/List_of_countries_by_traffic-related_death_rate">four times more likely</a> in India than
they are in the Americas.</p>
<p>I'm just saying that I wish well for the elephants.  Moving on.</p>
<p><img src="india2_93_small.webp" alt="" /></p>
<p>Ok, one more thing about the elephants.  Two things.  The first is that Andrea
had the sensibility to greet the elephant once we dismounted it, and earlier
asked the <a href="https://en.wikipedia.org/wiki/Mahout">mahout</a> what the elephant's name is, how old she is, and how
old the mahout is.  The pair of them were twenty and twenty-five years old (I
don't remember who was older), and the elephant was named something that
sounded like "Sonya."  I looked at the elephant's face when Andrea bent down
to meet her, and I couldn't read her expression.  Andrea said something
similar afterward.  Do I sound guilty?  I feel guilty.  In fairness, elephants
did not evolve facial cues to be understood by untrained humans.</p>
<p>The second thing is the picture above.  When you're swaying back and forth on
the saddle strapped to a moving elephant, photographers try their best to get
a decent shot of you, and then presumably later pressure you to pay them for
the photographs.  We suffered no such trouble, but once we got to the top, I
was amused to get the "behind the scenes" shot.</p>
<p>Here is a picture of doorframes framing door frames.
<img src="india2_66_small.webp" alt="" /></p>
<p>Here is a picture of someone taking a picture of doorframes framing doorframes.
<img src="india2_65_small.webp" alt="" /></p>
<p>We need to go deeper.</p>
<p>Here is a picture of a blog post being prepared about a picture of someone
taking a picture of doorframes framing doorframes.
<img src="india2_155_small.webp" alt="" /></p>
<p>Here is a picture of Asha the cat.
<img src="asha2_small.webp" alt="" /></p>
<p>We saw a bunch of palaces.  The Mughals moved here, and then they moved there,
and then they moved back again, and then a prince killed his brothers and
imprisoned his father and somebody built the Taj Mahal.  I'm probably getting
some of this wrong.  People died, it was all deadly serious.  Also, harems.</p>
<p>The first palace was inside of a fort.  If you look closely, there are cows.
<img src="india2_9_small.webp" alt="" /></p>
<p>Inside of the fort, there are multiple layers of defensive obstacles.  There
are attack monkeys,
<img src="india2_11_small.webp" alt="" /></p>
<p>boulder corridors of death,
<img src="india2_12_small.webp" alt="" /></p>
<p>and arresting views of the vast, lush landscape that would pull invaders into
a state of placid reflection, whence they can be slain by arrows or boiling
oil.
<img src="india2_19_small.webp" alt="" /></p>
<p>The guy in the picture was our tour guide in Agra.  He was alright.  I found
him off-putting in a subtle way.  There was a rote thinness to his
presentation, and he more often deflected questions than answered them.  Andrea
suggested that he was acting like a salesman who isn't selling anything.  I
thought that he was crushed by the monotony of saying the same things in the
same way in the same places nearly every day for years and years.  Sometimes,
after an energetic monologue, he would turn away and sigh.</p>
<p>The fort palace has three notable sections.  The first is the courtyard where
the king would address a private audience.  It's real fancy.</p>
<p><img src="india2_14_small.webp" alt="" /></p>
<p><img src="india2_17_small.webp" alt="" /></p>
<p><img src="india2_18_small.webp" alt="" /></p>
<p>The second section is the king's private quarters, which is even fancier.</p>
<p><img src="india2_20_small.webp" alt="" /></p>
<p><img src="india2_21_small.webp" alt="" /></p>
<p>The last section is the courtyard where the king would address a public
audience.  I'm not sure what is meant by "public."</p>
<p><img src="india2_23_small.webp" alt="" /></p>
<p><img src="india2_24_small.webp" alt="" /></p>
<p>One of the kings married three wives: a Muslim, a Christian, and a Hindu.  The
Muslim wife lived in a lavishly decorated shoebox.  The Christian wife lived
in a small flat (I found dubious the tour guide's claim that the hallway's
entrance into three rooms signified the crucifix).</p>
<p>The Hindu wife lived in a palace of her own within the palace.  She is also the
wife that bore the king fourteen children, so they were definitely doing it.
The other token wives did not bear the king any children.</p>
<p>Here are some pictures of the palace in which the king, his three wives, and a
ton of other people temporarily lived while away from the fort.</p>
<p><img src="india2_54_small.webp" alt="" /></p>
<p><img src="india2_56_small.webp" alt="" /></p>
<p><img src="india2_57_small.webp" alt="" /></p>
<p><img src="india2_58_small.webp" alt="" /></p>
<p><img src="india2_60_small.webp" alt="" /></p>
<p><img src="india2_69_small.webp" alt="" /></p>
<p>These tours do this thing that's new to me.  Mr. Singh motivated it for us on
the way from Delhi to Agra.  You go to a showroom adjacent to a factory where
some good is made, such as marble pietra dura, textiles, or jewelry.  In the
showroom there is a small sample of workers making the good.  A salesman
shows you how the good is made, offers a sometimes-interactive demonstration of
the process, and then takes you to a proper showroom where you receive a full
length infomercial about everything you can buy there, and then if you like
you can buy things, all the while attended to by a very dedicated salesman.</p>
<p>I was reminded of the scene in Indiana Jones and the Last Crusade where the
Nazis try to bribe the local ruler with a chest of gold and silver treasures,
coins, jewelry, and gems (perhaps all stolen from wealthy Jews), but the ruler
is much more interested in the car that the Nazis drove there.</p>
<p>I couldn't get myself to buy anything on any of those occasions, but Andrea did
pick up some marble, and as a result, the salesmen gifted me a rough-hewn
marble elephant (methinks from the reject pile).  So, I have a souvenir for
myself, anyway.</p>
<p>Ah, I think I left the elephant at the hotel room in Agra.  So it was with me
but for a short time.</p>
<p>Mr. Singh recommended a buffet style restaurant for dinner, and drove us there.
Andrea and I assumed that he would be joining us for dinner, but he did not.
Maybe we should have invited him to stay.  The "appetizers" presented to us
constituted at least a two course meal, after which we were supposed to go up
to the buffet and get <em>more</em> food, and that's not to mention dessert.  I
lightened up after a beer and a half, fortunately.</p>
<p>The next day began early with a cloudy sunrise tour of the Taj Mahal, which
I've already shown you.  Later we bid our mediocre tour guide farewell and
hit the road again with Mr. Singh, this time for Jaipur.</p>
<p>In Jaipur I was reminded that I have a condition known as
<a href="https://en.wikipedia.org/wiki/Resting_bitch_face">resting bitch face</a>.  On a long high school marching band trip bus ride,
one of my closest friends at the time scrutinized me in silence during a pause
in the conversation and felt the need to ask, "are you ok, dude?"  I turned
to him and said, "yeah, I'm fine."  He said, "because you look pissed."  I
thought about it and told him, "I'm just tired."  He looked at me slightly
incredulously and said, mostly to himself, "so you look angry when you're
tired."</p>
<p>In fact, it's not only when I'm tired.  It's any time I make no effort to
convey emotion using my facial muscles.  Also I hate everybody.</p>
<p>The friendly and slightly avian jewelry salesman told me point blank,
"smile, won't you?"  I smiled and told him that we were tired.</p>
<p>For example, behold this impromptu pout:</p>
<p><img src="rbf_small.webp" alt="" /></p>
<p>The elephants were leading us up to a palace on a hill, my favorite palace of
the trip:</p>
<p><img src="india2_77_small.webp" alt="" /></p>
<p><img src="india2_89_small.webp" alt="" /></p>
<p><img src="india2_98_small.webp" alt="" /></p>
<p><img src="india2_103_small.webp" alt="" /></p>
<p><img src="india2_108_small.webp" alt="" /></p>
<p>Our tour guide in Jaipur was much better than the previous.  It was a state
secret how that silver shone for so many years without tarnishing.  Such
secrets were kept by a family of artisans.  A metalworker would not even tell
his own daughters the secrets, since then when she was married she could
spill the beans to another family.  He would tell his daughters in law, though,
since they were more part of his family, at least politically.</p>
<p>The secret is that it's not silver, it's a tin amalgam.  Surprise!  Andrea
wondered whether working with the mercury caused health problems, and so I
told her about the <a href="https://en.wikipedia.org/wiki/Mad_as_a_hatter">mad hatters</a>.</p>
<p>There were many things to look at.</p>
<p><img src="india2_101_small.webp" alt="" /></p>
<p><img src="india2_114_small.webp" alt="" /></p>
<p><img src="india2_119_small.webp" alt="" /></p>
<p><img src="india2_121_small.webp" alt="" /></p>
<p><img src="india2_122_small.webp" alt="" /></p>
<p><img src="india2_125_small.webp" alt="" /></p>
<p><img src="india2_110_small.webp" alt="" /></p>
<p>Does the following building look to you like it's partially submerged?</p>
<p><img src="india2_134_small.webp" alt="" /></p>
<p>There's an 18th Century observatory in Jaipur, where giant instruments are made
of stone.  For example, this building is a sundial.  It <em>is</em> a sundial.</p>
<p><img src="india2_144_small.webp" alt="" /></p>
<p><img src="india2_146_small.webp" alt="" /></p>
<p>The triangular steppy thing casts a shadow on the curved marble thing, and on
the latter are marked two-second increments.  On a morning with good direct
sunlight, you could watch the shadow crawl across the ticks in real time.</p>
<p><img src="india2_138_small.webp" alt="" /></p>
<p>Here is an image of the dome of the night sky, carved in stone:</p>
<p><img src="india2_140_small.webp" alt="" /></p>
<p><img src="india2_139_small.webp" alt="" /></p>
<p>There are two versions, each omitting half of the sky to make room for
astonomers and/or astrologers to stand and take measurements.  Simple solution,
no?</p>
<p>A similar thing happens here. A tall poll to the right casts the shadow of
its tip on one of the little rectangles. As the sun moves across the sky,
you can plot the curve of its transit, and from this deduce the current
inclination of the Earth in the plane of the solar system, and probably a bunch
of other things.</p>
<p><img src="india2_152_small.webp" alt="" /></p>
<p>Next we went to a museum on the grounds of the current royal family of Jaipur,
but we wouldn't take pictures inside.  Nearby, there was this:</p>
<p><img src="india2_154_small.webp" alt="" /></p>
<p>I forget what it is, but it looks cool.</p>
<p>We were thoroughly pooped when we returned to the hotel late that afternoon.
They also moved us into a room with two proper beds, so Andrea could end her
stay on the cot from the previous night.</p>
<p>Today is a down day.  We might do something this afternoon, and we might not.
There is a nice pool.  Tonight is a cooking class.
<img style="width: 200px;" src="hindi.png" /></p>


        </body>
    </html></div></content></entry><entry><title>India, Day 1</title><link href="https://www.davidgoffredo.com/india/india1.html" /><id>https://www.davidgoffredo.com/india/india1.html</id><updated>2019-09-22</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/india/india1.html" />
        </head>
        <body>
            <h1>India, Day 1</h1>
<p><img src="india_20_small.webp" alt="dog" /></p>
<p>This is Aniruddha Ram Kumar Mukherjee.  He is a dog.  Like many natives of
Delhi, Aniruddha must find ways to cope with the oppressive afternoon summer
heat.  A quick nap on a bench can help pass by the hottest part of the day.</p>
<p>Fortunately, since it is late September, Winter is arriving and so
temperatures are beginning to fall.  Still, Aniruddha and his large extended
family of conspicuously similar looking and ubiquitous canines seem hardly
to ever move, preferring instead to lie out and sleep in the center of
lawns, hills, sidewalks, roads, and crowded temple entrances.</p>
<p>I found myself thinking that perhaps it is the same dog, silently following us
when we're not looking and then plopping down onto the ground apparently fast
asleep as soon as we make a stop.  Or maybe this dog possesses special powers
that allow it to be in multiple places at once or <em>maybe</em> it's no dog at all,
but a corporeal projection of some supernatural essence just beyond our
comprehension, reaching out to us from the great unknown in the only way that
it can: <em>this looks like a nice place to nap...  my back is itchy...  do you
have food?</em></p>
<p>Aniruddha Ram Kumar Mukherjee in particular (as many share parts of his
name) spends his afternoons near the bathrooms outside of Humayun's tomb, an
impressively symmetrical example of Mughal architecture (the tomb, not the
bathrooms — though the bathrooms were nice, too). It looks the same from all
four sides, such that when you walk out of it you don't know which side
you're on. You must travel with somebody who knows which side you're on.</p>
<p><img src="india_11_small.webp" alt="symmetry" /></p>
<p>Inside of the tomb are nooks and crannies, domes and doves and a human thumb
that kept photobombing me.  There are no dead bodies, though.  Those are
allegedly kept underneath the tomb, off limits, to be sanctified by elected
officials at regular intervals.</p>
<p><img src="india_16_small.webp" alt="thumb" /></p>
<p><img src="india_17_small.webp" alt="window" /></p>
<p><img src="india_18_small.webp" alt="ceiling" /></p>
<p>The grounds surrounding the tomb are a grid of sixteen patches of lawn
landscaped with lime trees, jasmine, shrubs, one of Aniruddha's cousins, and my
thumb.</p>
<p><img src="india_13_small.webp" alt="lawn" /></p>
<p>The trip started out on one of Emirates' Airbus A380 super mega mondo grande
venti mocha soymilk airplanes, or as it's referred to in the industry: "that
big fucking plane."  The plane is so big that if you're sitting over the wing,
as I was, it's hard to see anything <em>but</em> the wing.  Here is the glow of the
sun as it rises over the Atlantic well into the flight, but before we got to
Europe.  It's strange how the day fast forwards as the plane races east at a
significant percentage of the Earth's velocity at the surface.</p>
<p>Supposing that the Earth is a uniform sphere (it's not), rotating evenly about
a single axis (it doesn't) at 1000 miles per hour (not quite) at the equator,
then the surface of the Earth at forty-one degrees latitude, where New York
City is, is tearing through space at 755 MPH.  The Airbus A380 has a design
cruising airspeed of mach 0.85, which is 652 MPH, so assuming that we were
flying through a body of air stationary with respect to the ground (unlikely),
along New York's line of latitude (we weren't), then we would have been
experiencing the passage of the sun at 186% its normal rate, which I think is a
pretty good deal.  Also I had the whole row to myself, so I could lie down and
torture everyone with my snoring.</p>
<p><img src="india_1_small.webp" alt="plane" /></p>
<p>That flight was twelve hours long.  We were late getting out of JFK, and so we
had to hustle our way across the Dubai airport to make our three hour
connecting flight to Delhi.</p>
<p>Now in a state of near delirium (our mental state, not the state of India), we
were picked up by a friendly and attentive hotel representative and driven to
the hotel by a quiet and apparently reliable driver.  Once at the hotel, the
representative gave us a complimentary welcome cocktail and a play by play of
everything that we'd be doing on the tour, and when.  He also mentioned that
Andrea and I would be sleeping in the same bed.  I told him that "we don't
typically sleep together," and so he spent the next few minutes going back and
forth with the management seeing whether any two-twin rooms were available.
There weren't.  <em>However</em>, if we wanted they could wheel in an extra twin bed
for us, which I volunteered to sleep on.  So, Andrea gets the big bed.</p>
<p>I'd like to mention that this is the second time in less than a week that I
have been sleeping on an auxiliary bed.  Look, I get it, people.  I get it.</p>
<p>That evening Vineet (the groom) reached out to us and invited us to come over
to his place for dinner, to meet his father and hang out with his mother and
Asha (the bride, not the cat).  Here is a picture of Asha the cat:</p>
<p><img src="asha_small.webp" alt="asha" /></p>
<p>Andrea and I nearly fell asleep at the dinner table, and so we politely ate and
ran to an Uber who "had a GPS malfunction" and so took twice the time to get
us back to the hotel, where we passed out immediately.</p>
<p>The following day (which is now ending, from my reference frame) we met a tour
guide and the driver from the previous day, and they took us all around Delhi
to see the sights.  One of those sights was Humayun's tomb, where I met
Aniruddha Ram Kumar Mukherjee.</p>
<p>It's very convenient to have a private tour guide and driver.  They do all of
the things and you just have to walk around, take pictures, and ask questions.</p>
<p>I took few pictures of the sights, because I was mostly seeing them, and
because Andrea was carrying around a nice SLR, the contents of which I can
later mooch off of.</p>
<p>I'm not going to narrate the whole tour (if you want that, I encourage you to
visit Delhi for a day), but here are some of the pictures.  Also I'm tired and
want to go to sleep.</p>
<p>We started by visiting a large Sikh temple, which in actuality is just a
giant family style restaurant, pool, and concert venue. No shoes required.
That is, you are required not to wear shoes. The cooks don't wear shoes
either.</p>
<p>Also, you must cover your hair, because that is how the Sikhs do.  There's this
guy:</p>
<p><img src="india_6_small.webp" alt="david" /></p>
<p>and then there's Andrea:</p>
<p><img src="india_5_small.webp" alt="andrea" /></p>
<p>Young Indian men kept coming up to Andrea and asking whether they could take
a picture with her, but I have yet to figure out why.</p>
<p>After that we walked around a big old fort/palace, "the city within a city"</p>
<p><img src="india_7_small.webp" alt="fort" /></p>
<p>Here is a picture of where Gandhi was cremated:</p>
<p><img src="india_9_small.webp" alt="gandhi" /></p>
<p>Here is another tomb:</p>
<p><img src="india_21_small.webp" alt="motomb" /></p>
<p>Here are two of my fingers, with a tower in the background:</p>
<p><img src="india_24_small.webp" alt="tower" /></p>
<p>Here is the tower closer:</p>
<p><img src="india_28_small.webp" alt="motower" /></p>
<p>Here are two of my fingers, a woman, and one of the archways of what remains of
a mosque that was built out of the demolished remains of multiple Hindu
temples.  They removed all of the faces of the various depictions of Hindu
gods, because Allah is the one true god, right?  Right?</p>
<p><img src="india_25_small.webp" alt="wall" /></p>
<p>Oh yeah, earlier in the day we also walked around the parliamentary buildings
and saw distant views of an arch and the Prime Minister's mansion.  Here you
are:</p>
<p><img src="india_2_small.webp" alt="" /></p>
<p><img src="india_3_small.webp" alt="" /></p>
<p><img src="india_4_small.webp" alt="" /></p>
<p>At some point we ate dinner, and the food was delicious.  Now it is nearly one
o'clock in the morning, and I am going to bed.</p>
<p><img style="width: 200px;" src="hindi.png" /></p>


        </body>
    </html></div></content></entry><entry><title>Channels</title><link href="https://www.davidgoffredo.com/channels.html" /><id>https://www.davidgoffredo.com/channels.html</id><updated>2019-07-28</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/channels.html" />
        </head>
        <body>
            <h1>Channels</h1>
<p><img src="chan.png" alt="" /></p>
<p>I implemented <a href="https://github.com/dgoffredo/chan">Go-style channels and select</a> in C++. The need doesn't
arise often, but when it does, it's frustrating not to be able to multiplex
operations easily.</p>
<p>But <a href="https://www.boost.org/">Boost</a> already implements channels! And why not just use
<a href="https://think-async.com/Asio/">asio</a>? And if you care so much about multiplexing operations on
logical threads of execution, why not just use <a href="https://golang.org/">Go</a> instead of C++?
What, you're going to use use <em>kernel</em> threads for this? Won't that use too
many resources? Aren't you concerned about the cost of context switching? What
about the <a href="https://en.wikipedia.org/wiki/C10k_problem">C10k problem</a>? Besides, you probably don't even need
channels. You should just do things another way. Why are you reinventing the
wheel? Don't you know anything?</p>
<p>Okay, okay.  Your concerns are valid, but things are going to be fine.
Computers are fun.</p>
<h2>Motivation</h2>
<p>Back when I was writing a <a href="https://github.com/dgoffredo/ipc">C++ wrapper library</a> for
<a href="http://man7.org/linux/man-pages/man7/mq_overview.7.html">POSIX message queues</a>, I was frustrated by how difficult it was to
portably consume a message queue while also being able to stop on demand.  The
simplest consumer I could imagine, "consume messages from this queue until I
tell you to stop," in general requires the use of UNIX signals, since in
general POSIX message queues are not files, and so cannot be used in IO
multiplexing facilities like <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/poll.html">poll</a>.  Sure, you could send a special
message to the queue, "okay, stop now," but that works only if you are the only
consumer.  You wouldn't want your "stop" message to go to some other consumer.</p>
<p>Fortunately, on Linux it is the case that POSIX message queues <em>are</em> files,
and so I can use <code>poll</code> to block on the condition that <em>either</em> a message
arrives on the queue <em>or</em> somebody pokes me to tell me to stop. I could make
a <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/pipe.html">pipe</a> on which the consumer would "poll" for reads, so that when I
wanted to tell the consumer "stop," I'd just <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/write.html">write</a> to the pipe. The
consumer would then handle that event by ceasing its queue consuming
activities.</p>
<p>What do I write to the pipe? Anything really. What if I wanted to
communicate more than just "stop," though? Maybe there are other commands
I'd like to send to the queue-consuming thread. I could invent a protocol of
messages to encode onto the pipe, and then the queue-consuming thread would
parse them on the other end. That would be silly, though, since the consumer
is in the same address space as the "stopper."  Instead, it would be better to
coordinate the copying/moving of a "command" object from one location to
another, using the pipe only to wake a possibly sleeping thread.</p>
<p>Now what if I had more than one thread that wanted to send a command to the
consumer?  Well, they would contend for some mutex and thus each would have to
wait its turn.</p>
<p>I could even add a more contrived requirement that a thread be able to send
such a command to one of multiple consumers, whichever is available first.
Regardless, the abstraction that is coming into focus from this combination of
<code>poll</code>ing files and copying objects is a <a href="https://en.wikipedia.org/wiki/Channel_(programming)"><em>channel</em></a>.  Let the mutex,
the pipe, and <code>poll</code> all be implementation details of a mechanism for
<em>exchanging a value with another thread</em>.  Further, I want to be able to
perform one out of possibly many exchanges, with only one occurring between any
two threads at a given time.</p>
<h2><code>select(...)</code></h2>
<p>In <a href="https://golang.org/">Go</a>, the facility for doing exactly one send/receive operation from a
set of possible channels is called <a href="https://gobyexample.com/select">select</a>.  I like that name, so
let's use it.</p>
<p>The thing is, we're not concerned solely with sending and receiving on
channels.  In the motivating example, above, one of the operations is to
receive from a POSIX message queue.  Or, possibly I want to read/write on a
FIFO, or wait for some timeout to expire, or accept on a socket.  We need a
more general notion of <code>select</code> than Go provides.</p>
<p>Also, as a library writer in C++, I can't change the language itself.  What
should the C++ analog of Go's select statement look like?  My favorite idea,
from <a href="https://github.com/tylertreat/chan#select-statements">this project</a>, is to use a <a href="https://en.cppreference.com/w/cpp/language/switch">switch statement</a>:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (<span class="hljs-built_in">select</span>(file.<span class="hljs-built_in">read</span>(&amp;buffer), chan1.<span class="hljs-built_in">send</span>(thing), chan2.<span class="hljs-built_in">recv</span>(&amp;message))) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:  <span class="hljs-comment">// successfully read data from `file`</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <span class="hljs-comment">// successfully sent `thing` to `chan1`</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <span class="hljs-comment">// successfully received `message` from `chan2`</span>
    <span class="hljs-keyword">default</span>: <span class="hljs-comment">// an error occurred</span>
}
</code></pre>
<p>For the naughty-minded among you: <em>no</em>, you can't use preprocessor macros to
make something more like Go's select statement.  Not without lambda
expressions and additional overhead, anyway.</p>
<h2>Concurrent ML</h2>
<p>Go is not the only language with channels.  It is likely the most popular, and
the reason why so many other languages are now adding similar facilities of
their own (e.g. <a href="https://clojure.org/news/2013/06/28/clojure-clore-async-channels">Clojure</a>).</p>
<p>I enjoy <a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</a>. One of its variants with which I have the most
<a href="https://github.com/dgoffredo?utf8=%E2%9C%93&amp;tab=repositories&amp;q=&amp;type=&amp;language=racket">experience</a>, <a href="https://racket-lang.org/">Racket</a>, has a <code>select</code>-like
facility, called <a href="https://docs.racket-lang.org/reference/sync.html">sync</a>, that works with all kinds of things,
not just channels. The "things" it works with are deemed "events," and
evidently there's a whole <a href="https://en.wikipedia.org/wiki/Concurrent_ML">calculus</a>, called "Concurrent ML," for
composing events and synchronizing threads of execution with them (see
<a href="https://wingolog.org/archives/2017/06/29/a-new-concurrent-ml">this</a>, <a href="https://www.youtube.com/watch?v=7IcI6sl5oBc">this</a>, and <a href="http://www.cs.uchicago.edu/~jhr/papers/1996/mspls-slides-reppy.ps">this</a>).</p>
<p>I did not implement Concurrent ML in C++. It's a little beyond my grasp.
What I <em>did</em> take from Concurrent ML, though, is the idea that my
synchronization primitive, <code>select</code>, will operate on <em>events</em>, not on
channels.</p>
<h2>Events</h2>
<p>What is an event?  To me, it's a state machine.  Under the hood, a thread will
be blocking in a call to <code>poll</code>, but the events determine which files will be
monitored by <code>poll</code>.</p>
<p>Let an <code>IoEvent</code> be a notion of the sort of thing <code>poll</code> can monitor (like the
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/poll.h.html">pollfd</a> structure, but including timeouts and not depending on any
system headers), together with a special value indicating "I'm done."  Then I
call an <em>event</em> any object that supports the following three operations:</p>
<ul>
<li><code>IoEvent file()</code>: Give me something to wait on in <code>poll</code>.</li>
<li><code>IoEvent fulfill(IoEvent)</code>: The indicated <code>IoEvent</code> is available now.  Either
give me another (or the same) <code>IoEvent</code> to wait on, or otherwise indicate
that you are done (have been fulfilled).</li>
<li><code>void cancel(IoEvent)</code>: Somebody else was fulfilled before you, so clean up
whatever you might have been doing.  Here's the most recent <code>IoEvent</code> you
gave me to wait on.</li>
</ul>
<p>That's it!  Then a sketch of how <code>select</code> works is straightforward:</p>
<pre><code class="hljs"><span class="hljs-function">def <span class="hljs-title">select</span>(<span class="hljs-params">events</span>):
    ioEvents</span> = [<span class="hljs-keyword">event</span>.file() <span class="hljs-keyword">for</span> <span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span> events]
    <span class="hljs-keyword">while</span> True:
        poll(ioEvents)
        <span class="hljs-keyword">for</span> i, (ioEvent, <span class="hljs-keyword">event</span>) <span class="hljs-function"><span class="hljs-keyword">in</span> <span class="hljs-title">enumerate</span>(<span class="hljs-params">zip(ioEvents, events</span>)):
            <span class="hljs-keyword">if</span> ioEvent.ready:
                ioEvent</span> = ioEvents[i] = <span class="hljs-keyword">event</span>.fulfill(ioEvent)
                <span class="hljs-keyword">if</span> ioEvent.fulfilled:
                    <span class="hljs-keyword">for</span> ioEvent, <span class="hljs-function">loser <span class="hljs-keyword">in</span> <span class="hljs-title">zip</span>(<span class="hljs-params">ioEvents, events</span>):
                        <span class="hljs-keyword">if</span> loser <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">event</span>:
                            loser.<span class="hljs-title">cancel</span>(<span class="hljs-params">ioEvent</span>)
                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">event</span>
</span></code></pre>
<p>The trick, then, is to express sending to or receiving from a channel as one
such <em>event</em>.</p>
<h2>The Original Channel Design</h2>
<p>I don't know how to implement channel send events and receive events using the
framework described above.  I <em>thought</em> that I did, but there's an essential
piece missing that, I think, makes <code>select</code>ing on channel events impossible.</p>
<p>Here was my original design.  A channel contains a mutex, a queue of senders,
and a queue of receivers.  Each sender or receiver has two pipes: one for
communicating with that sender/receiver, and another for responding to whoever
was writing to the sender/receiver.</p>
<p>The <em>event</em> member functions for a sender or receiver could then look like
this:</p>
<ul>
<li><p><code>IoEvent file()</code>: Lock the channel mutex and add myself to the relevant queue
(sender queue if I'm a sender, etc.).  If I'm not the first in line, or if
there is nobody in the other queue, then return an <code>IoEvent</code> that's the read
end of my pipe.  I'm waiting for somebody to visit me.</p>
<p>If I am first in line and there is somebody at the front of the other queue,
then write a <code>HI</code> message to their pipe, and then return an <code>IoEvent</code> that's
the read end of their reply pipe.  I'm waiting for them to respond.</p>
</li>
<li><p><code>IoEvent fulfill(IoEvent)</code>: Read a message (byte) from the pipe in the
 indicated <code>IoEvent</code> and proceed based on the message:</p>
<ul>
<li><p><code>HI</code>: Somebody wants to exchange a value with me.  Write <code>READY</code> to my
reply pipe <em>and then do a blocking read on my pipe</em>.  A blocking read
seems counter-productive, but it is necessary.  Were I instead to return
to <code>poll</code>, it could be that another event is fulfilled on my thread
before, during, or after the other thread performs the exchange, and so
at best there's a possibility that two events are fulfilled (a violation
of <code>select</code>'s semantics), and at worst the other read reads from or writes
to invalid memory, as I have already moved past the <code>select</code> call.</p>
<p>The result of this blocking read will be one of the following messages:
<code>DONE</code>, <code>CANCEL</code>, or <code>ERROR</code>. <code>DONE</code> means done.  I can return an
<code>IoEvent</code> indicating that I am fulfilled and <code>select</code> will return to
the caller.  First, though, I must look again at the channel to see
whether there's anybody I need to <code>POKE</code> — more on that later.
<code>CANCEL</code> means that the other thread fulfilled a different event, and
so I must revisit the channel to see whether I can contact another
thread or if I must wait to be visited by another thread.  <code>ERROR</code> means
that an exception was thrown on the other thread while it attempted to
exchange the value, and so I too should report an error on my thread
(perhaps by throwing an exception).</p>
</li>
<li><p><code>READY</code>: I had contacted another thread about exchanging a value, and now
that thread is ready for the exchange.  Copy/move the object to/from
their storage and then send them either a <code>DONE</code> or <code>ERROR</code> message,
depending on how it goes.</p>
</li>
<li><p><code>CANCEL</code>: I had contacted another thread about exchanging a value, but
now that thread has fulfilled another event.  I must revisit the channel
to see whether I can contact another thread or if I must wait to be
visited by another thread.</p>
</li>
<li><p><code>POKE</code>: I was not first in line, but then those in front of me finished
and so now I am in front.  I should visit the channel to see whether
there is anybody I can exchange a value with.</p>
</li>
</ul>
</li>
<li><p><code>void cancel(IoEvent)</code>: Another event was fulfilled on my thread.  Write a
<code>CANCEL</code> message to whoever I was interacting with, visit the channel and
remove myself from the queue, possibly <code>POKE</code> the guy behind me, and return.</p>
</li>
</ul>
<p>I thought that this was a good protocol, and it mostly works.  The fatal flaw
takes the form of a deadlock.</p>
<p>Suppose you have two threads, <em>thread1</em> and <em>thread2</em>, selecting on two
channels, <em>chan1</em> and <em>chan2</em>.  The following situation can produce a deadlock
some minority of the time.</p>
<p>On <em>thread1</em>:</p>
<pre><code class="hljs">switch <span class="hljs-comment">(select(chan1.send(value)</span>, cha<span class="hljs-symbol">n2</span>.recv<span class="hljs-comment">(&amp;destination)</span>)) {
    <span class="hljs-comment">// ...</span>
}
</code></pre>
<p>On <em>thread2</em>:</p>
<pre><code class="hljs">switch <span class="hljs-comment">(select(chan2.send(value)</span>, cha<span class="hljs-symbol">n1</span>.recv<span class="hljs-comment">(&amp;destination)</span>)) {
    <span class="hljs-comment">// ...</span>
}
</code></pre>
<p>That is, <em>thread1</em> is sending to <em>chan1</em> and receiving from <em>chan2</em>, while
<em>thread2</em> is doing the opposite — sending to <em>chan2</em> and receiving from
<em>chan1</em>.</p>
<p>What causes the deadlock is that blocking read in <code>IoEvent fulfill(IoEvent)</code>.
Here's one possible interleaving that causes a deadlock.</p>
<table>
<thead><tr>
<th><em>thread1</em></th>
<th><em>thread2</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>sit in <em>chan1</em></td>
<td>sit in <em>chan2</em></td>
</tr>
<tr>
<td>say <code>HI</code> on <em>chan2</em></td>
<td>say <code>HI</code> on <em>chan1</em></td>
</tr>
<tr>
<td>got <code>HI</code> on <em>chan1</em></td>
<td>got <code>HI</code> on <em>chan2</em></td>
</tr>
<tr>
<td><strong>block</strong> for reply on <em>chan1</em></td>
<td><strong>block</strong> for reply on <em>chan2</em></td>
</tr>
</tbody>
</table>
<p><img src="sad-panda.png" alt="" /></p>
<p>For comparison, what happens more often is the following:</p>
<table>
<thead><tr>
<th><em>thread1</em></th>
<th><em>thread2</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>sit in <em>chan1</em></td>
<td>sit in <em>chan2</em></td>
</tr>
<tr>
<td>say <code>HI</code> on <em>chan2</em></td>
<td>say <code>HI</code> on <em>chan1</em></td>
</tr>
<tr>
<td>got <code>HI</code> on <em>chan1</em></td>
<td />
</tr>
<tr>
<td><strong>block</strong> for reply on <em>chan1</em></td>
<td>got <code>READY</code> on <em>chan1</em></td>
</tr>
<tr>
<td />
<td>transfer value over <em>chan1</em></td>
</tr>
<tr>
<td />
<td>say <code>DONE</code> on <em>chan1</em></td>
</tr>
<tr>
<td>got <code>DONE</code> on <em>chan1</em></td>
</tr>
</tbody>
</table>
<p><img src="happy-panda.png" alt="" /></p>
<p>Here there's no deadlock; instead, <em>chan1</em> "won the race."  How can I avoid the
deadlocking case?</p>
<p>No amount of protocol tweaking is enough to fix this problem.  In order to have
the "exactly one event is fulfilled" guarantee, a send/receive event must
perform a blocking read at some point, and doing so could cause a deadlock when
<code>select</code> involves more than one channel.</p>
<h2>The New Channel Design</h2>
<p>Deadlocked and forlorn, I looked to <a href="https://github.com/golang/go/blob/master/src/runtime/select.go">Go's implementation</a> of
<code>select</code> for inspiration.  This <a href="https://docs.google.com/document/d/1yIAYmbvL3JxOKOjuCyon7JhW4cSv1wy5hC0ApeGMV9s/pub">description</a> of Go channels, by
Dmitry Vyukov, was especially helpful.  In particular, he notes the following
(emphasis mine):</p>
<blockquote><p>There is another tricky aspect. We add select as waiter to several
channels,
<strong>but we do not want several sync channel operations to complete
communication with the select</strong> (for sync channels unblocking completes
successful communication). <strong>In order to prevent this, select-related
entries in waiter queues contain a pointer to a select-global state
word.</strong> Before unblocking such waiters other goroutines try to CAS(statep,
nil, sg), which gives them the right to unblock/communicate with the
waiter. If the CAS fails, goroutines ignore the waiter (it’s being
signaled by somebody else).</p>
</blockquote>
<p>That's what I was missing!  In my original design, a thread interacting with
another thread over a channel had no notion of the <em>other events</em> happening in
either thread's <code>select</code> call.  A thread must bring along with it a piece of
(as Dmitry put it) "select-global state," effectively allowing different events
in the same call to <code>select</code> to interact with each other.</p>
<p>While it's encouraging that there is a way to overcome the deadlock described
above, doing so spoils the simplicity of the original <code>select</code> implementation.</p>
<p>On the other hand, it simplifies the protocol described in the previous section
(<code>HI</code>, <code>READY</code>, <code>DONE</code>, etc.) since now a mutex will be used for coordinating
one side of the communication between two threads, rather than an additional
pipe.</p>
<h3><code>EventContext</code></h3>
<p>Associated with each call to <code>select</code> will be an instance of the following
<code>struct</code>:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-comment">// `SelectorFulfillment` is a means by which an event in one `select`</span>
<span class="hljs-comment">// invocation can check or set the fulfillment of an event in a different</span>
<span class="hljs-comment">// `select` invocation.</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SelectorFulfillment</span> {</span>
    <span class="hljs-comment">// Note that, by convention, `&amp;mutex` (the address of the `mutex`) will be</span>
    <span class="hljs-comment">// used to determine the locking order among two or more</span>
    <span class="hljs-comment">// `SelectorFulfillment::mutex`.</span>
    Mutex mutex;

    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">State</span> {</span>
        FULFILLABLE,   <span class="hljs-comment">// not fulfilled, and fulfillment is allowed</span>
        FULFILLED,     <span class="hljs-comment">// has already been fulfilled</span>
        UNFULFILLABLE  <span class="hljs-comment">// not fulfilled, but fulfillment is not allowed</span>
    };

    State state;

    <span class="hljs-comment">// key of the fulfilled event; valid only if `state == FULFILLED`</span>
    EventKey fulfilledEventKey;
};
</code></pre>
<p>Channel send/receive events are then each given an <code>EventContext</code> by <code>select</code>,
where the <code>EventContext</code> contains the <code>EventKey</code> of that event, and a smart
pointer to the <code>select</code>'s <code>SelectorFulfillment</code>.  <code>EventContext</code> looks like
this:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EventContext</span> {</span>
    SharedPtr&lt;SelectorFulfillment&gt; fulfillment;
    <span class="hljs-comment">// key of the event to which this `EventContext` was originally given</span>
    EventKey eventKey;
};
</code></pre>
<p>An event can be given its <code>EventContext</code> as an argument to the one call to
<code>IoEvent file()</code>, so now the <em>event</em> concept looks like this:</p>
<ul>
<li><code>IoEvent file(const EventContext&amp;)</code></li>
<li><code>IoEvent fulfill(IoEvent)</code></li>
<li><code>void cancel(IoEvent)</code></li>
</ul>
<p>Non-channel events, such as file reads/writes, can simply ignore the additional
<code>const EventContext&amp;</code> argument.</p>
<p>Now, to make this new scheme work, there are three things that need to happen.</p>
<ol>
<li><code>select</code> keeps its <code>SelectorFulfillment::mutex</code> locked at all times <em>except</em>
when it's blocked by <code>::poll</code>.  Effectively, we're implementing a condition
variable — but one that plays nice with file IO multiplexing.<pre><code class="lang-c++ hljs">fulfillment.mutex.<span class="hljs-built_in">unlock</span>();
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> rc = ::<span class="hljs-built_in">poll</span>(<span class="hljs-comment">/*...*/</span>);
fulfillment.mutex.<span class="hljs-built_in">lock</span>();
</code></pre>
</li>
<li><p>When a channel send/receive event wants to "visit" another thread, it does
so by locking the other thread's <code>SelectorFulfillment</code>. Naively, this can
cause another deadlock, where now instead of blocking each other on
reading a pipe, threads could block each other acquiring a lock on each
others' mutexes. The trick to avoiding this is always lock the mutexes in
the same order. In particular, this means that if a thread's mutex comes
<em>after</em> the mutex of the thread it is trying to visit, it must first
<em>unlock</em> its mutex, then acquire a lock on the other mutex, and then re-lock
its mutex. The initial unlocking of the thread's mutex prevents the
deadlock.</p>
<p>Once a visiting thread has acquired the two locks, it examines the
<code>state</code> field of the other thread's <code>SelectorFulfillment</code>. If the <code>state</code>
is <code>FULFILLABLE</code>, then the thread performs the transfer, marks the
<code>state</code> <code>FULFILLED</code>, notes the <code>EventKey</code> of the other thread (so that
<code>select</code> knows <em>who</em> was fulfilled when that thread next awakens), and
writes <code>DONE</code> to the other thread's pipe. If the <code>state</code> is not
<code>FULFILLABLE</code>, then unlock that thread's mutex and try somebody else.</p>
</li>
<li><code>select</code> checks its <code>SelectorFulfillment::state</code> after each call to <code>poll</code>,
or any event's <code>file</code> or to <code>fulfill</code> member functions. It could be that
during one of those calls, the event fulfilled an event on another
thread, or it could be that the event momentarily relinquished the lock
on its mutex and was fulfilled by another thread. Either way, <code>select</code>'s
work is done. It can see which event was fulfilled by reading the
<code>SelectorFulfillment::fulfilledEventKey</code> field, and proceed with cleanup.</li>
</ol>
<p>Once I implemented these changes, the deadlock described in the previous
section went away.</p>
<h2><code>selectOnDestroy</code></h2>
<p>For any of you still reading this (good job!), there were other morsels of C++
design that I encountered while working on this project.</p>
<p>For example, I want a channel's <code>send</code> and <code>recv</code> member functions to return
an <em>event</em> object suitable for use as an argument to <code>select</code>:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (<span class="hljs-built_in">select</span>(chan1.<span class="hljs-built_in">send</span>(something), chan2.<span class="hljs-built_in">recv</span>(&amp;somethingElse))) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">default</span>: <span class="hljs-comment">// ...</span>
}
</code></pre>
<p>That's fine, but what if I want to perform a channel operation on its own, e.g.</p>
<pre><code class="lang-c++ hljs">chan1.<span class="hljs-built_in">send</span>(something);
</code></pre>
<p>or</p>
<pre><code class="lang-c++ hljs">std::string message;
chan2.<span class="hljs-built_in">recv</span>(&amp;message);
</code></pre>
<p>How do I make sure that such calls actually <em>do</em> something?  One option is to
have separate member functions instead:</p>
<pre><code class="lang-c++ hljs">chan1.<span class="hljs-built_in">doSend</span>(something)

std::string message;
chan2.<span class="hljs-built_in">doRecv</span>(&amp;message);
</code></pre>
<p>That looks terrible.</p>
<p>At least with <code>recv</code> we could overload the member function to have a
no-argument version that just returns the received value:</p>
<pre><code class="lang-c++ hljs">std::string message = chan2.<span class="hljs-built_in">recv</span>();
</code></pre>
<p>This wouldn't work for <code>send</code>, though.</p>
<p>The equivalent code using the existing <code>send</code> and <code>recv</code> would be:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-built_in">select</span>(chan1.<span class="hljs-built_in">send</span>(something));

std::string message;
<span class="hljs-built_in">select</span>(chan2.<span class="hljs-built_in">recv</span>(&amp;message));
</code></pre>
<p>That also looks terrible.</p>
<p>If only send/receive events could somehow <em>know</em> whether they were part of a
<code>select</code> invocation.  If they could, then they could have the policy "if my
destructor is being called and I was never copied into a <code>select</code> call, then
call <code>select</code> with myself as the argument.</p>
<p>This way, code like this would still work:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-built_in">select</span>(chan1.<span class="hljs-built_in">send</span>(something));  <span class="hljs-comment">// Used in `select`; don't block in destructor</span>
</code></pre>
<p>but so would this:</p>
<pre><code class="lang-c++ hljs">chan1.<span class="hljs-built_in">send</span>(something);  <span class="hljs-comment">// Not used in `select`; call `select` in destructor</span>
</code></pre>
<p>For those of you currently thinking "that is a <em>terrible</em> idea," I agree with
you.  Returning an object whose destructor then performs an operation is <em>not</em>
the same thing as performing an operation before returning.</p>
<p>Also, aren't we supposed to avoid blocking in destructors? I mean, look at
<a href="https://en.cppreference.com/w/cpp/thread/thread/~thread">what std::thread does</a>. What about stack unwinding? Fortunately, a
destructor can detect whether there are currently any <a href="https://en.cppreference.com/w/cpp/error/uncaught_exception">exceptions in
flight</a>. It wouldn't surprise me if use of that
function is frowned upon, though.</p>
<p>Terrible idea or not, at least for the intended use case, the "history-aware
destructor" gets the job done.  My main concern would be that returned
temporaries are not destroyed until the "end of the full statement" in which
they were created, which would mean that if you create multiple send/receive
events as part of one complicated expression, the actual sends and receives
will all happen "at the semicolon," rather than at their call sites.  I just
don't see this being a problem, though, because there are only two reasons why
a <code>send</code> or <code>recv</code> would be part of a larger statement:</p>
<ol>
<li>You're using them in <code>select</code>.  Fine, that's their intended use.</li>
<li>You're using their return values as input to some expression other than a
call to <code>select</code>.  Like what?  The overloads in question don't return
meaningful values, so in what situation would you compose them into a
non-<code>select</code> expression?</li>
</ol>
<p>So, the "history-aware destructor" solution is viable.  How do we implement it?</p>
<p>Let's ignore C++11's move semantics for now, and restrict ourselves to copies.
The signature of the copy constructor looks like this:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-built_in">Object</span>(<span class="hljs-keyword">const</span> Object&amp; other);
</code></pre>
<p><em><code>const</code></em> <code>Object</code>, so we can't modify the other object.  Then how are we
supposed to mark it as "don't block in your destructor"?  We'll have to use
<code>mutable</code>:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span> {</span>
    <span class="hljs-keyword">mutable</span> <span class="hljs-keyword">bool</span> selectOnDestroy = <span class="hljs-literal">true</span>;

  <span class="hljs-keyword">public</span>:
    <span class="hljs-built_in">Object</span>(<span class="hljs-keyword">const</span> Object&amp; other)
    : <span class="hljs-built_in">selectOnDestroy</span>(other.selectOnDestroy) {
        other.selectOnDestroy = <span class="hljs-literal">false</span>;
    }

    ~<span class="hljs-built_in">Object</span>() {
        <span class="hljs-keyword">if</span> (selectOnDestroy &amp;&amp; !std::<span class="hljs-built_in">uncaught_exceptions</span>()) {
            <span class="hljs-built_in">select</span>(*<span class="hljs-keyword">this</span>);
        }
    }

    <span class="hljs-comment">// ...</span>
};
</code></pre>
<p>This breaks the idea of what it means to copy something.  Better would be to
make <code>Object</code> a move-only type, and modify <code>other.selectOnDestroy</code> in the move
constructor.  However, I want my library to support C++98, and so I'd need this
hack anyway.</p>
<p>Now,  how does an <code>Object</code> detect that it is being used in a call to
<code>select</code>?  We could set <code>selectOnDestroy = false</code> in the <code>file</code> member
function, but it's possible that <code>file</code> will never get called if another
event's <code>file</code> causes the <code>select</code> to be fulfilled.  What's needed is an
additional member function in the <em>event</em> concept:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">touch</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span></span>;
</code></pre>
<p><code>touch</code> is guaranteed to be called exactly once on each <em>event</em> before <code>file</code>
is called on anybody.  This way, each <em>event</em> gets an opportunity to mark
itself <code>selectOnDestroy = false</code>:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Object::touch</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>{
    selectOnDestroy = <span class="hljs-literal">false</span>;
}
</code></pre>
<p>With these changes, we support both usage styles for <code>send</code> and <code>recv</code>:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-comment">// block until we can send</span>
chan1.<span class="hljs-built_in">send</span>(something);

std::string message;
<span class="hljs-comment">// block until we can receive</span>
chan2.<span class="hljs-built_in">recv</span>(&amp;message);

<span class="hljs-comment">// block until we can either send or receive, but not both</span>
<span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (<span class="hljs-built_in">select</span>(chan1.<span class="hljs-built_in">send</span>(somethingElse), chan2.<span class="hljs-built_in">recv</span>(&amp;message))) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">default</span>: <span class="hljs-comment">// ...</span>
}
</code></pre>
<h2>Error Handling</h2>
<p>I haven't mentioned how error handling works in this channels library.  Does
<code>select</code> throw exceptions?  Does it return special values indicating errors?
How does a client of <code>select</code> know when an error occurs, and which kind?</p>
<p>My first idea was just to have <code>select</code> throw an exception when an error
occurs.  The trouble with this is that then if a client wants to handle the
error immediately, they have to indent the entire select/switch construct in a
<code>try</code> block:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-keyword">try</span> {
    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (<span class="hljs-built_in">select</span>(...)) {
        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// ...</span>
        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// ...</span>
    }
}
<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (...) {
    <span class="hljs-comment">// ...</span>
}
</code></pre>
<p>This wouldn't bother me if it weren't for that fact that one of the strengths
of the select/switch combination is that the "handler" for each case is right
there in the switch statement.  Indenting the switch in order to catch
exceptions means indenting all of the "handler" code as well.</p>
<p>This problem goes away if the client allows the exception to propagate out of
the scope in which <code>select</code> was called, which is probably the common case, and
the benefit of exceptions generally.  However, I still consider the <code>try</code> block
too high a price to pay.</p>
<p>As an alternative, <code>select</code> can return negative values for errors, and
associated with each error code there can be a descriptive (though
non-specific) error message.  For example:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> rc = <span class="hljs-built_in">select</span>(...)) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">default</span>:
        std::cerr &lt;&lt; <span class="hljs-string">"error in select(): "</span> &lt;&lt; <span class="hljs-built_in">errorMessage</span>(rc) &lt;&lt; <span class="hljs-string">"\n"</span>;
}
</code></pre>
<p>That looks okay.  But what if the client <em>wants</em> an exception to be thrown?
For that, we can replace the <code>errorMessage(int)</code> function with a
<code>SelectError(int)</code> constructor:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> rc = <span class="hljs-built_in">select</span>(...)) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">default</span>:
        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">SelectError</span>(rc);
}
</code></pre>
<p>This way, the extra code needed to use exceptions is just one statement.</p>
<p>So far so good, but there is still something missing.  My original idea of
using exceptions throughout had the added benefit that the <code>throw</code>er of the
exception can include runtime-specific information in the exception.  For
example, if copying/moving a value across a channel throws an exception, that
exact exception could be propagated to the caller of <code>select</code>.  Or, if the
error that occurred was at the system level, such as in the pthreads library,
then the relevant <code>errno</code> value could be included in the thrown exception.
This is not possible if all you have to work with is the <em>category</em> of error
(one of the negative return values of <code>select</code>).</p>
<p>Is there a way to combine the "throw an exception only if you want" behavior
above with the "preserve information known only at the site of the error"
property of using exceptions throughout?</p>
<p>The only way I thought to reconcile them is by using a thread-local exception
object.  When an error occurs within a call to <code>select</code>, an exception is
thrown, but then rather than letting the exception escape, <code>select</code> instead
catches it and copies it to thread-local storage.  This way, clients of
<code>select</code> can do the following:</p>
<pre><code class="lang-c++ hljs"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (<span class="hljs-built_in">select</span>(...)) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">default</span>:
        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">lastError</span>();
}
</code></pre>
<p>Maybe you don't like the idea of using thread-local storage.  It feels like a
global variable.  It feels like a hack.  It feels dirty.</p>
<p>Hey, it works.</p>
<p>There's one more alternative that I considered.  Instead of returning
an integer, what if <code>select</code> returned some object <em>implicitly convertible</em> to
an integer, but that also contained error information?</p>
<pre><code class="lang-c++ hljs"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (Selection rc = <span class="hljs-built_in">select</span>(...)) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">default</span>:
        <span class="hljs-keyword">throw</span> rc.<span class="hljs-built_in">exception</span>();
}
</code></pre>
<p>Now there's no need for thread-local storage, because the exception object that
clients might want to throw can be stored in the <code>Selection</code> object returned
by <code>select</code>.  To be honest, I still prefer the thread-local version, but I
might implement this variant as well, for naysayers.</p>
<h2>Supporting C++98 Sucks Without Boost</h2>
<p>I set out with the requirement that this channels library work with C++98 in
addition to more recent versions of the language.  One reason is simply the joy
of what I'll call "constraint driven design."  Another reason is that there are
droves of programmers out there still chained to dead-end platforms and
profitable balls of mud.  I highly doubt that any of those programmers are
about to start using my channels library in their legacy code, <em>but they could
if they wanted to</em>.</p>
<p>One easy way to support C++98 without losing your mind is use <a href="https://www.boost.org/">boost</a>,
the grandfather of all C++ libraries.  Boost is both at the cutting edge of
what can be done with the language, <em>and</em> provides portable C++98 versions of
various now-standard facilities.</p>
<p>Boost is also <em>big</em>.  That's not a viable excuse for my not using it, but
requiring clients of my library to have boost installed does contradict the
goal of providing a minimal, portable (except for Windows), self-contained
library.</p>
<p>An alternative to boost that I considered is <a href="https://github.com/bloomberg/bde">BDE</a>,
<a href="https://github.com/bloomberg">Bloomberg</a>'s C++ library.  It's about half the size of boost, and
certainly implements all of the facilities I'd need for the channels library,
but BDE is not nearly as widely used as boost, uses its own version of
<a href="https://github.com/bloomberg/bde/tree/master/groups/bsl/bsl%2Bbslhdrs">parts of the standard library</a>, and
<a href="https://github.com/bloomberg/bde/commits/master">does not seem to be maintained</a>.</p>
<p>Without boost or something like it, I'm on my own to use POSIX for whatever
I need.  At first I thought that this wouldn't be a big deal, but it ended up
consuming most of my development time.</p>
<p>Since you asked, here is the list of could-have-just-used-C++11 features that
I ended up implementing:</p>
<ul>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/threading/mutex.h">chan::Mutex</a>: Uses <code>pthread_mutex_t</code> under the hood.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/threading/lockguard.h">chan::LockGuard</a>: Works with a <code>chan::Mutex</code>.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/threading/sharedptr.h">chan::SharedPtr</a>: If <code>std::shared_ptr</code> is available, then it's
just a type alias for that.  Otherwise, it's a minimal implementation that
uses a <code>chan::Mutex</code> to protect its reference count.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/time/timepoint.h">chan::TimePoint</a>: In order to specify timeouts, I needed kosher
representations of points of time and intervals of time.  I could have just
used <code>int milliseconds</code>, but this is C++ and we can do better.
<code>chan::TimePoint</code> fills the same niche as
<a href="https://en.cppreference.com/w/cpp/chrono/time_point">std::chrono::time_point</a>.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/time/duration.h">chan::Duration</a>: Fills the same niche as
<a href="https://en.cppreference.com/w/cpp/chrono/duration">std::chrono::duration</a>.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/time/timepoint.cpp">chan::now</a>: Fills the same niche as
<a href="https://en.cppreference.com/w/cpp/chrono/steady_clock">std::chrono::steady_clock</a>.  I implemented it using
POSIX's <a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/time.h.html">CLOCK_MONOTONIC</a>.  The C++ standardization
committee <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3128.html">was right</a> to call it <code>steady_clock</code> instead of
<code>monotonic_clock</code>.  If a "monotonic" clock is used for measuring intervals,
then what would be the point of having an unsteady monotonic clock?  I
suppose you could use it to <em>order events</em> relative to each other, but I'd
say "clock" is too strong a word for a <em>counter</em>.  As far as I can tell
from reading on the internet, <code>CLOCK_MONOTONIC</code> always happens to be a steady
clock.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/select/random.h">chan::shuffle</a>: Fills the same niche as
<a href="https://en.cppreference.com/w/cpp/algorithm/random_shuffle">std::shuffle</a>.  In order to enforce fairness in breaking ties
among multiple <em>events</em> that might be fulfilled at the same time, <code>select</code>
randomly permutes the order in which it visits events.  I couldn't just use
C++98's <code>std::random_shuffle</code>, because it is not guaranteed to be thread
safe.  Instead, I wrote my own <code>shuffle</code> that takes a pseudo-random number
generator as an argument.  I had to implement the generator as well.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/select/random.h">chan::Random15</a>: Fills the same niche as
<a href="https://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine">std::linear_congruential_engine</a>.  I couldn't just use C++98's
<code>std::rand()</code>, because it is not guaranteed to be thread safe.  I also
couldn't use any of <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/erand48.html">POSIX's pseudo-random number generators</a>, because
even those APIs that could get around the thread safety problem are sometimes
<a href="https://www.evanjones.ca/random-thread-safe.html">not implemented so</a>.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/select/random.h">chan::randomInt</a>: Fills the same niche as
<a href="https://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution">std::uniform_int_distribution</a>.  If you need to restrict the range
of values produced by a pseudo-random number generator, you must be careful
not to introduce a bias in the output (such as is often the case if you use
<code>operator%</code> to do the restricting).  The implementation uses
<a href="https://en.wikipedia.org/wiki/Rejection_sampling">rejection sampling</a>.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/select/random.h">chan::systemRandom</a>: Fills the same niche as
<a href="https://en.cppreference.com/w/cpp/numeric/random/random_device">std::random_device</a>.  Pseudo-random numbers don't look
very random if they are seeded with a constant.  Instead, I need a random
starting value with which to seed the generator.  The implementation uses
<code>/dev/urandom</code>.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/select/lasterror.h">chan::lastError</a>: In order to implement the thread-local
exception feature, described above, I had to simulate C++11's <code>thread_local</code>
keyword.  Fortunately, every compiler under the sun supports the non-standard
<a href="https://en.wikipedia.org/wiki/Thread-local_storage#C_and_C++">__thread</a> keyword, so I just used that.  In addition to thread
local storage, I also needed to make sure that the object I put there was
properly aligned.  Without C++11's <a href="https://en.cppreference.com/w/cpp/types/aligned_storage">std::aligned_storage</a>
or <a href="https://en.wikipedia.org/wiki/Thread-local_storage#C_and_C++">std::max_align_t</a>, I had to use a <a href="https://github.com/dgoffredo/chan/blob/master/src/chan/select/lasterror.cpp">union</a>
of all of the built-in numeric types supported by C++98.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/macros/macros.h">CHAN_MAP</a>: Since C++98 does not have
<a href="https://en.cppreference.com/w/cpp/language/parameter_pack">variadic templates</a>, if I want to support up to, say,
nine arguments in <code>select</code>, then I have three options:</p>
<ol>
<li>Copy-paste nine nearly identical overloads of <code>select</code>, one for each arity.</li>
<li>Use a code generator during an additional build stage to produce the
repeated sections of the C++ source file.</li>
<li>Use the preprocessor during compilation to generate the repeated sections
of the C++ source file.</li>
</ol>
<p>I opted for option 3, and so there's a small library of preprocessor macros
in <a href="https://github.com/dgoffredo/chan/blob/master/src/chan/macros/macros.h">chan/macros/macros.h</a>, and their use in
<a href="https://github.com/dgoffredo/chan/blob/master/src/chan/select/select.h">chan/select/select.h</a> is a real eyesore, but at least I didn't
repeat myself.</p>
</li>
<li><p><a href="https://github.com/dgoffredo/chan/blob/master/src/chan/debug/currentthread.h">chan::currentThread</a>: Fills the same niche as
<a href="https://en.cppreference.com/w/cpp/thread/get_id">std::this_thread::get_id()</a>.  I use it for debugging only.  The
implementation uses <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_self.html">pthread_self</a>.</p>
</li>
</ul>
<p>I could have avoided implementing those twelve components if only I had
required C++11 or boost.  All together my implementations amount to an
additional 1173 lines of source.  That sounds like a lot, but considering that
it allows the library to support C++98 without depending on a large external
library, I think that it's justified.</p>
<h2>More</h2>
<p>That's enough of that.  If your curiosity is piqued, then you can
<a href="https://github.com/dgoffredo/chan#more">get started</a> playing with C++ channels and see how you like it.</p>


        </body>
    </html></div></content></entry><entry><title>Phone Server</title><link href="https://www.davidgoffredo.com/phone-server.html" /><id>https://www.davidgoffredo.com/phone-server.html</id><updated>2019-06-12</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/phone-server.html" />
        </head>
        <body>
            <h1>Phone Server</h1>
<p>I turned my old Android phone into a web server.  Here's how.</p>
<h2>Verizon is Evil</h2>
<p>I got tired of paying nearly $80 per month for my one phone line and the
less than one gigabyte of data I was using. Logging into my Verizon Wireless
account to look for a better deal, I found that the "recommended plan" for
me was one that costs even more money and allows five times more data.</p>
<p>After a little bit of research, I decided to try Google Fi.  The only problem
was that my aged Verizon-provided Droid Turbo does not support Google's
networks.  However, seeing that I would stand to be paying just under $30 a
month with Google, it didn't bother me to buy Google's cheapest offering, a new
Moto G6 for $100.</p>
<p>It was super easy.  I didn't even have to call Verizon (later on I did anyway,
just to make sure).  Google has this sorcery where you give them your Verizon
Wireless credentials and they transfer and cancel things on your behalf.</p>
<p>Anyway, new phone works, all is well.  But what about this old phone?  It's
practically unsellable, though it works just fine.</p>
<p>To be more specific, the Droid Turbo has the following specifications
(according to <a href="https://en.wikipedia.org/wiki/Droid_Turbo#Specifications">wikipedia</a>):</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/List_of_Qualcomm_Snapdragon_systems-on-chip#Snapdragon_800_series">Snapdragon 805 quad-core processor</a>
clocked at 2.7 GHz,</li>
<li><a href="https://en.wikipedia.org/wiki/List_of_Qualcomm_Snapdragon_systems-on-chip">Adreno 420 GPU</a> (on board the Snapdragon),</li>
<li>3 GB of memory,</li>
<li>32 GB flash storage,</li>
<li>3,900 mAh battery,</li>
<li>and Android 6 (Marshmallow).</li>
</ul>
<p>That's a pretty powerful computer.  Also, if this <a href="https://www.usenix.org/legacy/event/atc10/tech/full_papers/Carroll.pdf">study</a>
on the power consumption of a comparably more powerful phone is applicable,
then with the phone's mobile network radio and screen turned off, it will draw
less than one watt of power.  For comparison, a desktop computer might draw
<a href="http://energyusecalculator.com/electricity_computer.htm">between 60 and 300 watts</a>.
This is peanuts compared to the Flux Capacitor's minimum requirement of
<a href="https://www.youtube.com/watch?v=mjCRUvX2D0E">1.21 gigawatts</a>, but that's
another matter.</p>
<p>I have an idea!  Let's gain root access to the operating system underlying the
phone, wipe over that system with some Linux distribution having drivers
appropriate for the phone, install a web server on it, and expose it to the
internet!  Wouldn't that be fun?</p>
<p>No, it would not be fun.  It's not even possible, because Verizon is evil.</p>
<h3>The Un-unlockable Phone</h3>
<p>I'm well out of my depth on this subject, but as far as I understand from
reading on the internet, when a phone powers up, there's a little system that
loads a program that starts up another little system that loads a program that
etc., etc. until the "real" operating system is loaded and starts running
your beloved apps.</p>
<p>At each stage in this process, or at at least one stage, the code whose job it
is to further the loading of the system can check whether what it is loading
is "legit," for some definition of legit.  Qualcomm even makes a special
circuit that's effectively "write-once" memory, so that you can potentially
modify such logic (e.g. to say "don't check whether it's legit") but can never
change it back.</p>
<p>Many phones that reach the consumer as part of a wireless service contract
(such as my old one) have their "bootloader locked" so that the "ROM" loaded to
start the system must have a certain digital signature.  This means that
you can't do anything with the phone except view advertisements and buy
merchandise.  Were you to replace the contents of the ROM with anything else,
the phone would refuse to start, or perhaps permanently disable itself so that
you can never do anything with it again (called "bricking," apparently because
at that point the phone is little more than a silicon brick).</p>
<p>Fortunately, phone manufacturers are not, on the whole, in the business of
limiting the capabilities of their products, and so Motorola Android phones
have a process you can use to "unlock the bootloader," typically voiding the
phone's warranty in the process.</p>
<p>This involves turning off the phone, turning it on in a special way (holding
the power button and the volume-down button), copying down some magical
numbers, and typing them in to one of Motorola's websites.  Then, supposedly,
Motorola looks up some secret key based on what you typed, and then you can
enter that key into your phone and, voila!  From then on your phone will load
whatever happens to be in memory, digital signature be damned.</p>
<p>Except that it doesn't work if you got your phone from Verizon.  The website
will tell you that "your phone cannot be unlocked."  Why?  Because Verizon
insisted on this.  Because Verizon is evil.</p>
<p>This phone does not belong to you, it belongs to us.  We have no more use for
it, and so neither shall you.</p>
<h2>Life in Userland</h2>
<p>Ok, so it's disappointing that I can't completely control the system on the old
phone, but not all is lost.  After all, Android is designed to make writing
apps easy.  I could just code up my hobby as an application, rather than having
to replace the entire system.</p>
<p>In fact, I don't necessarily need to write any code.  Surely somebody has
already released an <a href="https://play.google.com/store/apps/details?id=jp.ubi.common.http.server&amp;hl=en_US">Android app</a>
that makes the phone serve web pages.  So, I can just download such an app from
the Play Store, configure it to serve my static website, and job done.</p>
<p>Where's the fun in that?  I want the full Linux experience.  Fortunately for
me, there's an option.  It's called <a href="https://play.google.com/store/apps/details?id=tech.ula&amp;hl=en_US">UserLAnd</a>.
These <a href="https://github.com/CypherpunkArmory/UserLAnd">wizards</a> have leveraged a
program called <a href="https://github.com/proot-me/proot">proot</a>, which allows you to
"chroot, mount --bind, and binfmt_misc" without root privileges.  proot uses a
Linux feature called <a href="https://en.wikipedia.org/wiki/Ptrace">ptrace</a> to trick
a running program into thinking that it's running as root in a chroot jail,
when in fact it's just being controlled by proot.</p>
<p>The folks at UserLAnd wrapped up proot in Android app clothes, including a
terminal emulator and <a href="https://busybox.net/">busybox</a>, a compact suite of Unix
tools, including, conveniently enough, a simple <a href="https://git.busybox.net/busybox/tree/networking/httpd.c">HTTP server</a>.</p>
<p>Once you have UserLAnd installed on your phone, you can instruct it to install
a Linux distribution in the proot jail, then start a "session" on that system
as a specified user with a specified password, and you're ready to go.</p>
<h2>ssh</h2>
<p>Working on the Linux command line using a phone is awful.  The first thing I
did is find out which ssh server was running on my new system and connected to
it from my laptop.  This involved me learning properly for the first time how
to use <a href="https://linux.die.net/man/1/ssh-keygen">ssh-keygen</a>, <a href="https://linux.die.net/man/1/ssh-copy-id">ssh-copy-id</a>,
and <a href="https://linux.die.net/man/1/ssh-agent">ssh-agent</a>.  Also, apparently
<a href="https://en.wikipedia.org/wiki/Dropbear_(software)">dropbear</a> exists and is an alternative to <a href="https://linux.die.net/man/8/sshd">sshd</a>.</p>
<p>The result is that I can now poke around inside my old phone from my laptop.
For example:</p>
<pre><code class="hljs">david@LAPTOP-DTKG66RE:~
$ ssh -Y david@192.168.1.4 -p 2022
Warning: No xauth data; using fake authentication data for X11 forwarding.
david@localhost:~$ ps -ef | head
UID        PID  PPID  C STIME TTY          TIME CMD
david    <span class="hljs-number"> 6995 </span>10263 <span class="hljs-number"> 0 </span>Jun12 ?        00:00:00 dropbear -E -p 2022
david    <span class="hljs-number"> 6996 </span><span class="hljs-number"> 6995 </span><span class="hljs-number"> 0 </span>Jun12 pts/0    00:00:00 -bash
10133    <span class="hljs-number"> 7136 </span> <span class="hljs-number"> 424 </span><span class="hljs-number"> 0 </span>Jun12 ?        00:00:19 com.google.android.inputmethod.latin
10082    <span class="hljs-number"> 9923 </span> <span class="hljs-number"> 424 </span><span class="hljs-number"> 0 </span>Jun11 ?        00:00:00 com.vzw.apnservice
10004    <span class="hljs-number"> 9970 </span> <span class="hljs-number"> 424 </span><span class="hljs-number"> 0 </span>Jun11 ?        00:00:00 com.android.providers.calendar
10006    <span class="hljs-number"> 9985 </span> <span class="hljs-number"> 424 </span><span class="hljs-number"> 0 </span>Jun11 ?        00:00:03 android.process.acore
10055   <span class="hljs-number"> 10005 </span> <span class="hljs-number"> 424 </span><span class="hljs-number"> 0 </span>Jun11 ?        00:02:11 com.google.android.gms
10055   <span class="hljs-number"> 10018 </span> <span class="hljs-number"> 424 </span><span class="hljs-number"> 0 </span>Jun11 ?        00:00:17 com.google.process.gapps
10085   <span class="hljs-number"> 10068 </span> <span class="hljs-number"> 424 </span><span class="hljs-number"> 0 </span>Jun11 ?        00:00:05 com.telecomsys.directedsms.android.SCG
david@localhost:~$
</code></pre>
<p>Alright!  Now all I needed to do is:</p>
<ul>
<li><code>sudo apt install git</code>,</li>
<li><code>git clone http://github.com/dgoffredo/dgoffredo.github.io</code></li>
<li><code>cd dgoffredo.github.io</code></li>
<li><code>make</code></li>
<li><code>busybox httpd -p 0.0.0.0:8080</code></li>
</ul>
<p>Now my phone is serving my blog at port 8080, but how do we access it from the
internet?</p>
<h2>Port Forwarding</h2>
<p>When you type an <a href="https://en.wikipedia.org/wiki/IP_address">IP address</a> into
your web browser, the browser attempts to establish one or more <a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP</a>
connections to that address on port 80.  But I'm not listening on port 80,
I'm listening on port 8080.  This is because you can't bind to ports below
1024 unless you are root.  Besides, even if I were listening on port 80, it's
my home wireless router that's getting the incoming connection. How is it to
know that it is meant to forward that connection to my old phone?</p>
<p>Fortunately, the <a href="https://www.downloads.netgear.com/files/GDC/WNDR3400V3/WNDR3400v3_UM_19June2014.pdf">Netgear WNDR3400v3</a>
wireless router sitting by my window supports something called
"port forwarding," which allows you to say "when you receive a connection on
port X, instead forward that connection to local address Y on port Z."</p>
<p>So, I navigated to my router's admin web interface at <code>http://192.168.1.1</code>, and
configured the following settings:</p>
<p><img src="port-forwarding.png" alt="port forwarding" /></p>
<p><code>192.168.1.4</code> is the local address of my old phone, which is connected to the
router over Wi-Fi, port <code>80</code> is the port on which I can expect HTTP requests to
enter my network, and port <code>8080</code> is the port on which my phone is listening.</p>
<p>You'll notice I also configured forwarding for <a href="https://en.wikipedia.org/wiki/Secure_Shell">ssh</a>,
so that I (or, now that I've written this, almost anybody) can remotely log in
to my old phone.  Remember, though, that the system to which I'm logging in is
just a proot jail running inside of an Android app having no special
permissions.  I suppose you could erase my SD card, which would be a dick move,
but since I just reset the phone there isn't anything on it to lose.  Go ahead
and add my phone to your botnet, see what I care!</p>
<h2>Address Reservation</h2>
<p>In addition to telling my router to forward HTTP requests to my phone, I also
need to tell it always to assign the local IP address <code>192.168.1.4</code> to the
phone.  Otherwise, the next time I restart the phone or the router, the phone
might be assigned a different local address (e.g. <code>192.168.1.5</code>).  The router
has another option for this, called "address reservation."</p>
<p><img src="address-reservation.png" alt="address reservation" /></p>
<p>This says that any device having my laptop's <a href="https://en.wikipedia.org/wiki/MAC_address">MAC address</a>
(which is just my laptop) will be assigned local address <code>192.168.1.2</code>, and any
device having my old phone's MAC address will be assigned local address
<code>192.168.1.4</code>.  So, that settles that.</p>
<h2>DNS</h2>
<p>At this point, the old Android phone sitting in my apartment and connected to
my Wi-Fi router is now accessible from the entire internet at <a href="http://74.68.159.94">74.68.159.94</a>,
my router's <em>public</em> IP address.</p>
<p>"Seventy-four, sixty-eight, one hundred fifty-nine, ninety-four" does not have
much of a ring to it, I admit.  Sure, it's kind of like a weird phone number
that you could memorize, but who wants to do that?</p>
<p>It would be better if that address could be looked up somewhere using an
alternative name -- a more human-friendly name.</p>
<p>Fortunately, such a system exists.  It's called the
<a href="https://en.wikipedia.org/wiki/Domain_Name_System">Domain Name System (DNS)</a>,
and, luckily enough, there are people who own domain names and are willing to
let you use a <a href="https://en.wikipedia.org/wiki/Subdomain">subdomain</a> of theirs
for free!</p>
<p>The service I used is called <a href="https://freedns.afraid.org/">freedns.afraid.org</a>.
Using this, I was able to associate the subdomains
<a href="http://dgoffredo.crabdance.com">dgoffredo.crabdance.com</a> and
<a href="http://dgoffredo.jerkface.net">dgoffredo.jerkface.net</a> with my public IP,
<code>74.68.159.94</code>.  So, when you type either of <em>those</em> names into your web
browser, the browser will ask DNS "what IP address(es) is (are) associated with
this domain?"  DNS will reply "74.68.159.94," and then the browser will send
an HTTP request to the old Android phone sitting in my apartment.</p>
<p>FreeDNS's web interface looks like this:</p>
<p><img src="freedns.png" alt="FreeDNS" /></p>
<p>That service even has a programmatic API, so in principle I could carry around
my web server it my pocket, and every time it entered a new network and was
assigned a new IP address, it could notify DNS of the new address, so that
my website remained available anywhere my old phone happened to be connected to
the internet.  Besides being a useless idea, it wouldn't even really work,
though, because I wouldn't be able to set up port forwarding on every network
that I enter.</p>
<h2>Now What?</h2>
<p>I have no answer.</p>
<p>After all, I don't <em>need</em> to host my blog from an old phone sitting in my
apartment.  It's already hosted "in the cloud" at <a href="https://dgoffredo.github.io/">dgoffredo.github.io</a>.
Instead, this was just for fun.</p>
<p>It got me thinking, though, about how we all have these powerful computers in
our pockets, connected to the internet, all day, every day.  Further, whenever
you're asleep at night, the phone is plugged into a power source, screen off,
still connected to the internet.</p>
<p>I looked into the idea of a distributed only-when-you're-sleeping volunteer
computing network, so that scientists could crunch the hard numbers on protein
folding and quasar searching and whatever else, at no cost to you except the
additional pennies in electricity that your phone would consume while you
sleep.</p>
<p>This already exists, of course.  It's called <a href="https://boinc.berkeley.edu/">BOINC</a>
and there's an <a href="https://play.google.com/store/apps/details?id=edu.berkeley.boinc&amp;hl=en_US">Android app</a>
for it that does exactly what I described.  It's now installed on my old phone
server, chewing up CPU cycles looking for possible signals in
<a href="https://www.ligo.caltech.edu/">LIGO's gravitational wave detection data</a>.</p>
<p>So, hack around with your phone! It's fun, and you might learn something.</p>


        </body>
    </html></div></content></entry><entry><title>Code Generation and the Minimum Feedback Arc Set</title><link href="https://www.davidgoffredo.com/break-cycles/break-cycles.html" /><id>https://www.davidgoffredo.com/break-cycles/break-cycles.html</id><updated>2019-01-02</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/break-cycles/break-cycles.html" />
        </head>
        <body>
            <h1>Code Generation and the Minimum Feedback Arc Set</h1>
<p>I ran into a graph problem a while back, and finally decided to write about it.</p>
<h2>Generating C++ Classes</h2>
<p>One day I'll write a <a href="https://github.com/bloomberg/bde/blob/master/groups/bdl/bdlat/doc/bdlat.txt">bdlat</a>-compatible C++ class
<a href="https://github.com/dgoffredo/bat-codegen">generator</a>. It will allow you to write things like <code>basic.bdlat</code>:</p>
<pre><code class="hljs">(<span class="hljs-name">package</span> basic

  (<span class="hljs-name"><span class="hljs-builtin-name">import</span></span> core)

  (<span class="hljs-name"><span class="hljs-builtin-name">type</span></span> Value
    <span class="hljs-string">"a generic value in a restricted type system"</span>
    (<span class="hljs-name">choice</span>
      (<span class="hljs-string">"integer"</span>  core/integer)
      (<span class="hljs-string">"decimal"</span>  core/decimal)
      (<span class="hljs-string">"string"</span>   core/string)
      (<span class="hljs-string">"optional"</span> (<span class="hljs-name">optional</span> Value))
      (<span class="hljs-string">"array"</span>    (<span class="hljs-name">array</span> Value))))
</code></pre>
<p>and then do something like</p>
<pre><code class="hljs"><span class="hljs-comment">$</span> <span class="hljs-comment">bat</span><span class="hljs-literal">-</span><span class="hljs-comment">codegen</span> --<span class="hljs-comment">language</span> <span class="hljs-comment">c</span>++ --<span class="hljs-comment">toplevel</span> <span class="hljs-comment">Lakos</span> --<span class="hljs-comment">component</span> <span class="hljs-comment">types</span> <span class="hljs-comment">basic</span><span class="hljs-string">.</span><span class="hljs-comment">bdlat</span>
</code></pre>
<p>to produce the files <code>basic_types.h</code> and <code>basic_types.cpp</code> containing the C++
class <code>Lakos::basic::Value</code>.</p>
<p>Here's a first shot at what the definition of <code>Lakos::basic::Value</code> might look
like:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Value</span> {</span>
    bdlb::Variant&lt;<span class="hljs-keyword">int64_t</span>,
                  bdldfp::Decimal64,
                  bsl::string,
                  bdlb::NullableValue&lt;Value&gt;,
                  bsl::vector&lt;Value&gt; &gt; 
        d_data;

  <span class="hljs-keyword">public</span>:
      <span class="hljs-comment">// ...</span>
};
</code></pre>
<p>A real implementation would need to account for choice elements having the same
type, and so the types in the <code>Variant</code> would each have to be tagged with a
distinct integer, but let's ignore that for now.</p>
<p>We've already run into worse trouble, because this code won't even compile.
<code>Value</code>'s size depends on its own size. To work around this, a level of
indirection is needed. Suppose the class template <code>Allocated&lt;T&gt;</code> were a
wrapper around a heap-allocated <code>T</code> referred to by a <code>T*</code>, but with value
semantics rather than pointer semantics (i.e. copying the <code>Allocated&lt;T&gt;</code>
copies the referred to <code>T</code> instance). Then <code>Value</code> can be defined as:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Value</span> {</span>
    bdlb::Variant&lt;<span class="hljs-keyword">int64_t</span>,
                  bdldfp::Decimal64,
                  bsl::string,
                  Allocated&lt;bdlb::NullableValue&lt;Value&gt; &gt;,
                  Allocated&lt;bsl::vector&lt;Value&gt; &gt; &gt;
        d_data;

  <span class="hljs-keyword">public</span>:
    <span class="hljs-comment">// ...</span>
};
</code></pre>
<p>That would work, because <code>Allocated&lt;T&gt;</code>'s size is independent of <code>T</code>.</p>
<h2>Larger Cycles</h2>
<p>When a type depends upon itself, it doesn't necessarily do so by having itself
as a member (as was nearly the case with <code>Value</code> above). It could be that the
type contains a type that contains the original type. Or it could be that the
type contains a type that contains a type that contains the original type, etc.</p>
<p>Generally, a type <code>A</code> <em>contains</em> a type <code>B</code> if any of the following is true:</p>
<ul>
<li><code>A</code> is a sequence or a choice having an element of type <code>B</code></li>
<li><code>A</code> is a sequence or a choice having an element of type <code>(optional B)</code></li>
<li><code>A</code> is a sequence or a choice having an element of type <code>(array B)</code></li>
</ul>
<p>We can think of a set of types as a directed graph where an edge points from
<code>A</code> to <code>B</code> if <code>A</code> <em>contains</em> <code>B</code>. Let's call such a directed graph a dependency
graph.</p>
<p>Then <code>A</code> <em>depends upon</em> <code>B</code> if <code>A</code> <em>contains</em> <code>B</code> or if <code>A</code> <em>contains</em> a <code>C</code>
where <code>C</code> <em>depends upon</em> <code>B</code>. That is, <code>A</code> <em>depends upon</em> <code>B</code> if there exists a
directed path from <code>A</code> to <code>B</code> in the dependency graph.</p>
<p>The graph for the types in <code>(package basic ...)</code>, above, looks like this:</p>
<p><img src="just-value.dot.png" alt="dependency graph of &quot;Value&quot;" /></p>
<p>It has one vertex and one edge, from <code>Value</code> to itself: because (before our
modification) <code>Value</code> <em>contains</em> <code>Value</code>. Our modification, though, creates
a level of indirection: replacing <code>Value</code> with <code>Allocated&lt;Value&gt;</code> within the
class definition removes the one edge in the graph, since <code>Value</code> no longer
contains <code>Value</code>:</p>
<p><img src="bare-value.dot.png" alt="no more cycle" /></p>
<p>A cycle involving only one vertex is not very interesting. But suppose the
dependency graph looked like this instead:</p>
<p><img src="cyclic.dot.png" alt="a more complicated dependency graph" /></p>
<p>How many cycles does that directed graph contain? I see two:</p>
<div><img src="cyclic.1.dot.png" /><img src="cyclic.2.dot.png" /></div><p>As before, we wish to make this directed graph acyclic by removing edges, where
we remove an edge by replacing the appearance of a type <code>T</code> within a class
definition with <code>Allocated&lt;T&gt;</code>.</p>
<p>Which edges should be removed?</p>
<p>Perhaps only because of the way the graph is drawn, I'm tempted to think of the
vertex <code>D</code> as the "main" type in the schema, and that makes me want to remove
the two edges inbound into it:</p>
<div><img src="cyclic.remove.1.dot.png" /><img src="cyclic.remove.2.dot.png" /></div><p>The graph now has no cycles. In fact, it would be a tree were it not for <code>B</code>
having two parents (<code>A</code> and <code>F</code>). Also, note that since this is a <em>directed</em>
graph, the edge sequence <code>FA</code>, <code>AB</code>, <code>BF</code> is not a path, and thus not a
cycle, because the edge between <code>B</code> and <code>F</code> goes from <code>F</code> to <code>B</code>, not the
other way around.</p>
<p>What we did from the C++ point of view is go into the definitions of the <code>A</code>
and <code>G</code> classes and replace all appearances of <code>D</code> with <code>Allocated&lt;D&gt;</code>.</p>
<p>You might have noticed that there is another way we could have broken the
cycles. Here's the original cyclic graph again:</p>
<p><img src="cyclic.dot.png" alt="a more complicated dependency graph" /></p>
<p>Both cycles share an edge, <code>DF</code>, and removing just that one breaks both
cycles:</p>
<div><img src="cyclic.remove.3.dot.png" /><img src="cyclic.remove.4.dot.png" /></div><p>Now graphviz wants to put <code>F</code> on top, interesting.</p>
<h2>Trade-offs</h2>
<p>What's the difference between the two de-cyclings demonstrated above? My first
thought was that less is more, and so removing the cycles by adding only one
<code>Allocated&lt;T&gt;</code> is better than adding two. That's not a fully reasoned argument,
though.</p>
<p>It's true that there is a cost associated with the level of indirection
introduced by <code>Allocated&lt;T&gt;</code>. Whenever you want to read or write to
something in that member, you have to chase a pointer, rather than just work
at an offset from the parent object. Also, when the <code>Allocated&lt;T&gt;</code> is
created, it must <em>allocate</em> space for the <code>T</code>. That cost might or might not
be significant depending on how memory is allocated.</p>
<p>How much is the total cost, though? Suppose that we replaced <em>every</em> member
of every class with <code>Allocated&lt;T&gt;</code>, as is done in dynamic and "object
oriented" languages. Would a running program notice the difference? Would
all the concern about "cache friendliness" matter?</p>
<p>Here's another thought. If the object of type <code>T</code> that you are replacing with an
<code>Allocated&lt;T&gt;</code> is much larger than <code>Allocated&lt;T&gt;</code> on the stack, and if access to
that <code>T</code> would have been infrequent anyway, it might actually be advantageous
to "tuck away" the rarely accessed member to allow adjacent objects to remain
in cache more often.</p>
<p>Nothing but a good suite of benchmarks could answer these questions.</p>
<p>Still, we have to at least get the code to compile. Making <em>everything</em> an
<code>Allocated&lt;T&gt;</code> seems at least unnecessary, if not detrimental. How, then, do
we decide which edges to remove from our cyclic graphs?</p>
<h2>The Minimum Feedback Arc Set</h2>
<p>Simple but suboptimal would be to say: "Any type that appears in a cycle must
be referred to only by <code>Allocated&lt;T&gt;</code>." This makes certain that all cycles are
removed, but potentially introduces many more <code>Allocated&lt;T&gt;</code> than necessary.</p>
<p>In the previous example, it would mean removing five edges instead of one:</p>
<div><img src="cyclic.remove.5.dot.png" /><img src="cyclic.remove.6.dot.png" /></div><p>Also, if there were edges coming in from other vertices into any of the vertices
<code>A</code>, <code>D</code>, <code>F</code>, or <code>G</code>, those edges too would be removed, even though they aren't
part of either cycle.</p>
<p>It seems a waste, but on the other hand, maybe it's simple to implement:
just walk through the graph with a clipboard, noting all of the nodes
appearing in cycles, and you're done. Surprisingly, enumerating all of the
cycles in a directed graph efficiently is <a href="https://blog.mister-muffin.de/2012/07/04/enumerating-elementary-circuits-of-a-directed_graph/">nontrivial</a>.</p>
<p>The problem is that there can be an awful lot of cycles in a directed graph.
A <a href="https://en.wikipedia.org/wiki/Complete_graph">complete directed graph</a> having <var>n</var> vertices and
<var>~n<sup>2</sup></var> edges can have up to <a href="https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF">this many</a> (simple)
cycles:</p>
<p><img src="max-cycles.png" alt="maximum number of cycles in complete digraph with n vertices" /></p>
<p>That's way more than <var>2<sup>n</sup></var>, so at worst we're totally
screwed.</p>
<p>Fortunately, no schema describing C++ classes is going to have a <em>complete</em>
dependency graph. Even if it were complete, then <var>n</var> would be small.</p>
<p>So, the shotgun method of "<code>Allocated&lt;T&gt;</code> for every <code>T</code> appearing in a cycle" is
still on the table, but can we do better?</p>
<p>What about the <em>smallest</em> set of edges we'd need to remove to make the
dependency graph acyclic? How do we calculate that set? In the example, above,
the answer is just the one edge <code>DF</code> — we can't remove <em>zero</em> edges, and
removing the <em>one</em> edge <code>DF</code> does the trick, and so that must be the smallest
set (assuming there is no other single edge that could be removed instead, and
there isn't).</p>
<p>The problem of finding the size (cardinality) of a minimal set of edges to
remove from a cyclic directed graph to render it acyclic is called <a href="https://en.wikipedia.org/wiki/Feedback_arc_set#Minimum_feedback_arc_set">the
minimum feedback arc set problem</a>, and it's
<a href="https://en.wikipedia.org/wiki/NP-completeness">NP-complete</a>, which <a href="https://www.mat.univie.ac.at/~neum/ms/minimum_feedback_arc_set.pdf">sucks</a>.</p>
<p>Apparently the solution can be approximated to an arbitrary level of accuracy,
but unless I find a tested implementation of one of the approximate or complete
solutions in an off-the-shelf graph library, I'm not about to implement it
myself for a code generator.</p>
<h2>A Potential Compromise</h2>
<p>I've come up with an algorithm that spits out a set of edges to remove from a
directed graph to render it acyclic, and as far as I can reason its worse case
time complexity is a polynomial in <code>n</code>, the number of vertices, and <code>e</code>, the
number of edges.</p>
<p>Now, maybe I'm wrong about that complexity, but regardless, either the
algorithm is more complex than I think, or it's doesn't always find the
<em>minimum</em> feedback arc set (or both). Because <var>P ≠ NP</var>. Probably.</p>
<p>Still seems pretty good to me, though. Here's how it works.</p>
<h3>Words</h3>
<p>The idea is to do a depth-first search for "cyclic edges," trying multiple
times, once for each vertex. The result is then the smallest of the sets of
"cyclic edges" found. If there multiple disconnected subgraphs, then the result
is the smallest union of the results from all subgraphs.</p>
<p>Choose a starting vertex, say, <code>A</code>. Walk the directed graph depth-first,
keeping track of ancestor nodes using a hash set <code>s</code> (i.e. add nodes "on the
way down" and remove them "on the way back up" — or mark the vertices in
place, if possible).</p>
<p>If you re-encounter an ancestor in your set <code>s</code> while traversing the graph,
note which edge brought you to the ancestor, take a step back (across that
edge) and then proceed as if that edge did not exist. That edge is what I called
a "cyclic edge," above.</p>
<p>This procedure will give you a set of edges removed from the graph in order
to make it acyclic <strong><em>from <code>A</code>'s point of view</em></strong>.</p>
<p>The hunch of this algorithm is that if you repeat the procedure starting at
each other vertex as well, then maybe you'll stumble upon the minimum
feedback arc set.</p>
<h3>Pictures</h3>
<p>Here is an animated example using the same graph we've been using.</p>
<p>Start at vertex <code>A</code> and do a depth-first traversal until you run into trouble:</p>
<p><img src="graph-animation-1.gif" alt="" /></p>
<p>In these animations, the purple (pink) node is the one from which we started,
blue indicates the edge or vertex we're currently examining, and gray indicates
an edge or vertex that we've already visited. Red marks edges that lead to a
vertex in the current set <code>s</code> of ancestors.</p>
<p>We detected that the edge <code>FA</code> creates a cycle, so we remember it, remove it,
and continue:</p>
<p><img src="graph-animation-2.gif" alt="" /></p>
<p>We detected that the edge <code>GD</code> creates a cycle, and so we did as before. Now
there's little left to do, from <code>A</code>'s point of view:</p>
<p><img src="graph-animation-3.gif" alt="" /></p>
<p>Thus the following two edges were removed to make the graph acyclic, starting
from <code>A</code>:</p>
<p><img src="edges-removed-a.png" alt="" /></p>
<p>Next we do the whole thing over, but this time starting from <code>B</code>. Starting from
<code>B</code> or <code>C</code> is not very interesting, since they're both leaves. The algorithm,
having run out of tree at <code>B</code> and noticing that there were still unvisited
edges, would proceed starting from another vertex, say, <code>A</code>. But we already did
<code>A</code>. So this adds no new information.</p>
<p>The next interesting vertex to start from, alphabetically, is <code>D</code>. Here is the
complete animation starting from <code>D</code>, and then the resulting edges removed:</p>
<div><img src="graph-animation-4.gif" /><img src="edges-removed-d.png" /></div><p>As you can see, one of the edges is different than before.</p>
<p>The punchline is the result starting from <code>F</code>. Here it is:</p>
<div><img src="graph-animation-5.gif" /><img src="edges-removed-f.png" /></div><p>So we discover that the minimum feedback arc set of this directed graph is
<code>{DF}</code>.</p>
<h3>Correctness</h3>
<p>As I said before, this algorithm can't be right. What might help is a
<a href="https://github.com/josch/cycle_test">test suite</a> that randomly generates directed graphs, and then compares
the result of this algorithm with the result of brute-force checking the power
set of the graph's edges. I could hope to find a counter-example that way,
though none very large, since the brute force solution is exponential in the
number of edges.</p>


        </body>
    </html></div></content></entry><entry><title>Llama JSON</title><link href="https://www.davidgoffredo.com/llama-json.html" /><id>https://www.davidgoffredo.com/llama-json.html</id><updated>2018-12-28</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/llama-json.html" />
        </head>
        <body>
            <h1>Llama JSON</h1>
<p><img src="llama.jpg" alt="" /> <img src="json.gif" alt="" /></p>
<p>Playing with a <a href="https://github.com/dgoffredo/llama">pet project</a>, I noticed a relationship between
<a href="https://en.wikipedia.org/wiki/S-expression">s-expressions</a> and <a href="https://en.wikipedia.org/wiki/JSON">JSON</a>.</p>
<p>The following JSON is also valid <a href="https://github.com/dgoffredo/llama">Llama</a>:</p>
<pre><code class="hljs">{
    <span class="hljs-attr">"hello"</span>: <span class="hljs-literal">null</span>, 
    <span class="hljs-attr">"isn't"</span>: [<span class="hljs-string">"it"</span>, <span class="hljs-number">2</span>, <span class="hljs-string">"conveninent?"</span>]
}
</code></pre>
<p>Since</p>
<ul>
<li><code>{</code>, <code>[</code>, and <code>(</code> are intechangable in Llama (though they must match up),</li>
<li>the comma (<code>,</code>) is considered whitespace, and</li>
<li>the colon (<code>:</code>) and <code>null</code> are valid symbol names,</li>
</ul>
<p>the above is the same as:</p>
<pre><code class="hljs">(<span class="hljs-string">"hello"</span> <span class="hljs-symbol">':</span> <span class="hljs-symbol">'null</span> <span class="hljs-string">"isn't"</span> <span class="hljs-symbol">':</span> (<span class="hljs-string">"it"</span> <span class="hljs-number">2</span> <span class="hljs-string">"convenient?"</span>))
</code></pre>
<p>Does that mean we can represent JSON text within Llama without having to escape
our quotes?</p>
<pre><code class="hljs">(<span class="hljs-name">Document</span> ((<span class="hljs-name">version</span> <span class="hljs-number">1.1</span>) (<span class="hljs-name">xmlns</span> <span class="hljs-string">"http://mycompany.com"</span>))
  (<span class="hljs-name">Widget</span> ((<span class="hljs-name"><span class="hljs-builtin-name">name</span></span> Fred))
    (<span class="hljs-name">_.content</span>
      (<span class="hljs-name">json</span> {
          <span class="hljs-string">"columns"</span>: [<span class="hljs-string">"Foo"</span>, <span class="hljs-string">"Bar"</span>, <span class="hljs-string">"Baz"</span>],
          <span class="hljs-string">"rows"</span>: [
              [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],
              [null, null, null]
          ]
      }))))
</code></pre>
<p>Ideally that would be the same as:</p>
<pre><code class="hljs">(Document ((version <span class="hljs-number">1.1</span>) (xmlns <span class="hljs-string">"http://mycompany.com"</span>))
  (Widget ((name Fred))
    (_.content
      <span class="hljs-string">"{
          <span class="hljs-subst">\"</span>columns<span class="hljs-subst">\"</span>: [<span class="hljs-subst">\"</span>Foo<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>Bar<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>Baz<span class="hljs-subst">\"</span>],
          <span class="hljs-subst">\"</span>rows<span class="hljs-subst">\"</span>: [
              [1, 2, 3],
              [null, null, null]
          ]
      }"</span>)))
</code></pre>
<p>Values could even be substituted in:</p>
<pre><code class="hljs">(<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> ([names [<span class="hljs-string">"John"</span> <span class="hljs-string">"Paul"</span> <span class="hljs-string">"George"</span> <span class="hljs-string">"Ringo"</span>]])
  (<span class="hljs-name">json</span> {
      <span class="hljs-string">"Beatles"</span>: names,
      <span class="hljs-string">"musicians"</span>: names,
      <span class="hljs-string">"Brits"</span>: names
  }))
</code></pre>
<p>yielding:</p>
<pre><code class="hljs"><span class="hljs-string">"{
     <span class="hljs-subst">\"</span>Beatles<span class="hljs-subst">\"</span>: [<span class="hljs-subst">\"</span>John<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>Paul<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>George<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>Ringo<span class="hljs-subst">\"</span>],
     <span class="hljs-subst">\"</span>musicians<span class="hljs-subst">\"</span>: [<span class="hljs-subst">\"</span>John<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>Paul<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>George<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>Ringo<span class="hljs-subst">\"</span>],
     <span class="hljs-subst">\"</span>Brits<span class="hljs-subst">\"</span>: [<span class="hljs-subst">\"</span>John<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>Paul<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>George<span class="hljs-subst">\"</span>, <span class="hljs-subst">\"</span>Ringo<span class="hljs-subst">\"</span>]
}"</span>
</code></pre>
<p>Perhaps even <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names">computed property names</a>:</p>
<pre><code class="hljs">(<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> ([key <span class="hljs-string">"Willy Wonka"</span>])
  (<span class="hljs-name">json</span> {[key]: <span class="hljs-string">"value"</span>}))
</code></pre>
<p>It's a happy coincidence that the syntax for computed property names looks like
a Llama list. The above expands to:</p>
<pre><code class="hljs">(<span class="hljs-name">json</span> ((<span class="hljs-string">"Willy Wonka"</span>) <span class="hljs-symbol">':</span> <span class="hljs-string">"value"</span>))
</code></pre>
<p>It's not hard to imagine that the <code>json</code> form might have a special case for
lists in property name position -- just pretend the (singular) contents of
the list were there instead.</p>
<p>The one thing that bothers me is Javascript-style unquoted property names:</p>
<pre><code class="hljs">{
    <span class="hljs-string">"quoted"</span>: <span class="hljs-string">"value"</span>,
    unquoted: <span class="hljs-string">"value"</span>
}
</code></pre>
<p>In Javascript (but notably <em>not</em> in JSON), that's the same as if the second
property name were in quotes:</p>
<pre><code class="hljs">{
    <span class="hljs-attr">"quoted"</span>: <span class="hljs-string">"value"</span>,
    <span class="hljs-attr">"unquoted"</span>: <span class="hljs-string">"value"</span>
}
</code></pre>
<p>In particular, in Javascript, even if there's a variable named <code>unquoted</code>, that
property name is literally <code>"unquoted"</code>, not the value of <code>unquoted</code>; hence
the special syntax for computed property names.</p>
<p>The <code>unquoted:</code> case is a challenge for our <code>json</code> feature, because
<code>unquoted:</code> is a single Llama token, and it's a valid symbol. It just
happens to end with the colon character. I could forbid this case to make
things easier, but why not support it? Llama is all about finding the sweet
spot between brevity and readability.</p>
<p>And what will <code>json</code> be, exactly, in Llama? Is it a procedure? A macro? A
special intrinsic?</p>
<p>I work through these and other questions in the following sections, and then
propose a definition for the <code>json</code> form.</p>
<h2>It's a Macro</h2>
<p>Well, there you have it. It has to be a macro, not a regular procedure. Here's
why:</p>
<pre><code class="hljs">(<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> ([: <span class="hljs-string">"colon lol"</span>])
  (<span class="hljs-name">json</span> {<span class="hljs-string">"foo"</span>: <span class="hljs-string">"bar"</span>}))
</code></pre>
<p>As perverse as that might seem, it's perfectly valid to bind the symbol named
<code>:</code> to some value. If <code>json</code> were a normal procedure, its arguments would be
evaluated first, and so the list of arguments going into <code>json</code> would end up
being <code>("foo" "colon lol" "bar")</code>, and we just can't have that. With a macro,
though, whatever literally appears as the argument is what is passed in, e.g.
the symbol <code>:</code>.</p>
<p>We're not out of the woods yet, though.</p>
<h2>Dealing with <code>null</code></h2>
<p><code>null</code> is a special symbol that has to be dealt with. The trouble is that
the symbol <code>null</code> might be bound to some value during evaluation. I think,
therefore, it's best to force <code>null</code> always to mean <code>null</code> within a <code>json</code>
form. However, it's reasonable to accept it as a valid value after
evaluation as well, so that this:</p>
<pre><code class="hljs">(<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> ([nada null])
  (<span class="hljs-name">json</span> {value: nada}))
</code></pre>
<p>yields</p>
<pre><code class="hljs"><span class="hljs-string">"{<span class="hljs-subst">\"</span>value<span class="hljs-subst">\"</span>: null}"</span>
</code></pre>
<p>As an aside, note that the appearance of <code>null</code> in the <code>let</code> binding, above,
would need to be <code>'null</code> (quoted) if <code>null</code> were bound to a value above. That
is, while the expression above is fine, the following:</p>
<pre><code class="hljs">(<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> ([null <span class="hljs-string">"oops!"</span>]
      [nada null])
  (<span class="hljs-name">json</span> {value: nada}))
</code></pre>
<p>would yield a different answer; namely,</p>
<pre><code class="hljs"><span class="hljs-string">"{<span class="hljs-subst">\"</span>value<span class="hljs-subst">\"</span>: <span class="hljs-subst">\"</span>oops!<span class="hljs-subst">\"</span>}"</span>
</code></pre>
<p>In order to refer to the literal <code>null</code>, it has to be prefixed by the quoting
character:</p>
<pre><code class="hljs">(<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> ([null <span class="hljs-string">"oops!"</span>]
      [nada 'null])
  (<span class="hljs-name">json</span> {value: nada}))
</code></pre>
<p>so that once again the result is <code>"{\"value\": null}"</code>.</p>
<p>So, <code>null</code> will be treated literally without evaluation when appearing in a
<code>json</code> form, but the value after evaluation will also be accepted.</p>
<h2>Distinguishing Arrays from Objects</h2>
<p>Trickier even than encountering the colon (<code>:</code>) symbol are the situations we
get into supporting <code>unquoted:</code> property names. Is the following a JSON
object, or JSON array having two elements?</p>
<pre><code class="hljs">(<span class="hljs-name">foo:</span> <span class="hljs-string">"bar"</span>)
</code></pre>
<p>Well, we have to decide. Fortunately, JSON does not have a concept of
"symbols" <a href="https://github.com/edn-format/edn">like</a> most <a href="https://en.wikipedia.org/wiki/S-expression">s-expressions</a> do, and so we can
forbid them outright in the final output of the <code>json</code> form (except for
<code>null</code>).</p>
<p>This means that the example above, <code>(foo: "bar")</code> is a JSON object with one
property named <code>"foo"</code> having the value <code>"bar"</code>.</p>
<p>Or is it? What if <code>foo:</code> were a name bound to some other value?</p>
<pre><code class="hljs">(<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> ([foo: <span class="hljs-string">"gotcha"</span>])
  (<span class="hljs-name">json</span> (<span class="hljs-name">foo:</span> <span class="hljs-string">"bar"</span>)))
</code></pre>
<p>Now we might want this to expand to <code>(json ("gotcha" "bar"))</code>, and that looks
at lot more like a JSON array having two elements, i.e. <code>["gotcha", "bar"]</code>.</p>
<p>What are we going to do? If the symbol <code>foo:</code> is bound to some value, and we
encounter <code>foo:</code> within a <code>json</code> form in a context where it could decide the
object-ness of a form, did the programmer intend for it to be the unquoted
property named <code>"foo"</code>, or did they intend for an array element having the value
bound to the name <code>foo:</code>?</p>
<p>It's once again tempting to disallow unqouted property names, as in JSON; but
then it seems awkward having the <code>{[computed]: "property names"}</code> borrowed from
Javascript without also having the unquoted property names.</p>
<p>One idea that helps is to parse symbols-ending-in-colon as unquoted property
names, <em>during macro expansion</em>, before any potential value substitution. This
means that</p>
<pre><code class="hljs">(<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> ([tricky: <span class="hljs-string">"look out!"</span>])
  (<span class="hljs-name">json</span> {tricky: <span class="hljs-string">"tricks"</span>}))
</code></pre>
<p>yields <code>"{\"tricky\": \"tricks\"}"</code> instead of <code>"[\"look out!\" \"tricks\"]"</code>.
That settles that ambiguity, but still we have a problem if the object or array
is <em>empty</em>.</p>
<h2>Empty Objects and Arrays</h2>
<p>What does <code>(json ())</code> yield? Is it <code>"[]"</code> or is it <code>"{}"</code>? Remember that the
different types of grouping characters are indistinguishable in Llama.</p>
<p>This presents a serious problem -- it reveals that in order to <em>truly</em> represent
JSON unambiguously in Llama, we'd need the help of the reader (the parser). The
reader knows, after all, which of <code>(</code>, <code>{</code>, or <code>[</code> it encountered, because it
must match it up with the corresponding <code>)</code>, <code>}</code>, or <code>]</code>.</p>
<p>I'm tempted to add this information to the output of the parser. Right now, a
datum is represented in the implementation as a Javascript object whose sole
property name tells you the type and the value at that propery is the value,
e.g.</p>
<pre><code class="hljs"><span class="hljs-keyword">const</span> listOfNumbers = {list: [{<span class="hljs-built_in">number</span>: <span class="hljs-string">"1"</span>}, {<span class="hljs-built_in">number</span>: <span class="hljs-string">"2"</span>}, {<span class="hljs-built_in">number</span>: <span class="hljs-string">"3"</span>}]},
      aNumber       = {<span class="hljs-built_in">number</span>: <span class="hljs-string">"13"</span>},
      aString       = {<span class="hljs-built_in">string</span>: <span class="hljs-string">"hello"</span>}<span class="hljs-comment">;</span>
</code></pre>
<p>The datum <code>listOfNumbers</code> could have been parsed from any of <code>(1 2 3)</code>,
<code>[1 2 3]</code>, or <code>{1 2 3}</code>, but the parser has jettisoned the distinction.</p>
<p>What if a list datum had an additional property, "suffix"?</p>
<pre><code class="hljs"><span class="hljs-keyword">const</span> listOfNumbers = {list: [{<span class="hljs-built_in">number</span>: <span class="hljs-string">"1"</span>}, {<span class="hljs-built_in">number</span>: <span class="hljs-string">"2"</span>}, {<span class="hljs-built_in">number</span>: <span class="hljs-string">"3"</span>}],
                       suffix: <span class="hljs-string">"]"</span>}<span class="hljs-comment">;</span>
</code></pre>
<p>This way, we would know that it was <code>[1 2 3]</code> to begin with.</p>
<p>Doing this would solve the "empty object or array?" problem, at the cost of
requiring that the <code>json</code> form be implemented as an intrinsic macro --
macros and procedures written in Llama would not have access to this extra
information found in the implementation. Instead, the macro would have to be
written in Javascript.</p>
<p>I see no way around it. The parser has to be modified to preserve the
distinction among the various flavors of lists. Doing this will require some
subtle changes "downstream," as well, since we have to make sure that we
don't accidentally consider a list's "suffix" as part of its value. That is,
I still want <code>(1 2 3)</code>, <code>[1 2 3]</code>, and <code>{1 2 3}</code> to be considered equal, except
in contexts where the distinction is explicitly relevant, like in the <code>json</code>
macro.</p>
<p>That work was done in <a href="https://github.com/dgoffredo/llama/commit/66197fa9774b1f3cbf17a5e76c6a81df44cce5d1">this commit</a>. In doing so, I accidentally
introduced a bug, which I fixed in <a href="https://github.com/dgoffredo/llama/commit/6ccf8a1b1c10909f8295ea906c1acc96e421031f">the following commit</a>.</p>
<h2>Numbers and <code>JSON.stringify</code></h2>
<p>There's one more sticky point, before we get into the implementation. When
first thinking about the implementation, I thought it would be convenient to
have the <code>json</code> form produce a <em>javascript</em> value suitable for JSON
serialization by <code>JSON.stringify</code>, so that all I have to do is "unpack" the
AST nodes into a form that <code>JSON.stringify</code> understands, and then it would
do the serialization for me.</p>
<p>This would work fine, except that the only way to get <code>JSON.stringify</code> to
print a number is to give it a Javascript <code>Number</code>. Javascript numbers,
though, are <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-terms-and-definitions-number-value">always</a> stored in <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format">IEEE double precision floating
point format</a>.</p>
<p>So what? Double precision floating point is good enough for everybody, right?</p>
<p>No! We must support arbitrary numbers, as defined in the Llama
<a href="https://github.com/dgoffredo/llama#grammar">grammar</a>! (Or, for that matter, the <a href="https://tools.ietf.org/html/rfc7159#section-6">JSON grammar</a>)</p>
<p>In order to do this, the textual content of Llama numbers has to be bypassed
through the JSON serializer, and since <code>JSON.stringify</code> does not support this
(even with its <code>replacer</code> argument!), we have to do our own JSON serialization.</p>
<p>Fortunately, JSON is simple, and also we can still use <code>JSON.stringify</code> for
<code>String</code>s, <code>null</code>, <code>Date</code>s, and any other non-numeric scalars.</p>
<h2>Helper Procedure</h2>
<p>Before we get into writing the <code>json</code> macro itself, recognize that the job
of converting an evaluated list of data (datums) into a string of JSON can
be done by a procedure, once the colon business has been taken care of, and
so the job of the <code>json</code> macro will be to take care of the colon business
and then produce an invocation of this procedure.</p>
<p>The input to the helper procedure will be a Llama datum that has received the
following pre-processing by the macro:</p>
<ul>
<li>Colon (<code>:</code>) symbols have been removed from lists that denote objects (lists
ending with <code>"}"</code>).</li>
<li>Unquoted property names (e.g. <code>foo:</code>) will have been replaced with strings
lacking the trailing colon (e.g. <code>"foo"</code>) in lists that denote objects.</li>
<li>Instances of the symbol <code>null</code> will have been quoted (in the lisp sense), so
that <code>null</code> means <code>null</code> regardless of whether the symbol is bound to a value.</li>
</ul>
<p>So, the job of the helper procedure is to convert, for example, the following
Llama (note the lack of colons):</p>
<pre><code class="hljs">[<span class="hljs-number">1</span>, {<span class="hljs-string">"foo"</span> <span class="hljs-string">"hi"</span> <span class="hljs-string">"bar"</span> null}]
</code></pre>
<p>whose AST is the following Javascript object:</p>
<pre><code class="hljs">{
    suffix: <span class="hljs-string">']'</span>,
    lis<span class="hljs-variable">t:</span> [
        {<span class="hljs-keyword">number</span>: <span class="hljs-string">'1'</span>},
        {
            suffix: <span class="hljs-string">'}'</span>,
            lis<span class="hljs-variable">t:</span> [
                {strin<span class="hljs-variable">g:</span> <span class="hljs-string">'foo'</span>},
                {strin<span class="hljs-variable">g:</span> <span class="hljs-string">'hi'</span>},
                {strin<span class="hljs-variable">g:</span> <span class="hljs-string">'bar'</span>},
                {symbo<span class="hljs-variable">l:</span> <span class="hljs-string">'null'</span>}
            ]
        }
    ]
}
</code></pre>
<p>into the following Javascript object:</p>
<pre><code class="hljs">[
    {[<span class="hljs-name">numberProperty</span>]: <span class="hljs-symbol">'1</span>'},
    {
        foo: <span class="hljs-symbol">'hi</span>',
        <span class="hljs-symbol">'bar</span><span class="hljs-symbol">':</span> null
    }
]
</code></pre>
<p>where <code>numberProperty</code> is a special string recognized by the JSON serializer to
mean the contained string is to be serialized as a number rather than as a
(quoted) string. You can see what I mean <a href="https://github.com/dgoffredo/llama/commit/f8c833f7fdc685385d2ae6b6bfb51cf2f4b61cac?diff=unified#diff-245ec6b1bfcfd67da8e9e5c842ac921bR69">in the code</a>.</p>
<p>The helper procedure is called <a href="https://github.com/dgoffredo/llama/commit/f8c833f7fdc685385d2ae6b6bfb51cf2f4b61cac?diff=unified#diff-245ec6b1bfcfd67da8e9e5c842ac921bR80">jsonify</a> in the
implementation. The only hairy part was walking through a list <a href="https://github.com/dgoffredo/llama/commit/f8c833f7fdc685385d2ae6b6bfb51cf2f4b61cac?diff=unified#diff-245ec6b1bfcfd67da8e9e5c842ac921bR44">two elements
at a time</a> (Javascript's "splat" (<code>...</code>) operator and
recursion helped here).</p>
<h2>The <code>json</code> Macro</h2>
<p>All that remains to write is the <code>json</code> macro itself, which will prepare its
argument for the helper procedure and then expand into an invocation of the
helper procedure with the modified argument, i.e.</p>
<pre><code class="hljs">(<span class="hljs-name">json</span> argument)
</code></pre>
<p>becomes</p>
<pre><code class="hljs">((<span class="hljs-name"><span class="hljs-builtin-name">lambda</span></span> <span class="hljs-name"><span class="hljs-builtin-name">...</span></span>) modified-argument)
</code></pre>
<p>so that then the evaluator will evaluate <code>modified-argument</code> before applying it
to the helper procedure.</p>
<p>The macro-time massaging of the argument happens in the
<a href="https://github.com/dgoffredo/llama/commit/f8c833f7fdc685385d2ae6b6bfb51cf2f4b61cac?diff=unified#diff-245ec6b1bfcfd67da8e9e5c842ac921bR194">removeColonsFromObjects</a> function, which also does the <code>null</code> quoting
(I need to change the name to indicate that...).</p>
<p>After the massaging, the macro expands to an <a href="https://github.com/dgoffredo/llama/commit/f8c833f7fdc685385d2ae6b6bfb51cf2f4b61cac?diff=unified#diff-245ec6b1bfcfd67da8e9e5c842ac921bR271">invocation
expression</a>, and finally the helper procedure does
its work before calling the <a href="https://github.com/dgoffredo/llama/commit/f8c833f7fdc685385d2ae6b6bfb51cf2f4b61cac?diff=unified#diff-245ec6b1bfcfd67da8e9e5c842ac921bR127">custom JSON serializer</a>.</p>
<p>With that, we're done! JSON embedded within a lisp, using macros.</p>
<h2>Example</h2>
<p>Input (Llama):</p>
<pre><code class="hljs">(<span class="hljs-name">pml</span> ((<span class="hljs-name">xmlns</span> http://www.proprietary.com/ui)
      (<span class="hljs-name">xmlns:pml</span> http://www.proprietary.com/markup))
  (<span class="hljs-name">Table</span> ((<span class="hljs-name">pml:name</span> tickets))
    (<span class="hljs-name">_.dataSource</span>
      (<span class="hljs-name">pml:json</span> (<span class="hljs-name">json</span>
        (<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> ([(<span class="hljs-name">row</span> ticket status owner desc)
               {ticket: ticket, status: status, owner: owner, desc: desc}])
        {
            columnTitles: [<span class="hljs-string">"Ticket"</span>, <span class="hljs-string">"Status"</span>, <span class="hljs-string">"Owner"</span>, <span class="hljs-string">"Description"</span>],
            rows: [
                (<span class="hljs-name">row</span> <span class="hljs-number">11333</span> <span class="hljs-string">"open"</span>   <span class="hljs-string">"Bob"</span>   <span class="hljs-string">"The darn thing doesn't work"</span>)
                (<span class="hljs-name">row</span> <span class="hljs-number">11334</span> <span class="hljs-string">"closed"</span> <span class="hljs-string">"Bob"</span>   <span class="hljs-string">"Could you do this for me?"</span>)
                (<span class="hljs-name">row</span> <span class="hljs-number">11332</span> <span class="hljs-string">"open"</span>   <span class="hljs-string">"Alice"</span> <span class="hljs-string">"URGENT: label is wrong color"</span>)
            ]
        }))))))
</code></pre>
<p>Output (XML, after additional formatting):</p>
<pre><code class="hljs">&lt;pml xmlns=<span class="hljs-string">"http://www.proprietary.com/ui"</span>
     xmlns:pml=<span class="hljs-string">"http://www.proprietary.com/markup"</span>&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Table</span> <span class="hljs-attr">pml:name</span>=<span class="hljs-string">"tickets"</span>&gt;</span>
    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">_.dataSource</span>&gt;</span>
      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">pml:json</span>&gt;</span></span><span class="xquery">{
          <span class="hljs-string">"columnTitles"</span>: [<span class="hljs-string">"Ticket"</span>, <span class="hljs-string">"Status"</span>, <span class="hljs-string">"Owner"</span>, <span class="hljs-string">"Description"</span>],
          <span class="hljs-string">"rows"</span>: [
              {
                  <span class="hljs-string">"ticket"</span>: <span class="hljs-number">11333</span>,
                  <span class="hljs-string">"status"</span>: <span class="hljs-string">"open"</span>,
                  <span class="hljs-string">"owner"</span>:  <span class="hljs-string">"Bob"</span>,
                  <span class="hljs-string">"desc"</span>:   <span class="hljs-string">"The darn thing doesn't work"</span>
              }</span><span class="xml">,
              </span><span class="xquery">{
                  <span class="hljs-string">"ticket"</span>: <span class="hljs-number">11334</span>,
                  <span class="hljs-string">"status"</span>: <span class="hljs-string">"closed"</span>,
                  <span class="hljs-string">"owner"</span>:<span class="hljs-string">"Bob"</span>,
                  <span class="hljs-string">"desc"</span>: <span class="hljs-string">"Could you do this for me?"</span>
              }</span><span class="xml">,
              </span><span class="xquery">{
                  <span class="hljs-string">"ticket"</span>: <span class="hljs-number">11332</span>,
                  <span class="hljs-string">"status"</span>: <span class="hljs-string">"open"</span>,
                  <span class="hljs-string">"owner"</span>:<span class="hljs-string">"Alice"</span>,
                  <span class="hljs-string">"desc"</span>: <span class="hljs-string">"URGENT: label is wrong color"</span>
              }</span><span class="xml">
          ]
      }<span class="hljs-tag">&lt;/<span class="hljs-name">pml:json</span>&gt;</span></span><span class="xml">
    <span class="hljs-tag">&lt;/<span class="hljs-name">_.dataSource</span>&gt;</span></span><span class="xml">
  <span class="hljs-tag">&lt;/<span class="hljs-name">Table</span>&gt;</span></span>
&lt;/pml&gt;
</code></pre>
<p>You can try it out by cloning <a href="https://github.com/dgoffredo/llama">Llama</a> onto your computer and
opening the <a href="https://github.com/dgoffredo/llama#using-the-playground">playground</a> in a web browser.</p>


        </body>
    </html></div></content></entry><entry><title>Callbacks (Part 2)</title><link href="https://www.davidgoffredo.com/callbacks2.html" /><id>https://www.davidgoffredo.com/callbacks2.html</id><updated>2018-03-18</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/callbacks2.html" />
        </head>
        <body>
            <h1>Callbacks (Part 2)</h1>
<p><a href="callbacks.html">Previously</a> I described an API for submitting a query asynchronously
in such a way that the caller provides the object into which the query results
are written, but without having to specify an object factory.  It looked like
this:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseAccessor</span> {</span>

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
    <span class="hljs-keyword">using</span> Callback = 
        std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(<span class="hljs-keyword">const</span> std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(Results&amp;)&gt;&amp;)&gt;;

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">asyncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp;  query,
                    <span class="hljs-keyword">const</span> Callback&lt;Results&gt;&amp; callback)</span></span>;
};
</code></pre>
<p>For brevity, let's define a couple of macros<a id="macros" />:</p>
<pre><code class="hljs">#define FN(<span class="hljs-params">...</span>) std<span class="hljs-type">::function</span>&lt;<span class="hljs-literal">void</span>(__VA_ARGS__)&gt;
#define CB(<span class="hljs-params">...</span>) const FN(__VA_ARGS__)&amp;
</code></pre>
<p>So we have:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseAccessor</span> {</span>

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">asyncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp;  query,
                    CB(CB(Results&amp;)          callback);
};
</span></span></code></pre>
<p>What if, in addition to producing result sets, this database API also has a
concept of output parameters?  These are like query parameters, except that
their values are overwritten by the query rather than used in it.</p>
<p>We could define an overload of <code>DatabaseAccessor::asyncQuery</code> that takes a
callback with an amended signature:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseAccessor</span> {</span>

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">asyncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp;  query,
                    CB(CB(Results&amp;)          callback);

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results, <span class="hljs-keyword">typename</span> OutputParameters&gt;
    <span class="hljs-keyword">void</span> asyncQuery(<span class="hljs-keyword">const</span> std::string_view&amp;            query,
                    CB(CB(Results&amp;, OutputParameters&amp;) callback);
};
</span></span></code></pre>
<p>If the user wants output parameters, then he provides a callback that fits
the second signature, while if he doesn't want output parameters, he specifies
a callback that fits the first signature.</p>
<h2>Injecting a Default</h2>
<p>Most users don't want output parameters.  They're a strange concept in
databases, they can always be replaced by multiple result sets instead, and
Microsoft SQL Server is the only database I've worked with that has them.  It
would be ideal to appropriate as little code in our library to support them as
possible.</p>
<p>To this end, observe that since this library deduces the structure of its
output from the types of the output parameters (using <a href="https://bloomberg.github.io/bde/group__bdlat.html">this</a>), to omit
the <code>OutputParameters</code> argument is the same as if you specified one, but one
whose structure describes the absence of data: an "empty sequence."</p>
<p>In other words, if you don't specify the <code>OutputParameters</code>, the library knows
to expect no output parameters from the query.  Also, though, if you specify
an <code>OutputParameters</code> that has no members, the library knows to expect no
output parameters.</p>
<p>So, let's define a helper type, <code>EmptySequence</code>, that has no members and
introspection into which indicates "nothing to put here."  Then the first
overload of <code>DatabaseAccessor::asyncQuery</code> can be written in terms of the
second, "as if" the user had specified an <code>EmptySequence</code> for
<code>OutputParameters</code> rather than not specifying that argument at all.</p>
<p>How do you write this?  I find it very tricky to think about.</p>
<h2>Writing the Forwarding Implementation</h2>
<p>Let's look at the code again:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseAccessor</span> {</span>

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">asyncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp;  query,
                    CB(CB(Results&amp;)          callback);

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results, <span class="hljs-keyword">typename</span> OutputParameters&gt;
    <span class="hljs-keyword">void</span> asyncQuery(<span class="hljs-keyword">const</span> std::string_view&amp;            query,
                    CB(CB(Results&amp;, OutputParameters&amp;) callback);
};
</span></span></code></pre>
<p>We want to implement the first in terms of the second using the <code>EmptySequence</code>
type for the dummy <code>OutputParameters</code>.</p>
<pre><code class="hljs"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DatabaseAccessor::asyncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp; query,
                                  CB(CB(Results&amp;)         callback)
{
    asyncQuery(query, <span class="hljs-comment">/* ? */</span>);
}
</span></span></code></pre>
<p>The difference, of course, is in the second argument of each <code>asyncQuery</code>
overload.  We're given a function that takes a function that takes a
<code>Results&amp;</code>, and we need to call the overload that takes a function that takes
a function that takes a <code>Results&amp;</code> and an <code>EmptySequence&amp;</code>, and we must
additionally see to it that the <code>EmptySequence&amp;</code> refers to some (dummy)
instance.</p>
<p>One way to think about this is that we need a function, <code>injectDummy</code>, that
maps one type of function into another type of function:</p>
<pre><code class="hljs">template &lt;typename Results&gt;
void DatabaseAccessor::<span class="hljs-built_in">asyncQuery</span>(const std::string_view&amp; query,
                                  <span class="hljs-built_in">CB</span>(<span class="hljs-built_in">CB</span>(Results&amp;)         callback)
{
    <span class="hljs-built_in">asyncQuery</span>(query, <span class="hljs-built_in">injectDummy</span>(callback));
}
</code></pre>
<p>where <code>injectDummy</code> has the following signature:</p>
<pre><code class="hljs">template &lt;typename Results&gt;
<span class="hljs-function"><span class="hljs-keyword">FN</span>(<span class="hljs-params">CB(<span class="hljs-params">Results&amp;, EmptySequence&amp;</span>)</span>) <span class="hljs-title">injectDummy</span>(<span class="hljs-params">CB(<span class="hljs-params">CB(<span class="hljs-params">Results&amp;</span>)</span>)</span>)</span>;
</code></pre>
<p>You might want to look again at what the <code>FN</code> and <code>CB</code> <a href="#macros">macros</a> mean.</p>
<p>You know that thing where when you have a cube drawn in two dimensions, you can
think of some of its corners as popping out of the page at you <em>or</em> as going
into the page, and if you do something weird in your mind you can switch back
and forth?</p>
<p>I feel like figuring out an answer to this C++ puzzle gave me a new sort of
facility along those lines.  Here's the implementation of <code>injectDummy</code> that I
came up with, written using lambda expressions:</p>
<pre><code class="hljs">template &lt;typename Results&gt;
<span class="hljs-function"><span class="hljs-keyword">FN</span>(<span class="hljs-params">CB(<span class="hljs-params">Results&amp;, EmptySequence&amp;</span>)</span>) <span class="hljs-title">injectDummy</span>(<span class="hljs-params">CB(<span class="hljs-params">CB(<span class="hljs-params">Results&amp;</span>)</span>) callback</span>)
</span>{
    <span class="hljs-keyword">return</span> [=](CB(Results&amp;, EmptySequence&amp;) innerCallback) {
        EmptySequence dummy;
        callback([&amp;](Results&amp; results) {
            innerCallback(results, dummy);
        });
    };
}
</code></pre>
<p>It's not complicated at all once it's written down.</p>
<p>I don't know enough Haskell to say whether there's a fancy name for this
operation, but it does feel a bit mathy, doesn't it?</p>
<p>So there we have it -- the no-output-parameters overload written in terms of 
the output-parameters overload:</p>
<pre><code class="hljs">template &lt;typename Results&gt;
<span class="hljs-function"><span class="hljs-keyword">FN</span>(<span class="hljs-params">CB(<span class="hljs-params">Results&amp;, EmptySequence&amp;</span>)</span>) <span class="hljs-title">injectDummy</span>(<span class="hljs-params">CB(<span class="hljs-params">CB(<span class="hljs-params">Results&amp;</span>)</span>) callback</span>)
</span>{
    <span class="hljs-keyword">return</span> [=](CB(Results&amp;, EmptySequence&amp;) innerCallback) {
        EmptySequence dummy;
        callback([&amp;](Results&amp; results) {
            innerCallback(results, dummy);
        });
    };
}

template &lt;typename Results&gt;
<span class="hljs-keyword">void</span> DatabaseAccessor::asyncQuery(<span class="hljs-keyword">const</span> std::string_view&amp; query,
                                  CB(CB(Results&amp;)         callback)
{
    asyncQuery(query, injectDummy(callback));
}
</code></pre>
<p>A colleague of mine called this "like the opposite of bind," or maybe it's an
inside-out bind.  Six lines of C++11 is what it is.</p>


        </body>
    </html></div></content></entry><entry><title>Callbacks (Part 1)</title><link href="https://www.davidgoffredo.com/callbacks.html" /><id>https://www.davidgoffredo.com/callbacks.html</id><updated>2018-03-17</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/callbacks.html" />
        </head>
        <body>
            <h1>Callbacks (Part 1)</h1>
<p>I ran into something cool related to callbacks lately, and I have to tell you
about it.</p>
<h2>User-Specified Types</h2>
<p>Say you're writing an API for some sort of query or RPC system.  Maybe you're
writing a client library for a request/response message passing framework, or
maybe you're writing a database accessor.</p>
<p>Also suppose that there's <a href="https://bloomberg.github.io/bde/group__bdlat.html">some system</a> of compile-time introspection
that you and your users have agreed upon, so that they can indicate the
structure of their data in the types of object that they use with your API.</p>
<p>This means that one way to write your API is using templates.  For example:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseAccessor</span> {</span>

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results, <span class="hljs-keyword">typename</span> Parameters&gt;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">syncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp; query,
                   Results&amp;                results,
                   <span class="hljs-keyword">const</span> Parameters&amp;       parameters)</span></span>;
};
</code></pre>
<p>The user specifies a (SQL?) query, a reference to an object into which the
results can be written, and a reference to an object from which the query
parameters (if any) can be read.</p>
<p><code>DatabaseAccessor::syncQuery</code> will submit the query to the database, and then
when results are received, it will deduce how to unpack them into <code>results</code> by
using the <a href="bdlat">introspection facilities</a> associated with the type <code>Results</code>.
Pretty cool.</p>
<h2>Runtime Object Structure</h2>
<p>The above recipe works even if the structure of <code>Results</code> is not certain at
compile time.  It could be that when a <code>Results</code> object is created, it takes
as one of its constructor arguments a "schema" object that determines how the
object will behave at runtime, e.g. "pretend to be an array of strings," or
"pretend to be a choice between a string named 'foo' and a pair of integers
named 'bar'."</p>
<p>The reason that it works is that in this synchronous API, the user creates the
<code>Results</code> object, not the library:</p>
<pre><code class="hljs">DynamicValue      results(parse<span class="hljs-constructor">Schema(<span class="hljs-string">"fpml_exotics.xsd"</span>)</span>, <span class="hljs-string">"Stellar"</span>);
StellarParameters params = <span class="hljs-comment">/* ... */</span>;

database.sync<span class="hljs-constructor">Query(<span class="hljs-string">"execute GetContract(@id, @client);"</span>, <span class="hljs-params">results</span>, <span class="hljs-params">params</span>)</span>;
</code></pre>
<p><em>But what about an asynchronous API?</em>  In that case, it's the library that will
be creating the <code>Results</code> object.  For example:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseAccessor</span> {</span>

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
    <span class="hljs-keyword">using</span> Callback = std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(Results&amp;)&gt;;

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results, <span class="hljs-keyword">typename</span> Parameters&gt;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">asyncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp;  query,
                    <span class="hljs-keyword">const</span> Callback&lt;Results&gt;&amp; callback,
                    <span class="hljs-keyword">const</span> Parameters&amp;        parameters)</span></span>;
};
</code></pre>
<p>The user provides a function that takes a <code>Results</code>, but where does that
<code>Results</code> object come from?  It's created by the library:</p>
<pre><code class="hljs"><span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">onResponse</span>(<span class="hljs-params">DynamicValue&amp; results</span>)</span> {
   <span class="hljs-comment">// ...</span>
}

database.asyncQuery(<span class="hljs-string">"execute GetContract(@id, @client);"</span>,
                    <span class="hljs-attr">std</span>::<span class="hljs-function"><span class="hljs-keyword">function</span>&lt;<span class="hljs-title">void</span>(<span class="hljs-params">DynamicValue&amp;</span>)&gt;(<span class="hljs-params">&amp;onResponse</span>), 
                    <span class="hljs-title">params</span>)</span>;
</code></pre>
<p>What happened to the stuff about the schema?  This is trouble, because unlike
with a type whose structure is known at compile-time, the library can't just
default construct an object and fill it up using introspection, and unlike in
the synchronous API, the library can't have the user provide the object.</p>
<p>Or can it?</p>
<h2>Factories</h2>
<p>One way to get around this shortcoming is to have a version of the asynchronous
API that takes an additional "factory" argument from which objects of the
<code>Results</code> type can be constructed.  This way, the user can specify any dynamic
construction logic in the factory.  It might look like this:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseAccessor</span> {</span>

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
    <span class="hljs-keyword">using</span> Callback = std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(Results&amp;)&gt;;

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
    <span class="hljs-keyword">using</span> Factory = std::function&lt;<span class="hljs-built_in">Results</span>()&gt;;

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results, <span class="hljs-keyword">typename</span> Parameters&gt;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">asyncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp;  query,
                    <span class="hljs-keyword">const</span> Callback&lt;Results&gt;&amp; callback,
                    <span class="hljs-keyword">const</span> Parameters&amp;        parameters,
                    <span class="hljs-keyword">const</span> Factory&lt;Results&gt;&amp;  resultsFactory)</span></span>;
};
</code></pre>
<p>This solves the conundrum.  Now the user can write this:</p>
<pre><code class="hljs">DynamicValue <span class="hljs-function"><span class="hljs-title">makeStellar</span>(<span class="hljs-params" />)</span> {
    <span class="hljs-keyword">return</span> DynamicValue(parseSchema(<span class="hljs-string">"fpml_exotics.xsd"</span>), <span class="hljs-string">"Stellar"</span>);
}

<span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">onResponse</span>(<span class="hljs-params">DynamicValue&amp; results</span>)</span> {
   <span class="hljs-comment">// ...</span>
}

database.asyncQuery(<span class="hljs-string">"execute GetContract(@id, @client);"</span>,
                    <span class="hljs-attr">std</span>::<span class="hljs-function"><span class="hljs-keyword">function</span>&lt;<span class="hljs-title">void</span>(<span class="hljs-params">DynamicValue&amp;</span>)&gt;(<span class="hljs-params">&amp;onResponse</span>), 
                    <span class="hljs-title">params</span>,
                    <span class="hljs-title">std</span>::<span class="hljs-function"><span class="hljs-keyword">function</span>&lt;<span class="hljs-title">DynamicValue</span>(<span class="hljs-params" />)&gt;(<span class="hljs-params">&amp;makeStellar</span>))</span>; 
</span></code></pre>
<h2>A Prettier Way</h2>
<p>I don't like the factory.  I don't know why, it just makes me feel bad.  You
can see another way, though, once you observe that <code>resultsFactory</code> is not just
a function that returns a <code>Results</code>, it's any code at all that happens to
return a <code>Results</code>.  So, in addition to providing a hook for the user to give
us a particular <code>Results</code>, we've also provided a hook to do whatever they want
at that point in the API's operation.</p>
<p>The user gives us a callback that takes a <code>Results</code>, but in general we don't
know how to create a <code>Results</code> suitable for putting results into, and so the
user additionally gives us a <code>Results</code> factory.  So it's:</p>
<ol>
<li>Execute my query.</li>
<li>When the results are ready, call my factory to get a <code>Results</code> object.</li>
<li>Fill the <code>Results</code> object with the results.</li>
<li>Call my callback.</li>
</ol>
<p><strong>But the following would accomplish the same thing</strong>:</p>
<ol>
<li>Execute my query.</li>
<li>When the results are ready, call my (different) callback with a function
that takes <code>Results</code>.</li>
<li>I'll create <code>Results</code> object and call your continuation with it (or not).</li>
</ol>
<p>In code, this alternative contract looks like this:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseAccessor</span> {</span>

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results&gt;
    <span class="hljs-keyword">using</span> Callback = 
        std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(<span class="hljs-keyword">const</span> std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(Results&amp;)&gt;&amp;)&gt;;

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results, <span class="hljs-keyword">typename</span> Parameters&gt;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">asyncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp;  query,
                    <span class="hljs-keyword">const</span> Callback&lt;Results&gt;&amp; callback,
                    <span class="hljs-keyword">const</span> Parameters&amp;        parameters)</span></span>;
};
</code></pre>
<p>That hurts my head a little at first.  <code>Callback&lt;Results&gt;</code> is a function that
returns <code>void</code> and takes as its one argument a function that returns <code>void</code>
and takes as its one argument a <code>Results&amp;</code>.</p>
<p>Seeing it used helps:</p>
<pre><code class="hljs"><span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">onResponse</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> std::<span class="hljs-keyword">function</span>&lt;<span class="hljs-keyword">void</span>(DynamicValue&amp;)&gt; fillResults</span>)</span> {
    DynamicValue results(parseSchema(<span class="hljs-string">"fpml_exotics.xsd"</span>), <span class="hljs-string">"Stellar"</span>);
    fillResults(results);
    <span class="hljs-comment">// ...</span>
}

database.asyncQuery(<span class="hljs-string">"execute GetContract(@id, @client);"</span>,
                    <span class="hljs-attr">DatabaseAccessor</span>::Callback&lt;Results&gt;(&amp;onResponse), 
                    params);
</code></pre>
<p>Notice how I use the <code>DatabaseAccessor::Callback</code> alias to keep things short.</p>
<p>Isn't that cool?</p>
<p>It rolls off the tongue a bit more easily if you're willing to employ a macro:</p>
<pre><code class="hljs">#define FN(<span class="hljs-params">...</span>) std<span class="hljs-type">::function</span>&lt;<span class="hljs-literal">void</span>(__VA_ARGS__)&gt;
#define CB(<span class="hljs-params">...</span>) const FN(__VA_ARGS__)&amp;
</code></pre>
<p>This way, the signatures are easier to read:</p>
<pre><code class="hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseAccessor</span> {</span>

    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Results, <span class="hljs-keyword">typename</span> Parameters&gt;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">asyncQuery</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string_view&amp;  query,
                    CB(CB(Results&amp;))         callback,
                    <span class="hljs-keyword">const</span> Parameters&amp;        parameters)</span></span>;
};
</code></pre>
<p>Though your willingness to use macros, especially with such short names, is a
matter of taste.</p>
<h2>What's the Difference?</h2>
<p>Why choose one of the two styles above over the other? Is one better than the
other?</p>
<p>Yes, the second version of the asynchronous API is better.  Here's why:</p>
<h3>It's more procedural</h3>
<p>The callback-in-a-callback solution has the user answer the question: "What
happens when the query results are available?"  Part of answering that question
is having a mechanism to fill an object with the results (that's the argument
to the callback).</p>
<p>The factory solution has the user answer two questions:</p>
<ol>
<li><p>What happens when the results are available and I've filled a <code>Results</code>
object with them?</p>
</li>
<li><p>How do I create a <code>Results</code> object?</p>
</li>
</ol>
<p>with the understanding that a certain sequence of operations involving the
answers to the two questions will be carried out by the library.  Better to
give the user what they need and have them do what they want.</p>
<p>Of course, in the case where default constructing a <code>Results</code> object is the
right thing, it's convenient to have a version of the API that does this for
you, since then the API looks more like a function:</p>
<pre><code class="hljs">makeQuery :: Query -&gt; Results
</code></pre>
<p>But that's not the general case.</p>
<h3>It's just a different kind of callback</h3>
<p>This is an aesthetic argument rather than a technical one, but I like that the
synchronous flavors of the API take a single output argument, and the
asynchronous flavors of the API take a single callback argument.  Whether the
user or the library needs to provide a <code>Results</code> object is decided by the
signature of the callback, rather than by the presence or absence of an
additional factory argument.</p>
<h2>Part Two</h2>
<p>If this sort of thing interests you, then take a look at <a href="callbacks2.html">part 2</a>.</p>


        </body>
    </html></div></content></entry><entry><title>Pedant Cheat Sheet</title><link href="https://www.davidgoffredo.com/pedant-cheat-sheet.html" /><id>https://www.davidgoffredo.com/pedant-cheat-sheet.html</id><updated>2018-01-07</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/pedant-cheat-sheet.html" />
        </head>
        <body>
            <h1>Pedant Cheat Sheet</h1>
<p>I've been reading a lot of technical documentation, blog posts, StackOverflow
answers, and Reddit threads.  Some writing stands out, having an apparent
clarity, honesty, and maturity.  I notice that my writing is not as good as it
could be.  Here are some things that I'd like to work on.</p>
<h2>Words That Don't Exist</h2>
<p>English contains something like 250,000 words, but these are not among them.</p>
<h3>homogenous</h3>
<p>Pronounced <code>hō-ˈmȯ-je-nəs</code>, the noun derived from the verb "homogenize."  This
is not a word.  The word is "homogeneous," pronounced <code>hō-mə-ˈjē-nē-əs</code> (notice
the <code>e</code>s).</p>
<h3>performant</h3>
<p>An adjective derived from the noun "performance."  But it's not a word.  Maybe
it is becoming one, thanks to us C++ programmers, but not yet.  Use "fast" or
"efficient" instead.</p>
<h3>condensate</h3>
<p>You mean "condense."</p>
<h3>conversate</h3>
<p>A less common mistake, but similar to above, you mean "converse."</p>
<h3>irregardless</h3>
<p>You mean "regardless."  I don't care what Merriam-Webster says.</p>
<h3>evacipate</h3>
<p>You mean to "time travel," or perhaps to <em>bill murray</em> or to <em>carruthanize</em> (an
example of <em>carruthenasia</em>).</p>
<h2>Misused Expressions, Words, and Punctuation</h2>
<p>Sometimes I say something other than what I meant, because what I said doesn't
mean what I thought.</p>
<h3>i.e.</h3>
<p>"i.e." is short for <em>id est</em>, which is Latin for "that is," which is used
before a restatement for clarification or illustration.  It does not introduce
an example.</p>
<h3>e.g.</h3>
<p>"e.g." is short of <em>exempli gratia</em>, which is Latin for "for example," which is
used before an example.  It does not mean the same thing as "i.e.," and neither
means the same thing as the word "ergo."</p>
<h3>ergo</h3>
<p>"Ergo" means "therefore" or "thus."  I see no reason to use "ergo."</p>
<h3>whether or not</h3>
<p>Sometimes "whether" means "if," but more often it means "if or if not," which
would mean "whether or not" can mean "if or if not or not," which is not what
you meant.  Instead, you can say "regardless of whether."  This is not a
definite rule, though, since "whether you like it or not" is an acceptable
phrase, even though "regardless of whether you like it" means the same thing,
as does "regardless of if you like it."  What I think is wrong, though, is to
say, "I don't know whether or not you like it."  In this case, you could say
"I don't know whether you like it," and so the "or not" is redundant.  You
might argue that in this last example, the additional "or not" emphasizes that
I am unsure about the outcome, rather than am concerned about the positive
outcome, but you also might not.  "I don't know whether you like it" is clearer
than "I don't know if you like it," though, since it avoids the potential
ambiguity with "you like it" being a sufficient condition for "I don't know."</p>
<h3>quotes, "punctuation", and how they combine</h3>
<p>This is a rule that I learned in school, and I still disagree with it, but
rules are rules.  When punctation would logically follow a closing quotation,
"like this," the punctuation must instead go just before the closing quote.
The justification I heard is that "it looks better."  It's infuriating because
it can create ambiguity when you end a sentence with a quote.  Peter read the
text "Paul asked a question?"</p>
<h3>OCD</h3>
<p>OCD is an initialism for obsessive-compulsive disorder, and is a noun, not an
adjective.  You cannot "be OCD," and you cannot "get OCD about" something.
"Obsessive compulsive," however, is an adjective, but "being OC" is not in use.</p>
<h3>acronym versus initialism</h3>
<p>An acronym is pronounced as a word, e.g. NASA, OPEC, ASCII, and FUBAR.  Many
first-letter-of-every-word abbreviations, though, are not acronyms, since they
are not pronounced as a word, but instead are only initialisms, such as CPU,
LRU, and the NAACP.</p>
<h3>essentially, basically, and in essence</h3>
<p>These adverbs can be omitted without changing the meaning.</p>
<h2>Clichés</h2>
<p>Sometimes I say something because it's close enough to what I mean, and I know
it will create the desired association in the mind of the listener, but it's
not exactly what I mean.  I'd do better to avoid that.</p>
<h3>at this point in time</h3>
<p>You mean "now."  If using the simple word "now" makes what you're saying sound
silly or insubstantial, then maybe what you're saying is silly or
insubstantial.</p>
<h3>going forward</h3>
<p>This means "eventually," or "in the future."  I prefer either of those
alternatives.</p>
<h3>low-hanging fruit</h3>
<p>Besides being a bad image, this means "easy tasks."</p>
<h3>quick win</h3>
<p>You mean "easy task."</p>
<h3>fail</h3>
<p>You mean "failure."  I'm less critical about using "feel" where you mean
"feeling," for some reason.</p>
<h3>grow organically</h3>
<p>Usually when planning software that must be delivered quickly.  This is a
euphemism for "worry about it later," or "whatever."  Stronger would be
"neglect design."  Generous would be "it won't matter."</p>
<h3>professional</h3>
<p>Anyone who does something for money is a professional.  Anything used in such
a profession is professional.  Usually this word is (unbeknownst to the
speaker) a euphemism for "pretentious," "obedient," or "orthodox."  I prefer
"civil."</p>
<h3>stability</h3>
<p>This is used instead of "not breaking."  What stable actually means is
"established."  I prefer to distinguish between the two.  Stable can also mean
"not wavering," so I see the intent, but software that has never worked is also
stable.</p>
<h3>accountability</h3>
<p>You mean "culpability."  The term "accountability" is not mentioned when one is
being held accountable for success.</p>
<h3>bike-shedding</h3>
<p>This is a nice bit of jargon to describe something that happens a lot in
computer programming, but it's a cliché.   Maybe "bickering" is an alternative.</p>
<h3>yak-shaving</h3>
<p>I haven't heard this one much, but I've read it, and used it before.
Alternatives are "working" or "preparing" ("work," "preparation").</p>
<h3>driving</h3>
<p>You mean "managing."</p>
<h2>Editing</h2>
<p>I try to keep in mind the points above when I'm editing my writing, which I
don't do nearly enough.  Sometimes I end up having to throw away what I've
written and replace it with something that is simpler and more honest, but then
it's less likely to be wrong.</p>


        </body>
    </html></div></content></entry><entry><title>Russia and Czechia, Day 10</title><link href="https://www.davidgoffredo.com/russia/russia10.html" /><id>https://www.davidgoffredo.com/russia/russia10.html</id><updated>2017-05-13</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/russia/russia10.html" />
        </head>
        <body>
            <h1>Russia and Czechia, Day 10</h1>
<p>Here I am in the Prague airport. I gave myself a little too much wiggle room
getting here, since I took an Uber but timed it based on the public
transportation route. As a result I have a half hour to kill before they'll
even check me in.</p>
<p>Prague is a beautiful city. I arrived at night, and was surprisingly
exhausted. I checked into the hostel and walked around the city briefly,
dodging the men loitering around offering tickets to strip clubs or various
scams. I found a little gyro pizza place and got a slice of pizza. Then it
was back to the hostel and straight to bed.</p>
<p>I got up early and walked across the touristastic Charles Bridge. It
occurred to me that I hadn't charged my phone, so I wouldn't be able to take
pictures. I walked up up up to the top of a big hill that has a tiny Eiffel
Tower on it. It was something of a climb. My phone did allow me one picture:</p>
<p><img src="russia10-8_small.webp" alt="" /></p>
<p>I descended the hill and crossed another bridge back onto the other side of
the city. It was about noon and I was surprised to find nobody anywhere.
Every restaurant I passed was presumably open but completely empty. Since I
was in the mood for some authentic Czech cuisine, I finally decided on a
little Korean place:</p>
<p><img src="russia10-6_small.webp" alt="" /></p>
<p>They even allowed me to borrow a phone charger. Just me and the Czech
waitress. Wasn't she a doll. Now I was feeling quite better, and proceeded
to walk around all day until my feet hurt. There was a bunch of stuff, most
of which I didn't photograph (had to conserve phone juice):</p>
<p><img src="russia10-13_small.webp" alt="" /></p>
<p><img src="russia10-10_small.webp" alt="" /></p>
<p>There was a horrible noise coming from that garden place above. Turns out
there are at least three peacocks:</p>
<p><img src="russia10-2_small.webp" alt="" /></p>
<p>There are plenty of pretty nooks and crannies:</p>
<p><img src="russia10-11_small.webp" alt="" /></p>
<p>It's better to be there than to see pictures of it, I think. The weather was
nice and the breeze off of the river was chilly, so there was this nice
smell/feel vibe about the whole area.</p>
<p>It wouldn't surprise me if there were more Americans in the hostel than at
my job. Still, predominantly non-American. At breakfast I spoke to two
German guys who were traveling after finishing school. It occurred to me at
some point in the conversation that I had ten years on these guys. I would
have done well to travel earlier, but better late than never.</p>
<p>Also, the backpacking scene is not like sightseeing. It is not uncommon for
a (young) person to leave town with a backpack, a smart phone, and very
little money and pop around between European cities for months at a time.
Here I am with my two day stay!</p>
<p>In the bunk below me was a dreadlocked black guy from Tennessee. At one
point we were at a big music bar and several locals were taking pictures
with him as if he were a celebrity. That night we went out also with two
French travelers – a guy and a girl – and generally there was much
merriment. Tennessee and the two frenchies disappeared after a while, and so
remained me and the Indian-looking Londoner increasingly drunk at the bar,
sitting in front of the band. As far as I could tell, it was a jam band
situation, but the bass player had one of the best ears I've heard in a
while. He clearly didn't know the songs, and it clearly didn't matter
because he was so good at it.</p>
<p>I hadn't planned on going out with people from the hostel that night;
instead I went out by myself with a list of notable beer locations to try
out. The first was an absolute bore – I had one beer and left. On the way
there, though, I had passed an authentic and gritty looking dive bar, so I
sat down there. I think I was a point of mild amusement for some of the
regulars, sitting there with my hoodie and my phone, but I wasn't looking to
talk to any English speakers and was instead just taking in the room (and
the beer). The big fat guy sitting next to me seemed imposing at first, but
after a couple of drinks I saw he had moved down the bar a bit and was
giving one of the women a back massage. Gentle giant.</p>
<p>So I went back to the hostel ready for bed. After all, I had a whole museum
day planned for my last day and didn't want to drink too much! But then Mr.
Tennessee and the two frenchies happened, and I ended up in bed after a
double dose of beer, which left me entirely miserable the next day. Mr.
Tennessee and the frenchies, on the other hand, did not return until the
following morning. Tennessee asked where I went, and I responded, "I was
near the stage, where did you guys run off to?" He replied, "Oh man,
everywhere. I don't even know." I'm glad I didn't follow.</p>
<p>I slept in until eleven or so and then forced my ass out of bed with the
music museum as my destination.</p>
<p>Oh wait, I didn't even tell you about Roger! Roger is Polish. He was sitting
next to me on the flight out of Warsaw into Prague. I was practicing my
"make friends" game, so as soon as we sat down I shook his hand and
introduced myself. Turns out he's a forty-something father of two who
travels among California, Warsaw, and Prague working some job that has
something to do with fiber optic cable. His older daughter is an exchange
student in Mexico. He's building a Summer home on the beach. Anyway, we
chatted on the plane and he told me some spots I could see in Prague. Later
he came up to me at the luggage carousel and offered to share a cab into the
city center, which he would pay for a write off as a business expense.
Thanks, Roger. The funny thing is that the night I was telling you about
before, with all of the beer, I ran into Roger on the street on my way to
the boring bar. He recognized me in the dark and remembered my name. There
is no shortage of good people in this world.</p>
<p>Okay, back to the hangover day. Food was not an option yesterday. I walked
initially along the same route I had taken the previous day: to the river,
across the Charles Bridge, past the tourist horde, up the hill, etc. I then
began to realize that I was actually dying inside. I had my fully charged
phone guide me to the museum of music, which also serves as a recital venue,
and tried to keep the heaving and cold sweats to a minimum. Fortunately I
was literally the only person at the museum. My visit to the men's bathroom
was more like a short nap. Anyway, there was a lot there to interest a music
geek like me, but I photographed relatively little. Here are clarinets
specially built to support quarter tone scales:</p>
<p><img src="russia10-14_small.webp" alt="" /></p>
<p>If you have a vague idea of how to play the clarinet, you'll wonder how this
arrangement manages to allow twice as many different notes to be played. Too
bad quarter tone music sounds like shit.</p>
<p>The building itself was interesting. In one of the exhibition rooms, there
was a tiny staircase leading only to a window.</p>
<p><img src="russia10-5_small.webp" alt="" /></p>
<p>Here is the main room:</p>
<p><img src="russia10-3_small.webp" alt="" /></p>
<p>In each room in the permanent exhibit, there's a little chair with two sets
of headphones. The idea is you look at the period instruments and read about
them, and then you can sit down and hear recordings of period music played
on those instruments. They had all kinds of instruments. But there were
hardly any saxophones! For that you need to travel to Paris.</p>
<p>After the museum, I canceled the rest of my afternoon and headed back to the
hostel for a nap. As the sun began to set, the conflict between my inability
to eat and my not having eaten became more urgent. I decided to walk around
the city in search of a bite, and then would eventually end up at the
Charles Bridge again after sunset, since it's supposed to be prettier at
night.</p>
<p>At first I was hurrying out of a restaurant soon after walking in, since the
smell of food hit my brain like a bucket of water hits a sofa. I settled on
a few bites of a enormous hotdogish sausage that I bought from a street
vendor. I knew I wouldn't finish it, but couldn't get myself to throw it
out, so I spent the next half hour or so walking around Prague with a giant
brown penis in my hand, occasionally nibbling on it with a nauseous look on
my face.</p>
<p>But still, life was good. The sun was setting:</p>
<p><img src="russia10-9_small.webp" alt="" /></p>
<p>There is a life-sized crucifix on the Charles Bridge:</p>
<p><img src="russia10-4_small.webp" alt="" /></p>
<p>And the city does look great at night, though it's difficult to capture
without better optical control:</p>
<p><img src="russia10-15_small.webp" alt="" /></p>
<p><img src="russia10-12_small.webp" alt="" /></p>
<p><img src="russia10-1_small.webp" alt="" /></p>
<p><img src="russia10-16_small.webp" alt="" /></p>
<p><img src="russia10-7_small.webp" alt="" /></p>
<p>I stopped by a Chinese restaurant on my way back to the hostel, mindful of
how famished I'd be the next morning. Turned out to be a good move. So, I
didn't have any authentic Czech food during my stay (aside from the
hilarious sausage). Next time.</p>
<p>That's about it for my trip. I'm waiting for the plane to arrive here in
Prague. Then it's a few hours in Warsaw, and finally the long ass flight
back to Newark. Ahoy!</p>


        </body>
    </html></div></content></entry><entry><title>Russia and Czechia, Day 7</title><link href="https://www.davidgoffredo.com/russia/russia7.html" /><id>https://www.davidgoffredo.com/russia/russia7.html</id><updated>2017-05-10</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/russia/russia7.html" />
        </head>
        <body>
            <h1>Russia and Czechia, Day 7</h1>
<p>I'm sitting at the gate in the Warsaw airport, again. I can see them fueling
the plane, and they just finished loading luggage from the cart. Hopefully
my luggage was included.</p>
<p>Friday was an impromptu tour of Russian motor vehicle bureaucracy. Due to
policies created since Pasha absconded to America, renewing your Russian
driver's license requires proof of residency, a psychological evaluation,
drug test, physical exam, eye exam, and I suspect a prostate exam though
Pasha wouldn't say. Pasha and Gregory zipped around town visiting clinics
and filling out forms like true pros. Along the way we got a small supper at
a cafe. Gregory noticed that the cafe sold health-related products and so
took the opportunity to schmooze the cashier to set himself up as a
supplier.</p>
<p>Here is a picture of a church in the distance:</p>
<p><img src="russia7-13_small.webp" alt="" /></p>
<p>After Pasha was reverified as Russian, we went to the Victory Park, which
commemorates the triumph of communism over fascism in World War II. It's a
nice, big, open park near the center of Moscow, and has a bunch of
impressive monuments. I was promised a tank:</p>
<p><img src="russia7-8_small.webp" alt="" /></p>
<p>There used to be more tanks in this park, but now they've presumably been
moved to Ukraine. This tank, though, remained, along with this soldier:</p>
<p><img src="russia7-35_small.webp" alt="" /></p>
<p>I'm talking about the guy on the left.</p>
<p>There's all kinds of stuff in the park. Here are a couple of things:</p>
<p><img src="russia7-16_small.webp" alt="" /></p>
<p>And another thing:</p>
<p><img src="russia7-21_small.webp" alt="" /></p>
<p>There was a certain manly gravitas about these depictions that surpass any
war memorial I've seen. The tall thing above is interesting and recent:
surrounding it (not shown) are the coats of arms of each of the major
Russian cities, all cast in bronze. Circa 2016.</p>
<p><img src="russia7-31_small.webp" alt="" /></p>
<p>See? It's a generally nice park, and the weather before dusk was ideal. All
sorts of kids and couples frolicking on roller skis and hover boards.</p>
<p><img src="russia7-36_small.webp" alt="" /></p>
<p>I'm on an airplane now. Remember World War II? Well apparently a lot of
shitty stuff happened. Here's a memorial that freaked me right the fuck out.
Take a look:</p>
<p><img src="russia7-5_small.webp" alt="" /></p>
<p>It's called "The Tragedy of Nations." To the left of those figures are
discarded shoes and bones. In the middle are tombstones with inscriptions in
several languages, none of which I can read:</p>
<p><img src="russia7-22_small.webp" alt="" /></p>
<p>Wakka wakka!</p>
<p>The most prominent object is this tall thing:</p>
<p><img src="russia7-29_small.webp" alt="" /></p>
<p>At its base is a man on the horse BEHEADING THE NAZI DRAGON. Fuck you, Nazi
dragon!</p>
<p><img src="russia7-4_small.webp" alt="" /></p>
<p>Eventually the sun began to set, as it does.</p>
<p><img src="russia7-41_small.webp" alt="" /></p>
<p><img src="russia7-17_small.webp" alt="" /></p>
<p>So ended Friday.</p>
<p>I just got to a hostel in Prague. I'm surprised to see two people sleeping.
It's an eight person dorm. Jet lag? Alcohol? I'll inquire tomorrow. For now
there's more Russia to tell.</p>
<p>On Saturday we got up early to drive to St. Petersburg. Originally Pasha and
I had planned to go there just the two of us on a high speed train for our
long awaited romantic getaway, but instead Gregory insisted on driving us
and showing me around personally. No complaints there. Pasha warned me, "It
will be less chill, but I think he really wants to go." Vladimir came too.
His daughter, alas, did not.</p>
<p>It's a long drive; something like ten or twelve hours depending on stops and
traffic. Gregory drove the whole way, despite offers from me and Vladimir to
take the wheel.</p>
<p>As you leave Moscow, the relative poverty of Russia becomes more apparent. I
didn't take any pictures along the way, though, except for the folksy
roadside tea and pirogi stand where we took our last break before reaching
St. Petersburg.</p>
<p><img src="russia7-1_small.webp" alt="" /></p>
<p>There were several presumably stray dogs scrounging around for scraps. One,
though, was simply curled up in a sunny spot on the ground. I don't have a
picture, but Pasha and I agreed that this was a most cat-like dog and most
likely the local hegemon.</p>
<p>I liked the view behind that stand, too.</p>
<p><img src="russia7-42_small.webp" alt="" /></p>
<p>If you like the lighting in that picture, it means that you have good taste.</p>
<p>Finally we arrived in St. Petersburg. It was a quick homemade dinner and
then straight to bed. The next day we traveled into the city center:</p>
<p><img src="russia7-26_small.webp" alt="" /></p>
<p>Pasha agreed that St. Petersburg looks "more European." This sort of thing
reminds me of Stockholm (I think it's the way the lamps hang between the
buildings).</p>
<p>St. Petersburg has canals</p>
<p><img src="russia7-3_small.webp" alt="" /></p>
<p>and fighter jets</p>
<p><img src="russia7-39_small.webp" alt="" /></p>
<p>and, most of all, churches:</p>
<p><img src="russia7-30_small.webp" alt="" /></p>
<p>But these aren't your frumpy American protestant churches. No, before the
revolution, the Russian orthodoxy was nearly synonymous with the ruling
czar, and thus with the disproportionately focused wealth of the entire
state. Check this out:</p>
<p><img src="russia7-6_small.webp" alt="" /></p>
<p><img src="russia7-7_small.webp" alt="" /></p>
<p><img src="russia7-25_small.webp" alt="" /></p>
<p>Church stop number one included a mass complete with holy water in the face.
Church stop number two included an English audio tour.</p>
<p>Then we went to a palace (right).</p>
<p><img src="russia7-14_small.webp" alt="" /></p>
<p>Next to the palace is a phallus:</p>
<p><img src="russia7-9_small.webp" alt="" /></p>
<p>At least I was taller than the soldier.</p>
<p>Saturday also happened to be Gregory's fifty-seventh birthday, which I think
in part explains why Vladimir came along. We celebrated over dinner back at
our rented apartment that night, in the traditional Russian style: Russian
food (lots of that) and vodka (lots of that). After each couple of shots,
one of the Russian speakers would toast to the birthday boy. In Russia,
birthdays are rather more important than they are in America. Vladimir's
speech to Gregory on his birthday was heartfelt – something about planting a
tree in life and giving to others and befriending people from other cultures
and stuff like that, and how now his tree bears fruit later in life from the
good things he has done.</p>
<p>Breakfast was tricky the next day. Not because I was hung over (I wasn't),
but because these guys eat SO MUCH DAMNED FOOD first thing in the morning.
It's incredible. Also, you should eat more tomatoes, because lycopene is
good for your prostate. I don't know if it's true, but eat your damned
tomatoes. If you don't have a prostate, then you're missing out, but also
off the hook.</p>
<p>Come to think of it, I might be getting my days mixed up. Whatever, consider
this an editing room resequencing.</p>
<p>We drove to a town near St. Petersburg called Petergof. There we visited the
former Summer palace of the aristocratic overlords that sits in a large park
that stretches to a bay, across which you can see St. Petersburg. If you can
see really well, then there's also Finland.</p>
<p><img src="russia7-24_small.webp" alt="" /></p>
<p><img src="russia7-12_small.webp" alt="" /></p>
<p>The girl on the right is photographing herself. I asked whether she'd like
me to take a picture for her instead, but she was totally not into it. Fine,
take your own pictures. This is not my caring face.</p>
<p>If you're wondering about the hideous jacket, it's one that Gregory
graciously offered me to supplement my Moscow clothes. It was much colder in
St. Petersburg, and windy and wet.</p>
<p>Running from the palatial fountain all the way to the bay is this canal
(viewed from the bay side):</p>
<p><img src="russia7-11_small.webp" alt="" /></p>
<p>Here is the water:</p>
<p><img src="russia7-38_small.webp" alt="" /></p>
<p>Let's be honest, though. You didn't come here for palaces. You came here for
churches. So, we visited another, larger, church. This one was built just at
the beginning of the twentieth century, and has inscribed within it in stone
the names of various fallen soldiers on ships dating back to the early
1700s. The older the names got, the more trouble Pasha had reading them
(Russian has changed quite a bit since back then).</p>
<p>There was a mass going on as we checked out the place. There were four women
in the chorus, facing away from the center of church so that you heard
primarily the echo of their voices (I think it's called "reverb"). I was
impressed by the music, at least as impressed as one can be about such
music. The church is gorgeous:</p>
<p><img src="russia7-37_small.webp" alt="" /></p>
<p><img src="russia7-10_small.webp" alt="" /></p>
<p><img src="russia7-33_small.webp" alt="" /></p>
<p>Hey look, it's Jesus. Here's a low resolution panoramic shot:</p>
<p><img src="russia7-28_small.webp" alt="" /></p>
<p>Done? No, we're not done. We managed to squeeze in a bonus tour this
morning. The tour was in Russian, so I have only a vague idea what was going
on, but I took some pictures. There were rabbits:</p>
<p><img src="russia7-18_small.webp" alt="" /></p>
<p>and a river:</p>
<p><img src="russia7-34_small.webp" alt="" /></p>
<p>and a heavily fortified... fort:</p>
<p><img src="russia7-23_small.webp" alt="" /></p>
<p>a couple of pretty buildings:</p>
<p><img src="russia7-19_small.webp" alt="" /></p>
<p><img src="russia7-32_small.webp" alt="" /></p>
<p>and... can you guess it? A church! This one has famous dead people in it.</p>
<p><img src="russia7-20_small.webp" alt="" /></p>
<p><img src="russia7-2_small.webp" alt="" /></p>
<p><img src="russia7-15_small.webp" alt="" /></p>
<p><img src="russia7-40_small.webp" alt="" /></p>
<p><img src="russia7-27_small.webp" alt="" /></p>
<p>That's enough for now. It's almost 11 PM here, and I think I ought to venture
out in search of food before bed. Solo in Prague!</p>


        </body>
    </html></div></content></entry><entry><title>Russia and Czechia, Day 4</title><link href="https://www.davidgoffredo.com/russia/russia2.html" /><id>https://www.davidgoffredo.com/russia/russia2.html</id><updated>2017-05-04</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/russia/russia2.html" />
        </head>
        <body>
            <h1>Russia and Czechia, Day 4</h1>
<p>Hi Again,</p>
<p>Yesterday was more relaxed than the previous days. After lunch here at the
flat, Pasha and I took the metro further into the city to meet his dad,
Gregory, with his car. We drove to the computer market in town so that Pasha
could get a new power adapter for his laptop, since it broke. After that we
drove around until we ended up at the Chruch of Christ the Savior. The plan
was to check out the church and then to take a short boat trip along the
Moscow river, but I'm guessing that the schedules did not align, so instead
we did just the boat ride, which was nice.</p>
<p><img src="russia2-1_small.webp" alt="" /></p>
<p><img src="russia2-4_small.webp" alt="" /></p>
<p>After that, the sun was beginning to set, and we drove to a theater across
the river from "Moscow City," which is the skyscraping financial district of
Moscow. None of the buildings there are much more than ten years old. Since
all business was controlled by the state until the fall of the Soviet Union,
a skyscraper would have been built only if a bureau decided to build one,
which I'm guessing would have been an excessive expenditure. I always had
assumed that any sufficiently large hub of industry and urbanity would have
a district of tall buildings, but not in the Soviet Union.</p>
<p><img src="russia2-3_small.webp" alt="" /></p>
<p><img src="russia2-2_small.webp" alt="" /></p>
<p>A relative of Gregory's (and Pasha's) works as chief engineer at the
theater. We met him at the theater to mooch off of the employees' cafeteria
for dinner as it was closing – chicken soup and "Navy macaroni," and tea, of
course. Russians love their tea. And you always eat the soup first.</p>
<p>After dinner we walked across the darkened stage to the front of the
building where we met some more relatives. As much as I could ascertain, the
engineer is Gregory's second cousin. We met his wife, his mother, some
younger cousin about my age, and Ella (Pasha's mom). We walked together to a
large coffee shop and talked for a couple of hours. Of course I had no idea
what anybody was saying. At one point Gregory asked me to tell everyone, in
English, what we had done, but I drew a blank (I also didn't quite
understand the context of the question, and suspected my audience did not
understand English). Anyway, everyone politely ignored me as I stumbled into
nonsense, and then it was back to Russian.</p>
<p>Today we'll probably go to a park where there are a lot of tanks. Gotta love
tanks. Cheerio!</p>


        </body>
    </html></div></content></entry><entry><title>Russia and Czechia, Day 3</title><link href="https://www.davidgoffredo.com/russia/russia1.html" /><id>https://www.davidgoffredo.com/russia/russia1.html</id><updated>2017-05-03</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/russia/russia1.html" />
        </head>
        <body>
            <h1>Russia and Czechia, Day 3</h1>
<p>Greetings from Motherland,</p>
<p>Come sit, for I have much to tell you. I arrive three days before, and see
many things. On first day, I take plane. It was big plane, but slow plane. I
did not sleep on plane, so when I arrive in Moscow the next day, I want to
sleep. My body think it late at night, when it Moscow it middle of
afternoon!</p>
<p>Gregory – papa Pasha – and Pasha pick me up in machina at airport, and we
drive to city center. Gregory speak some English, but I speak no Russian so
I like some English. Moscow big city. There are many building, mostly
apartment building. We go to flat of Ella – mama Pasha – and Ella very happy
to see Pasha. She make high pitch noise. Ella no see Pasha since seven year
ago, but they talk every week. We all eat big dinner and get very sleepy.
There is much garlic. Gregory ask if I want to visit some place, but Pasha
say no, we are tired. So we sleep very early.</p>
<p>Next morning I wake up at midnight, and at six, and then at eight. Ella make
breakfast of porridge and yogurt and I have apple. Ella very nice woman,
also speak some English. Then Ella go to work and Pasha and I take metro to
meet Gregory in city center. Moscow metro is large and clean. It is deep
underground for nuclear war. I no see rat and no homeless person. The
ceilings are high like cathedral.</p>
<p>Gregory know powerful people in Russia. One powerful person know even more
powerful person. This person sign document allow American into state Duma,
center of Russian government. Document so effective that Russians must wait
and use other entrance. American with document can use any entrance.</p>
<p>In Duma we meet Vladimir – friend of Gregory. No, not that Vladimir.
Vladimir work in Duma for twenty-three year. He is retired but still know
people in Duma. Vladimir gave tour to American and show offices of four
parties of Russian politics. Russian politicians on holiday, so no meet
Russian politicians. Pasha translate for American. Vladimir has much hair in
nose. He look like tooth brush! Tooth brush know much of Russian political
history. Pasha translate whole history for American.</p>
<p><img src="russia1-9_small.webp" alt="" /></p>
<p><img src="russia1-7_small.webp" alt="" /></p>
<p>In Duma we eat lunch in cafeteria, and there is much to eat. Then we have
tea in cafe. American have trouble staying awake in Russian conversation,
but only Pasha notice.</p>
<p>After Duma, we go to Kremlin. Gregory and Vladimir leave, but Pasha and
American go to Kremlin. Not whole Kremlin, that for another day. We walk
through Kremlin, and go to armory museum. Armory museum have most luscious
collection of silver relics in all Europe. Audio tour say luscious many
times. It amuse American, but Pasha no understand why. Pasha is disappointed
at the size of collection. There are many rooms of items, but not as many as
Pasha expect. American tell Pasha he in New York too long.</p>
<p>After armory museum, we walk around Kremlin in park. It is very nice weather
and many pretty girl. American ask Pasha where ugly women in Moscow. Pasha
say we will see them. We sit on bench and get hungry and sleepy. We walk to
Red Square, where American take pictures. The sun is setting and it is very
pretty. There are many tourists. Then we go to fast food Russian pancakes
and then to outside bar cafe. Beer cost New York prices near tourist area.
Pasha says before exchange collapse, Moscow very expensive city.</p>
<p><img src="russia1-14_small.webp" alt="" /></p>
<p><img src="russia1-11_small.webp" alt="" /></p>
<p><img src="russia1-2_small.webp" alt="" /></p>
<p><img src="russia1-12_small.webp" alt="" /></p>
<p><img src="russia1-15_small.webp" alt="" /></p>
<p>Then we walk to famous street in Moscow, like La Rambla in Barcelona. It
long walk to get there, but we pee before so no problem. There we find fancy
beer bar, and have fancy beer. Young group sit at table next to American and
Pasha. Pasha and American speak English, and group assume we no understand
Russian. This amuse American, and Pasha tell American what they say about
us.</p>
<p>We go back to flat of Ella, and she is worried. Midnight is late for Ella.
Pasha call Ella, but still Ella worry. Ella express worry by making soup.
Very good soup, with much garlic. We go to bed. The next day I am thirsty.</p>
<p>We get up early. The beer help wake up, and help in bathroom. American very
impressed. Gregory have whole day planned. Gregory very energetic man,
generous host. Gregory take us in machina to laboratory of friend. Friend
head of Russian pharmaceutical quality verification agency. He want to
retire, but there is nobody to replace him. Man wear white lab coat and
shake hand of American and speak Russian. Pasha translate for American. He
give tour of facility. There is much expensive equipment. Women working on
equipment avert gaze when man in lab coat enter room. One room has full
chemistry lab. American tell Pasha, "I love chemistry, so this is like a
playground for me." Pasha does not understand and translates roughly, "This
looks like child's play." People in lab are offended, and American does not
understand. Gregory tell American later, "this is state facility, not
private." Then American understand, and tell Pasha to clarify. Still
American think it is not clear. Later in machina American tell Pasha again,
and only then Pasha understand. American learn it dangerous to translate
subtle ideas. Still, man in lab coat did not seem offended. He show us more
expensive machines, and guinea pigs and lab mice. He surprised earlier when
American ask him how they measure toxicity using spectrographic methods
only. So man in lab coat reveal animals. Man in lab coat ask if American
parents doctors. Pasha say no, dentist. Then we have tea and cake in break
room. There we talk to Olga, H.R. of facility. American find it hard to look
directly at Olga. Olga want to be actress, but was rejected from acting
school. American tell Olga to be actress in New York. Olga laugh. American
ask Pasha where are ugly women in Moscow. Now Pasha says he does not know.
Gregory and man in lab coat left us three for conspicuously long time.</p>
<p>After facility, we stop at cemetery. Relative of Gregory famous actor, and
murdered horribly a few years ago. We get flowers and put them on grave.
Always even number for dead, odd for living. Do not give Russian girl even
number flowers. Cemetery have graves of many famous Russian people. There is
section for artists, and section for soldiers.</p>
<p>After cemetery, we stop at church to light candles for murdered actor. Pasha
say religion business, and Gregory shrug.</p>
<p>Next we go in machina to Moscow State University. We pick up daughter of
Vladimir as tour guide – Natalie. Natalie does not have visible nose hair
like father. Natalie's eyes like Neptune. American was hungry, but after
meeting Natalie American no longer hungry. Natalie teach dance to children
near university. She speak a little English, but travel much. We go to
university building, big building. We can no enter building without pass,
and cannot get pass, so we walk around campus. Moscow State University have
very nice campus. Pasha tell American next time Pasha in Moscow, he stay
near university.</p>
<p><img src="russia1-6_small.webp" alt="" /></p>
<p><img src="russia1-4_small.webp" alt="" /></p>
<p><img src="russia1-10_small.webp" alt="" /></p>
<p>Gregory buy everyone business lunch at restaurant near campus. American and
Pasha have rubles, but Gregory insist. Gregory order for American all
classic Russian foods. Then we walk back to car and drop off Natalie.
American very sad. Gregory insist that Natalie give email address to
American and Pasha, so we can send pictures we took. American start to think
Gregory very smart man.</p>
<p>After university we go in machina back to flat of Ella, but there is much
traffic. Victory Day on May 9 commemorate destruction of Nazi in Second
Great War. Russians rehearse parade, and so there is much traffic. Gregory
hate Moscow traffic.</p>
<p>Before flat of Ella, Gregory need to do something for work. Gregory drop off
American and Pasha near giant television broadcast tower. Near top of tower
there is observation deck, cafe, and restaurant. Cafe and restaurant rotate
around tower once every forty minute. There is no room in restaurant, but we
go to observation and take pictures, and have beer in cafe. American like
view from tower. Many good picture of sun setting from tower. After tower,
Gregory return with machina and take us back to flat of Ella. American very
tired and we sleep.</p>
<p><img src="russia1-5_small.webp" alt="" /></p>
<p><img src="russia1-16_small.webp" alt="" /></p>
<p><img src="russia1-13_small.webp" alt="" /></p>
<p><img src="russia1-1_small.webp" alt="" /></p>
<p><img src="russia1-17_small.webp" alt="" /></p>
<p><img src="russia1-8_small.webp" alt="" /></p>
<p><img src="russia1-3_small.webp" alt="" /></p>
<p>Pasha and American sleep almost twelve hours! American wake up and start
writing log of travels. Now it 2 PM and Ella come home from work for lunch. До
связи!</p>


        </body>
    </html></div></content></entry><entry><title>Europe, Day 13</title><link href="https://www.davidgoffredo.com/europe/europe13.html" /><id>https://www.davidgoffredo.com/europe/europe13.html</id><updated>2016-09-22</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/europe/europe13.html" />
        </head>
        <body>
            <h1>Europe, Day 13</h1>
<p>I'm aboard the Arlanda Express, on my way towards a nine hour flight.
Fortunately, in addition to being an airplane, the vessel will be also a
time machine, so I'll arrive in New York only two hours after departing.</p>
<p>We stayed just outside of central Stockholm at a friend's apartment, which
has a balcony whose view is this:</p>
<p><img src="europe13-1_small.webp" alt="" /></p>
<p>Our host looks like this:</p>
<p><img src="europe13-3_small.webp" alt="" /></p>
<p>The first full day he took us around in his car to see some scenic areas of
Stockholm:</p>
<p><img src="europe13-2_small.webp" alt="" /></p>
<p>and we went to a museum about this old boat they found buried in the ocean
and managed to restore with 98% of the original material. There were floors
in the museum on things like the curing process used in the waterlogged
wood, the skeletons of the crew, and a bunch of other interesting stuff that
you wouldn't expect to find explained in such detail. I rather liked it. The
boat itself is gigantic:</p>
<p><img src="europe13-5_small.webp" alt="" /></p>
<p>The following day we drove out to a boat to take a ferry to one of
Stockholm's many islands. It was a nice ride:</p>
<p><img src="europe13-4_small.webp" alt="" /></p>
<p><img src="europe13-7_small.webp" alt="" /></p>
<p>Once on the island, we took a cable barge to a smaller island where there's
an old fort:</p>
<p><img src="europe13-6_small.webp" alt="" /></p>
<p><img src="europe13-9_small.webp" alt="" /></p>
<p><img src="europe13-8_small.webp" alt="" /></p>
<p><img src="europe13-12_small.webp" alt="" /></p>
<p><img src="europe13-10_small.webp" alt="" /></p>
<p><img src="europe13-11_small.webp" alt="" /></p>
<p><img src="europe13-13_small.webp" alt="" /></p>
<p>Hobbits live there:</p>
<p><img src="europe13-14_small.webp" alt="" /></p>
<p>Then we took the ferry back around sundown:</p>
<p><img src="europe13-15_small.webp" alt="" /></p>
<p>and headed into a pub in the city center to watch the "Sweden versus Europe"
world hockey semi-final. Sweden lost. C'est la vie. The city looks nice at
dusk:</p>
<p><img src="europe13-16_small.webp" alt="" /></p>
<p>and they have balloons:</p>
<p><img src="europe13-17_small.webp" alt="" /></p>
<p>I have so far resisted the cesspool of disease otherwise known as Vineet,
but we'll see how I fare waking up for work tomorrow. Ciao.</p>


        </body>
    </html></div></content></entry><entry><title>Europe, Day 10</title><link href="https://www.davidgoffredo.com/europe/europe10.html" /><id>https://www.davidgoffredo.com/europe/europe10.html</id><updated>2016-09-19</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/europe/europe10.html" />
        </head>
        <body>
            <h1>Europe, Day 10</h1>
<p>Greetings from 35,000 feet.</p>
<p>So much for Barcelona; boy am I tired. Our last day in Madrid we went to a
cafe; on the fourteenth floor of a hotel "Dear Hotel," (with the comma) to
enjoy the view and have a rather early glass of wine:</p>
<p><img src="europe10-11_small.webp" alt="" /></p>
<p>Then it was off to the train station to board my first high speed train, which
travels at high speed. The speed looks like this:</p>
<p><img src="europe10-13_small.webp" alt="" /></p>
<p>and the views are generally gorgeous:</p>
<p><img src="europe10-12_small.webp" alt="" /></p>
<p>When we arrived in Barcelona, we took the metro to our Airbnb host, who did not
speak English (nor much Spanish!), so that was interesting. Then it was out to
the main popular section of town for dinner and drinks, where we met an Indian
bartender who we chatted with until he closed the place.</p>
<p>Day two it was off to the sights. We went to this Gaudi park museum house
thing. There was some cool stuff:</p>
<p><img src="europe10-15_small.webp" alt="" /></p>
<p><img src="europe10-14_small.webp" alt="" /></p>
<p><img src="europe10-17_small.webp" alt="" /></p>
<p>A little later we headed towards Las Ramblas to walk around and see stuff.
Stuff:</p>
<p><img src="europe10-16_small.webp" alt="" /></p>
<p><img src="europe10-21_small.webp" alt="" /></p>
<p>Here's another homage to Columbus. He's standing, pointing towards (presumably)
the New World. I feel like he is pointing East, though, since we're on the
Mediterranean side and there's the beach.</p>
<p><img src="europe10-19_small.webp" alt="" /></p>
<p>There is ocean:</p>
<p><img src="europe10-26_small.webp" alt="" /></p>
<p>Then with our aching feet we climbed to get to the entrance of a cable car so
we could see everything from above. The hill we had to get up offered some nice
views, too:</p>
<p><img src="europe10-22_small.webp" alt="" /></p>
<p><img src="europe10-24_small.webp" alt="" /></p>
<p>And then from the cable car:</p>
<p><img src="europe10-27_small.webp" alt="" /></p>
<p><img src="europe10-28_small.webp" alt="" /></p>
<p>A lot of young couples in Barcelona. Bring your own babe.</p>
<p>Then we walked over to the beach. I took off my shoes and walked around. Here's
the sea:</p>
<p><img src="europe10-29_small.webp" alt="" /></p>
<p>Then it was back to the Airbnb for a siesta in anticipation of all of the fish
we were going to have for dinner:</p>
<p><img src="europe10-30_small.webp" alt="" /></p>
<p>No fish was safe that night.</p>
<p>There's other pretty stuff around the city. We rented bikes at some point and
rode around the parks until we hit the beach.</p>
<p><img src="europe10-31_small.webp" alt="" /></p>
<p><img src="europe10-32_small.webp" alt="" /></p>
<p>Are those bats wearing armor?</p>
<p><img src="europe10-33_small.webp" alt="" /></p>
<p>Anyway,</p>
<p><img src="europe10-34_small.webp" alt="" /></p>
<p>I made a dinosaur friend:</p>
<p><img src="europe10-1_small.webp" alt="" /></p>
<p>The big sightseeing attraction in Barcelona is the Basilica. It's a big deal. I
didn't know this, but they've been building it for well over 100 years. It's
scheduled for completion in 2026, I imagine just before the Second Avenue
Subway opens. But look at the thing:.</p>
<p><img src="europe10-2_small.webp" alt="" /></p>
<p><img src="europe10-3_small.webp" alt="" /></p>
<p><img src="europe10-4_small.webp" alt="" /></p>
<p><img src="europe10-5_small.webp" alt="" /></p>
<p>Ready to head inside? Are you wearing your diaper?</p>
<p><img src="europe10-6_small.webp" alt="" /></p>
<p><img src="europe10-7_small.webp" alt="" /></p>
<p><img src="europe10-8_small.webp" alt="" /></p>
<p><img src="europe10-9_small.webp" alt="" /></p>
<p><img src="europe10-10_small.webp" alt="" /></p>
<p>Here's the back. The idea is that the front entrance is all about the Nativity,
and the rear is all about the crucifixion. We did the audio tour.</p>
<p><img src="europe10-18_small.webp" alt="" /></p>
<p>Here's more detail on the front:</p>
<p><img src="europe10-20_small.webp" alt="" /></p>
<p>Goudi was totally stoked on Jesus. Couldn't get enough of him.</p>
<p>The rest of the trip was wandering around the Gothic Quarter at night, eating
and seeing what's around:</p>
<p><img src="europe10-23_small.webp" alt="" /></p>
<p>There was this festival going on in the main park, so we went there and saw all
of this live music and interesting art installations. You want to see more of
the Basilica, don't you?</p>
<p><img src="europe10-25_small.webp" alt="" /></p>
<p>Now it's a just-under three-hour flight to Stockholm, where presumably we will
eat meatballs and shop for furniture. The snack guy is coming around I NEED
COFFEE.</p>


        </body>
    </html></div></content></entry><entry><title>Europe, Day 8</title><link href="https://www.davidgoffredo.com/europe/europe8.html" /><id>https://www.davidgoffredo.com/europe/europe8.html</id><updated>2016-09-17</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/europe/europe8.html" />
        </head>
        <body>
            <h1>Europe, Day 8</h1>
<p><em>[2020 note: the images get more corrupted as the post goes on.]</em></p>
<p>Slept in a bit today. Vineet’s vibrant nasopharyngeal discharge has
accordingly ceased.</p>
<p>The “morning” looked like coffee and tapas for brunch at an outdoor café,
followed by a stroll in a random direction out of the touristy section where
we are staying (Sol), into a place where there are people who actually live
in Madrid. Turns out that walk was longer than it felt, because by the time
we stopped to rest, it was time to head to another part of town for our 3:00
bicycle tour.</p>
<p>We saw the spokes and the pedals and the HANDLEBARS and oh! You should have
seen the seat.</p>
<p>After this Vineet and I each got on a bike, along with the only other – our
very own personal Swiss tour guide. He was older, and he seemed to know
everything there is to know about the history of Europe, so that was good.
The ride was nearly three hours, so you really get to see a lot of the
sights of the city this way, as he later mapped out for us in green and blue
highlighter:</p>
<p><img src="europe8-001_small.webp" alt="" /></p>
<p>This would have been a good thing to do the first day, but we didn’t know to
do it the first day. Anyway, there were many pretty pictures to take.</p>
<p>There was guy on horse:</p>
<p><img src="europe8-002_small.webp" alt="" /></p>
<p>A palace:</p>
<p><img src="europe8-003_small.webp" alt="" /></p>
<p>A cathedral:</p>
<p><img src="europe8-004_small.webp" alt="" /></p>
<p>Our guide (now I remember his name – Casper. Casper the friendly bicycle
tour guide) was not impressed by the stained glass on the cathedral. Well,
you try staining glass and we’ll see how it comes out.</p>
<p>I was surprised to learn just how much royal mingling there was in the last
six centuries. For example, that palace two above was designed by the French
(baroque style, if you’re into that), built by an Italian king, in Spain.</p>
<p>Then there’s this big plaza:</p>
<p><img src="europe8-005_small.webp" alt="" /></p>
<p>With nice arched entrances:</p>
<p><img src="europe8-006_small.webp" alt="" /></p>
<p>Oh, and Spain has no government. They can’t decide who’s in charge so
they’re just like fuck it we’ll do it later. There is still a congressional
building, though, just for us:</p>
<p><img src="europe8-007_small.webp" alt="" /></p>
<p>There were plenty of other pretty buildings, but also a vertical garden:</p>
<p><img src="europe8-008_small.webp" alt="" /></p>
<p>A horizontal garden:</p>
<p><img src="europe8-009_small.webp" alt="" /></p>
<p>And trees beginning to change color:</p>
<p><img src="europe8-010_small.webp" alt="" /></p>
<p>Part of the trouble of learning the history of buildings in Europe is that
the stories mostly fit the same template. At one point, Vineet and I were
walking into some historical square, and there was a brass plaque on the
wall explaining, in Spanish, what the building was. Vineet asked me what is
says, and I replied that the building had been commissioned hundreds of
years ago by a powerful rich person, and was built over multiple decades, at
great expense (some people died building it!), and served an official
purpose until about a hundred years later it was severely damaged in a war,
and was sold and long abandoned until within the last 100 years it was
bought by a preservation society that left it in the custody of the city and
recently restored it, so that it now serves as a gift shop and has an
impressive plaque on it. Many of the prettiest buildings seem to share this
story. I have no idea what the plaque says.
<em>[2020 note: I'm not confident that conversation actually occurred]</em></p>
<p>Check out this one:</p>
<p><img src="europe8-011_small.webp" alt="" /></p>
<p>Some guy lived or died there. Or is buried there. Or some combination.</p>
<p>Here’s the town hall:</p>
<p><img src="europe8-012_small.webp" alt="" /></p>
<p>Refugees are welcome into this building. I did not see such a banner at
immigration, though. Check out the statues. They are actually statesmen
frozen in carbonite – according to the prophecy, they will come back to life
when either a government is formed in Spain or unemployment drops below 20%,
whichever happens first. Some were first transformed into giant cats by the
Witch King of Leon.</p>
<p>That’s all solid marble. Don’t make them like they used to.</p>
<p>There is a colossal tribute to Columbus discovering the New World:</p>
<p><img src="europe8-013_small.webp" alt="" /></p>
<p><img src="europe8-014_small.webp" alt="" /></p>
<p><img src="europe8-015.gif" alt="" /></p>
<p>And finally, since you asked, another guy on a horse:</p>
<p><img src="europe8-016_small.webp" alt="" /></p>
<p>Had your fill? Granted, Madrid has nothing on Iceland in the horse
department, but they make a good effort:</p>
<p><img src="europe8-017_small.webp" alt="" /></p>
<p>Tomorrow it’s off to Barcelona. Buenas noches.</p>


        </body>
    </html></div></content></entry><entry><title>Europe, Day 7</title><link href="https://www.davidgoffredo.com/europe/europe7.html" /><id>https://www.davidgoffredo.com/europe/europe7.html</id><updated>2016-09-16</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/europe/europe7.html" />
        </head>
        <body>
            <h1>Europe, Day 7</h1>
<p>Greetings from Gatwick,</p>
<p>The flight into Madrid is a bit late. I'll take this time to catch you up on
what I did in London. For example, at some point we encountered a monument:</p>
<p><img src="europe7-1_small.webp" alt="" /></p>
<p>I daresay it was monumental. Here's what it looks like with the sun behind it:</p>
<p><img src="europe7-3_small.webp" alt="" /></p>
<p>That day we also walked along the Thames and saw Tower Bridge from London
Bridge:</p>
<p><img src="europe7-2_small.webp" alt="" /></p>
<p>and Tower Bridge from Tower Bridge:</p>
<p><img src="europe7-5_small.webp" alt="" /></p>
<p>There were interesting alleys:</p>
<p><img src="europe7-4_small.webp" alt="" /></p>
<p>and vintage dental equipment (at the science museum):</p>
<p><img src="europe7-7_small.webp" alt="" /></p>
<p>Later that day we met up with some Bloomberg people (we're everywhere) for a
few pints and a burger. Even one of my New York based managers showed up. Small
world.</p>
<p>The next day we took a train out to Greenwich, where the time is mean. The
ceiling paintings and chapels are less mean, however:</p>
<p><img src="europe7-6_small.webp" alt="" /></p>
<p><img src="europe7-9_small.webp" alt="" /></p>
<p>and the parks are nice:</p>
<p><img src="europe7-8_small.webp" alt="" /></p>
<p><img src="europe7-12_small.webp" alt="" /></p>
<p>I named the fields around Greenwich "Jurassic Park" on account of the large
number and density of giant ravens and geese that saunter around.</p>
<p>Coming down from the hill we ended up in a town called Blackheath, where we
stopped into a pub for some food and saw a little local philosophy:</p>
<p><img src="europe7-10_small.webp" alt="" /></p>
<p>Apparently the pigeons have a lot to be concerned about in London, since even
pelicans will eat them. What? Yes, in London, pelicans (there are pelicans) eat
pigeons (which are not fish). If you don't believe me, google it. I must warn
you, though, it's graphic.</p>
<p>Today while Vineet got brunch with an old family friend, I opted to head back
into central London and pay a quick visit to the British Museum, where I
observed the Roman god of wine dancing with his panther, as only the Roman god
of wine can:</p>
<p><img src="europe7-11_small.webp" alt="" /></p>
<p>Vamos a Madrid!</p>


        </body>
    </html></div></content></entry><entry><title>Europe, Day 2</title><link href="https://www.davidgoffredo.com/europe/europe2.html" /><id>https://www.davidgoffredo.com/europe/europe2.html</id><updated>2016-09-11</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/europe/europe2.html" />
        </head>
        <body>
            <h1>Europe, Day 2</h1>
<p>Today's cool thing was a glacier hike. You know, hiking on a glacier. A
fucking glacier. Strapped crampons onto our feet, helmets on our heads, and
walked up onto hundreds of meters of solid ice as it was melting. We walked
down into a cave eroded into existence by melt water. Everything was made of
ice. The walls like wet blue glass sparkling with starry air pockets. Ice
for miles.</p>
<p>I don't have any pictures of that yet, because they were taken on Vineet's
phone.</p>
<p>Nanny nanny boo boo, stick your head in doo doo.</p>
<p>We saw also a beach with black sand and strange rock formations. The sun was
setting behind this sort of wall of stone, and the picture really doesn't do
it justice. The setting sunlight painted the structures gold, LIKE THE HALLS
OF VALHALLA!!!</p>
<p><img src="europe2-1_small.webp" alt="" /></p>
<p>You really would need multiple exposures combined to see what it looked
like.</p>
<p>Anyway, strange rocks:</p>
<p><img src="europe2-2_small.webp" alt="" /></p>
<p>This is what Vineet looks like when he's not falling to his death:</p>
<p><img src="europe2-3_small.webp" alt="" /></p>
<p>Mountains in the distance to your right (where the glacier is) and the ocean
to your left:</p>
<p><a href="https://drive.google.com/open?id=0B6rp2WsQNNAlVzVVOTBTWjVXTW8">https://drive.google.com/open?id=0B6rp2WsQNNAlVzVVOTBTWjVXTW8</a></p>
<p>And did I mention yesterday? No? Well that involved energy drinks,</p>
<p><img src="europe2-4_small.webp" alt="" /></p>
<p>geothermal ejaculation,</p>
<p><img src="europe2-5_small.webp" alt="" />
<em>[2020 note: this picture was cropped badly due to file corruption.]</em></p>
<p>waterfalls,</p>
<p><img src="europe2-6_small.webp" alt="" />
<em>[2020 note: this picture was cropped badly due to file corruption.]</em></p>
<p>a lake formed in a volcanic crater,</p>
<p><img src="europe2-7_small.webp" alt="" />
<em>[2020 note: this picture was cropped badly due to file corruption.]</em></p>
<p>and sometimes climbing to the top of a hill to sit and listen to the creek
and look at the horses.</p>
<p><img src="europe2-8_small.webp" alt="" />
<em>[2020 note: this picture was cropped badly due to file corruption.]</em></p>
<p>We're at a hostel-like hotel in "Hella" now after having gone to "Vik" for
dinner. Cod stew. Tomorrow we drive over towards the airport to stay at the
Blue Lagoon, which is a spa. Maybe I'll drop 100 euros on a massage. Then
another Airbnb near there and off to the airport Tuesday to return the car,
and then we're LONDON BOUND.</p>
<p>You want to see more cats? Me too:</p>
<p><img src="europe2-9_small.webp" alt="" /></p>
<p><img src="europe2-10_small.webp" alt="" />
<em>[2020 note: these pictures are cropped badly due to file corruption.]</em> <br />
<em>[2020 note: my God, look at the cock on that one.]</em></p>
<p>These are the true Icelanders. The humans are kept alive only to act as
caretakers in their intergalactic communist utopia.</p>


        </body>
    </html></div></content></entry><entry><title>Europe, Day 1</title><link href="https://www.davidgoffredo.com/europe/europe1.html" /><id>https://www.davidgoffredo.com/europe/europe1.html</id><updated>2016-09-10</updated><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><html>
        <head>
            <base href="https://www.davidgoffredo.com/europe/europe1.html" />
        </head>
        <body>
            <h1>Europe, Day 1</h1>
<p><img src="vineet_ice_small.webp" alt="" />
<em>Vineet copes with the low coefficient of friction in Iceland.</em></p>
<p>Morning from the North,</p>
<p>Vineet and I got in just before midnight Iceland time last night. Immigration
was about five seconds in and out, and there was no customs. I bought some of
their funny money, which looks like other funny money I’ve seen. It’s not
green and it comes in large denominations.</p>
<p>Then the rental car guy put us and a few other Americans into a van and drove
five minutes to their lot, where we coughed over some more money and got into
a nice Korean SUV thing (an unexpected upgrade from what I had booked), and I
drove it on the wide, empty, Icelandic highway for less than an hour until we
reached the capital. The Airbnb place where we’re staying this and last night
is a nice, large, two bedroom apartment with a space-age shower and bizarre
power outlets. Vineet and I are in room 2. Just met the couple from room 1
this morning. They’re nice, but they talk funny. <em>I think they’re English</em>.</p>
<p>Body clock has no idea what’s going on. I guess the time difference is not so
bad. Going to drive around The Golden Circle today. I think the rental guys
might not have given us the promised full talk of “petrol,” which I presume
is a more expensive word for gasoline.</p>
<p>For those of you stalking along at home, we are currently here:</p>
<p><a href="https://www.google.is/maps/place/Reykjav%C3%ADk/@64.1369699,-21.8860857,11.43z/data=!4m5!3m4!1s0x48d674b9eedcedc3:0xec912ca230d26071!8m2!3d64.1265206!4d-21.8174393">https://www.google.is/maps/place/Reykjav%C3%ADk/@64.1369699,-21.8860857,11.43z/data=!4m5!3m4!1s0x48d674b9eedcedc3:0xec912ca230d26071!8m2!3d64.1265206!4d-21.8174393</a></p>
<p>DNS insists on bringing me to Icelandic websites. Don’t they know who I am?</p>


        </body>
    </html></div></content></entry></feed>